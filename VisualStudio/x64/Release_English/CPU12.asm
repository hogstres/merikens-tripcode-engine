; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

include listing.inc

INCLUDELIB OLDNAMES

EXTRN	SHA1_GenerateTripcodesWithOptimization_x64_AVX2:PROC
EXTRN	SHA1_GenerateTripcodesWithOptimization_x64_AVX:PROC
EXTRN	SHA1_GenerateTripcodesWithOptimization_x64_SSE2:PROC
EXTRN	_myxgetbv:PROC
EXTRN	SHA1_GenerateTripcodesWithOptimization_x64_SSE2_Nehalem:PROC
;	COMDAT ?the_4th_gen_features_available@?1??IsAVX2Supported@@YAHXZ@4HA
_DATA	SEGMENT
?the_4th_gen_features_available@?1??IsAVX2Supported@@YAHXZ@4HA DD 0ffffffffH ; `IsAVX2Supported'::`2'::the_4th_gen_features_available
PUBLIC	?Thread_SearchForSHA1TripcodesOnCPU@@YAXXZ	; Thread_SearchForSHA1TripcodesOnCPU
PUBLIC	?check_4th_gen_intel_core_features@@YAHXZ	; check_4th_gen_intel_core_features
PUBLIC	?check_xcr0_ymm@@YAHXZ				; check_xcr0_ymm
PUBLIC	?run_cpuid@@YAXIIPEAH@Z				; run_cpuid
PUBLIC	?ConvertRaw12CharTripcodeIntoDisplayFormat@@YAXPEAIPEAE@Z ; ConvertRaw12CharTripcodeIntoDisplayFormat
PUBLIC	?IsCPUBasedOnNehalemMicroarchitecture@@YAHXZ	; IsCPUBasedOnNehalemMicroarchitecture
PUBLIC	?IsAVX2Supported@@YAHXZ				; IsAVX2Supported
_Tuple_alloc DB	01H DUP (?)
	ALIGN	8

errno_ecat DQ	01H DUP (?)
ignore	DB	01H DUP (?)
	ALIGN	4

allocator_arg DB 01H DUP (?)
	ALIGN	8

native_ecat DQ	01H DUP (?)
piecewise_construct DB 01H DUP (?)
	ALIGN	8

posix_category DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Thread_SearchForSHA1TripcodesOnCPU@@YAXXZ DD imagerel $LN124
	DD	imagerel $LN124+65
	DD	imagerel $unwind$?Thread_SearchForSHA1TripcodesOnCPU@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?Thread_SearchForSHA1TripcodesOnCPU@@YAXXZ DD imagerel $LN124+65
	DD	imagerel $LN124+287
	DD	imagerel $chain$0$?Thread_SearchForSHA1TripcodesOnCPU@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?Thread_SearchForSHA1TripcodesOnCPU@@YAXXZ DD imagerel $LN124+287
	DD	imagerel $LN124+298
	DD	imagerel $chain$1$?Thread_SearchForSHA1TripcodesOnCPU@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?check_4th_gen_intel_core_features@@YAHXZ DD imagerel $LN17
	DD	imagerel $LN17+179
	DD	imagerel $unwind$?check_4th_gen_intel_core_features@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?check_xcr0_ymm@@YAHXZ DD imagerel $LN4
	DD	imagerel $LN4+28
	DD	imagerel $unwind$?check_xcr0_ymm@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?run_cpuid@@YAXIIPEAH@Z DD imagerel $LN4
	DD	imagerel $LN4+32
	DD	imagerel $unwind$?run_cpuid@@YAXIIPEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SearchForTripcodesWithOptimization_AVX2@@YAIXZ DD imagerel ?SearchForTripcodesWithOptimization_AVX2@@YAIXZ
	DD	imagerel ?SearchForTripcodesWithOptimization_AVX2@@YAIXZ+3336
	DD	imagerel $unwind$?SearchForTripcodesWithOptimization_AVX2@@YAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SearchForTripcodesWithOptimization@@YAIXZ DD imagerel ?SearchForTripcodesWithOptimization@@YAIXZ
	DD	imagerel ?SearchForTripcodesWithOptimization@@YAIXZ+136
	DD	imagerel $unwind$?SearchForTripcodesWithOptimization@@YAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?SearchForTripcodesWithOptimization@@YAIXZ DD imagerel ?SearchForTripcodesWithOptimization@@YAIXZ+136
	DD	imagerel ?SearchForTripcodesWithOptimization@@YAIXZ+2794
	DD	imagerel $chain$4$?SearchForTripcodesWithOptimization@@YAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$?SearchForTripcodesWithOptimization@@YAIXZ DD imagerel ?SearchForTripcodesWithOptimization@@YAIXZ+2794
	DD	imagerel ?SearchForTripcodesWithOptimization@@YAIXZ+2806
	DD	imagerel $chain$5$?SearchForTripcodesWithOptimization@@YAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Enative_ecat@system@boost@@YAXXZ DD imagerel ??__Enative_ecat@system@boost@@YAXXZ
	DD	imagerel ??__Enative_ecat@system@boost@@YAXXZ+21
	DD	imagerel $unwind$??__Enative_ecat@system@boost@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Eerrno_ecat@system@boost@@YAXXZ DD imagerel ??__Eerrno_ecat@system@boost@@YAXXZ
	DD	imagerel ??__Eerrno_ecat@system@boost@@YAXXZ+21
	DD	imagerel $unwind$??__Eerrno_ecat@system@boost@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Eposix_category@system@boost@@YAXXZ DD imagerel ??__Eposix_category@system@boost@@YAXXZ
	DD	imagerel ??__Eposix_category@system@boost@@YAXXZ+21
	DD	imagerel $unwind$??__Eposix_category@system@boost@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?IsCPUBasedOnNehalemMicroarchitecture@@YAHXZ DD imagerel $LN13
	DD	imagerel $LN13+148
	DD	imagerel $unwind$?IsCPUBasedOnNehalemMicroarchitecture@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?IsAVX2Supported@@YAHXZ DD imagerel $LN6
	DD	imagerel $LN6+30
	DD	imagerel $unwind$?IsAVX2Supported@@YAHXZ
;	COMDAT xdata
xdata	SEGMENT
$unwind$?IsAVX2Supported@@YAHXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?IsCPUBasedOnNehalemMicroarchitecture@@YAHXZ DD 021519H
	DD	030027206H
	DD	imagerel __GSHandlerCheck
	DD	030H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Eposix_category@system@boost@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Eerrno_ecat@system@boost@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Enative_ecat@system@boost@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$?SearchForTripcodesWithOptimization@@YAIXZ DD 021H
	DD	imagerel ?SearchForTripcodesWithOptimization@@YAIXZ
	DD	imagerel ?SearchForTripcodesWithOptimization@@YAIXZ+136
	DD	imagerel $unwind$?SearchForTripcodesWithOptimization@@YAIXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?SearchForTripcodesWithOptimization@@YAIXZ DD 0a3021H
	DD	0170f430H
	DD	0171e420H
	DD	0178d418H
	DD	0177c410H
	DD	01763408H
	DD	imagerel ?SearchForTripcodesWithOptimization@@YAIXZ
	DD	imagerel ?SearchForTripcodesWithOptimization@@YAIXZ+136
	DD	imagerel $unwind$?SearchForTripcodesWithOptimization@@YAIXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SearchForTripcodesWithOptimization@@YAIXZ DD 052419H
	DD	01720113H
	DD	060037004H
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	0b70H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SearchForTripcodesWithOptimization_AVX2@@YAIXZ DD 0d3f19H
	DD	02567425H
	DD	02556425H
	DD	02543425H
	DD	024e0125H
	DD	0e016f018H
	DD	0c012d014H
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	01224H
	DD	040H
	DD	020H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?run_cpuid@@YAXIIPEAH@Z DD 020501H
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?check_xcr0_ymm@@YAHXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?check_4th_gen_intel_core_features@@YAHXZ DD 021519H
	DD	030027206H
	DD	imagerel __GSHandlerCheck
	DD	030H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?Thread_SearchForSHA1TripcodesOnCPU@@YAXXZ DD 021H
	DD	imagerel $LN124
	DD	imagerel $LN124+65
	DD	imagerel $unwind$?Thread_SearchForSHA1TripcodesOnCPU@@YAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?Thread_SearchForSHA1TripcodesOnCPU@@YAXXZ DD 020521H
	DD	067405H
	DD	imagerel $LN124
	DD	imagerel $LN124+65
	DD	imagerel $unwind$?Thread_SearchForSHA1TripcodesOnCPU@@YAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Thread_SearchForSHA1TripcodesOnCPU@@YAXXZ DD 040a01H
	DD	07340aH
	DD	06006320aH
posix_category$initializer$ DQ FLAT:??__Eposix_category@system@boost@@YAXXZ
errno_ecat$initializer$ DQ FLAT:??__Eerrno_ecat@system@boost@@YAXXZ
native_ecat$initializer$ DQ FLAT:??__Enative_ecat@system@boost@@YAXXZ
; Function compile flags: /Ogtpy
; File z:\github\merikens-tripcode-engine\sourcefiles\cpu12.cpp
;	COMDAT ?IsAVX2Supported@@YAHXZ
_TEXT	SEGMENT
?IsAVX2Supported@@YAHXZ PROC				; IsAVX2Supported, COMDAT

; 631  : {

$LN6:
	sub	rsp, 40					; 00000028H

; 632  :     static int32_t the_4th_gen_features_available = -1;
; 633  :     /* test is performed once */
; 634  :     if (the_4th_gen_features_available < 0 )

	mov	eax, DWORD PTR ?the_4th_gen_features_available@?1??IsAVX2Supported@@YAHXZ@4HA
	test	eax, eax
	jns	SHORT $LN4@IsAVX2Supp

; 635  :         the_4th_gen_features_available = check_4th_gen_intel_core_features();

	call	?check_4th_gen_intel_core_features@@YAHXZ ; check_4th_gen_intel_core_features
	mov	DWORD PTR ?the_4th_gen_features_available@?1??IsAVX2Supported@@YAHXZ@4HA, eax
$LN4@IsAVX2Supp:

; 636  :  
; 637  :     return the_4th_gen_features_available;
; 638  : }

	add	rsp, 40					; 00000028H
	ret	0
?IsAVX2Supported@@YAHXZ ENDP				; IsAVX2Supported
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\github\merikens-tripcode-engine\sourcefiles\cpu12.cpp
;	COMDAT ?IsCPUBasedOnNehalemMicroarchitecture@@YAHXZ
_TEXT	SEGMENT
results$ = 0
processorInfoArray$ = 16
__$ArrayPad$ = 48
?IsCPUBasedOnNehalemMicroarchitecture@@YAHXZ PROC	; IsCPUBasedOnNehalemMicroarchitecture, COMDAT

; 243  : {

$LN13:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	movdqa	xmm0, XMMWORD PTR __xmm@000106e0000206f0000206c000020650

; 244  : 	int32_t results[4];
; 245  : 	int32_t processorInfoArray[] = {
; 246  : 		// 0x306a0, // For testing
; 247  : 
; 248  : 		// See: http://software.intel.com/en-us/articles/intel-architecture-and-processor-identification-with-cpuid-model-and-family-numbers
; 249  : 		0x20650,
; 250  : 		0x206c0,
; 251  : 		0x206f0,
; 252  : 		0x106e0,
; 253  : 		0x106a0,
; 254  : 		0x206e0,
; 255  : 		0
; 256  : 	};
; 257  : 	int32_t mask = 0xfffffff0;
; 258  : 	
; 259  : 	__cpuid(results, 1);

	xor	ecx, ecx
	mov	eax, 1
	cpuid
	xor	r8d, r8d
	mov	DWORD PTR processorInfoArray$[rsp+16], 67232 ; 000106a0H
	movdqu	XMMWORD PTR processorInfoArray$[rsp], xmm0
	mov	r9d, eax
	mov	QWORD PTR processorInfoArray$[rsp+20], 132832 ; 000206e0H
	mov	DWORD PTR results$[rsp+4], ebx
	mov	DWORD PTR results$[rsp+8], ecx
	mov	DWORD PTR results$[rsp+12], edx
	mov	eax, 132688				; 00020650H
	and	r9d, -16
$LL4@IsCPUBased:

; 261  : 		if ((results[0] & mask) == processorInfoArray[i])

	cmp	r9d, eax
	je	SHORT $LN8@IsCPUBased

; 260  : 	for (int32_t i = 0; processorInfoArray[i]; ++i) {

	mov	eax, DWORD PTR processorInfoArray$[rsp+r8*4+4]
	inc	r8
	test	eax, eax
	jne	SHORT $LL4@IsCPUBased

; 263  : 	}
; 264  : 
; 265  : 	return FALSE;
; 266  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
$LN8@IsCPUBased:

; 262  : 			return TRUE;

	mov	eax, 1

; 263  : 	}
; 264  : 
; 265  : 	return FALSE;
; 266  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
?IsCPUBasedOnNehalemMicroarchitecture@@YAHXZ ENDP	; IsCPUBasedOnNehalemMicroarchitecture
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\boost\system\error_code.hpp
;	COMDAT ??__Eposix_category@system@boost@@YAXXZ
text$di	SEGMENT
??__Eposix_category@system@boost@@YAXXZ PROC		; boost::system::`dynamic initializer for 'posix_category'', COMDAT

; 221  :     static const error_category &  posix_category = generic_category();

	sub	rsp, 40					; 00000028H
	call	?generic_category@system@boost@@YAAEBVerror_category@12@XZ ; boost::system::generic_category
	mov	QWORD PTR posix_category, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Eposix_category@system@boost@@YAXXZ ENDP		; boost::system::`dynamic initializer for 'posix_category''
text$di	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\boost\system\error_code.hpp
;	COMDAT ??__Eerrno_ecat@system@boost@@YAXXZ
text$di	SEGMENT
??__Eerrno_ecat@system@boost@@YAXXZ PROC		; boost::system::`dynamic initializer for 'errno_ecat'', COMDAT

; 222  :     static const error_category &  errno_ecat     = generic_category();

	sub	rsp, 40					; 00000028H
	call	?generic_category@system@boost@@YAAEBVerror_category@12@XZ ; boost::system::generic_category
	mov	QWORD PTR errno_ecat, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Eerrno_ecat@system@boost@@YAXXZ ENDP		; boost::system::`dynamic initializer for 'errno_ecat''
text$di	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\boost\system\error_code.hpp
;	COMDAT ??__Enative_ecat@system@boost@@YAXXZ
text$di	SEGMENT
??__Enative_ecat@system@boost@@YAXXZ PROC		; boost::system::`dynamic initializer for 'native_ecat'', COMDAT

; 223  :     static const error_category &  native_ecat    = system_category();

	sub	rsp, 40					; 00000028H
	call	?system_category@system@boost@@YAAEBVerror_category@12@XZ ; boost::system::system_category
	mov	QWORD PTR native_ecat, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Enative_ecat@system@boost@@YAXXZ ENDP		; boost::system::`dynamic initializer for 'native_ecat''
text$di	ENDS
; Function compile flags: /Ogtpy
; File z:\github\merikens-tripcode-engine\sourcefiles\cpu12.cpp
;	COMDAT ?ConvertRaw12CharTripcodeIntoDisplayFormat@@YAXPEAIPEAE@Z
_TEXT	SEGMENT
rawTripcodeArray$ = 8
tripcode$ = 16
?ConvertRaw12CharTripcodeIntoDisplayFormat@@YAXPEAIPEAE@Z PROC ; ConvertRaw12CharTripcodeIntoDisplayFormat, COMDAT

; 55   : 	tripcode[0]  = base64CharTable[ rawTripcodeArray[0] >> 26                                    ];

	mov	eax, DWORD PTR [rcx]
	mov	r8, rcx
	lea	r9, OFFSET FLAT:?base64CharTable@@3PADA	; base64CharTable
	shr	rax, 26
	movzx	eax, BYTE PTR [rax+r9]
	mov	BYTE PTR [rdx], al

; 56   : 	tripcode[1]  = base64CharTable[(rawTripcodeArray[0] >> 20                            ) & 0x3f];

	mov	eax, DWORD PTR [rcx]
	shr	rax, 20
	and	eax, 63					; 0000003fH
	movzx	eax, BYTE PTR [rax+r9]
	mov	BYTE PTR [rdx+1], al

; 57   : 	tripcode[2]  = base64CharTable[(rawTripcodeArray[0] >> 14                            ) & 0x3f];

	mov	eax, DWORD PTR [rcx]
	shr	rax, 14
	and	eax, 63					; 0000003fH
	movzx	eax, BYTE PTR [rax+r9]
	mov	BYTE PTR [rdx+2], al

; 58   : 	tripcode[3]  = base64CharTable[(rawTripcodeArray[0] >>  8                            ) & 0x3f];

	mov	eax, DWORD PTR [rcx]
	shr	rax, 8
	and	eax, 63					; 0000003fH
	movzx	eax, BYTE PTR [rax+r9]
	mov	BYTE PTR [rdx+3], al

; 59   : 	tripcode[4]  = base64CharTable[(rawTripcodeArray[0] >>  2                            ) & 0x3f];

	mov	eax, DWORD PTR [rcx]
	shr	rax, 2
	and	eax, 63					; 0000003fH
	movzx	eax, BYTE PTR [rax+r9]
	mov	BYTE PTR [rdx+4], al

; 60   : 	tripcode[5]  = base64CharTable[(rawTripcodeArray[1] >> 28 | rawTripcodeArray[0] <<  4) & 0x3f];

	mov	ecx, DWORD PTR [rcx]
	mov	eax, DWORD PTR [r8+4]
	shr	rax, 28
	shl	ecx, 4
	or	rcx, rax
	and	ecx, 63					; 0000003fH
	movzx	eax, BYTE PTR [rcx+r9]
	mov	BYTE PTR [rdx+5], al

; 61   : 	tripcode[6]  = base64CharTable[(rawTripcodeArray[1] >> 22                            ) & 0x3f];

	mov	eax, DWORD PTR [r8+4]
	shr	rax, 22
	and	eax, 63					; 0000003fH
	movzx	eax, BYTE PTR [rax+r9]
	mov	BYTE PTR [rdx+6], al

; 62   : 	tripcode[7]  = base64CharTable[(rawTripcodeArray[1] >> 16                            ) & 0x3f];

	movzx	eax, WORD PTR [r8+6]
	and	eax, 63					; 0000003fH
	movzx	eax, BYTE PTR [rax+r9]
	mov	BYTE PTR [rdx+7], al

; 63   : 	tripcode[8]  = base64CharTable[(rawTripcodeArray[1] >> 10                            ) & 0x3f];

	mov	eax, DWORD PTR [r8+4]
	shr	rax, 10
	and	eax, 63					; 0000003fH
	movzx	eax, BYTE PTR [rax+r9]
	mov	BYTE PTR [rdx+8], al

; 64   : 	tripcode[9]  = base64CharTable[(rawTripcodeArray[1] >>  4                            ) & 0x3f];

	mov	eax, DWORD PTR [r8+4]
	shr	rax, 4
	and	eax, 63					; 0000003fH
	movzx	eax, BYTE PTR [rax+r9]
	mov	BYTE PTR [rdx+9], al

; 65   : 	tripcode[10] = base64CharTable[(rawTripcodeArray[1] <<  2 | rawTripcodeArray[2] >> 30) & 0x3f];

	mov	eax, DWORD PTR [r8+4]
	mov	ecx, DWORD PTR [r8+8]
	shl	eax, 2
	shr	rcx, 30
	or	rcx, rax
	and	ecx, 63					; 0000003fH
	movzx	eax, BYTE PTR [rcx+r9]
	mov	BYTE PTR [rdx+10], al

; 66   : 	tripcode[11] = base64CharTable[(rawTripcodeArray[2] >> 24                            ) & 0x3f];

	movzx	eax, BYTE PTR [r8+11]
	and	eax, 63					; 0000003fH
	movzx	eax, BYTE PTR [rax+r9]
	mov	BYTE PTR [rdx+11], al

; 67   : }

	ret	0
?ConvertRaw12CharTripcodeIntoDisplayFormat@@YAXPEAIPEAE@Z ENDP ; ConvertRaw12CharTripcodeIntoDisplayFormat
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\github\merikens-tripcode-engine\sourcefiles\cpu12.cpp
;	COMDAT ?SearchForTripcodesWithOptimization@@YAIXZ
_TEXT	SEGMENT
numGeneratedTripcodes$1$ = 32
wordIndex$1$ = 36
SHA1_GenerateTripcodesWithOptimization$1$ = 40
$T1 = 48
$T2 = 56
$T3 = 64
W0$4 = 80
rawTripcodeArray$ = 96
generatedTripcodeChunkArray$5 = 144
ABC$6 = 176
PW$ = 224
W0Shifted$ = 1504
key$ = 1872
tripcode$ = 1888
keyCharTable_SecondByteAndOneByte_local$ = 1904
keyCharTable_FirstByte_local$ = 2416
__$ArrayPad$ = 2928
?SearchForTripcodesWithOptimization@@YAIXZ PROC		; SearchForTripcodesWithOptimization, COMDAT

; 269  : {

	push	rbp
	push	rsi
	push	rdi
	lea	rbp, QWORD PTR [rsp-2704]
	sub	rsp, 2960				; 00000b90H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rbp-256], rax

; 270  : 	unsigned char  tripcode[MAX_LEN_TRIPCODE + 1], key[MAX_LEN_TRIPCODE_KEY + 1];
; 271  : 	uint32_t   numGeneratedTripcodes = 0;

	xor	edi, edi

; 272  : 	uint32_t   rawTripcodeArray[4][3];
; 273  : 
; 274  : #ifdef _M_X64
; 275  : 	void           (*SHA1_GenerateTripcodesWithOptimization)(void *, void *, void *, void *) = 

	cmp	DWORD PTR ?options@@3UOptions@@A+80, edi
	je	SHORT $LN93@SearchForT
	call	IsAVXSupported
	test	eax, eax
	je	SHORT $LN93@SearchForT
	lea	rsi, OFFSET FLAT:SHA1_GenerateTripcodesWithOptimization_x64_AVX
	jmp	SHORT $LN184@SearchForT
$LN93@SearchForT:
	call	?IsCPUBasedOnNehalemMicroarchitecture@@YAHXZ ; IsCPUBasedOnNehalemMicroarchitecture
	lea	rsi, OFFSET FLAT:SHA1_GenerateTripcodesWithOptimization_x64_SSE2
	lea	rcx, OFFSET FLAT:SHA1_GenerateTripcodesWithOptimization_x64_SSE2_Nehalem
	test	eax, eax
	cmovne	rsi, rcx
$LN184@SearchForT:

; 276  : 		(options.isAVXEnabled && IsAVXSupported()) ? SHA1_GenerateTripcodesWithOptimization_x64_AVX          :
; 277  : 		(IsCPUBasedOnNehalemMicroarchitecture()  ) ? SHA1_GenerateTripcodesWithOptimization_x64_SSE2_Nehalem :
; 278  : 		                                             SHA1_GenerateTripcodesWithOptimization_x64_SSE2;
; 279  : #else
; 280  : 	void           (*SHA1_GenerateTripcodesWithOptimization)(void *, void *, void *, void *) = 
; 281  : 		(options.isAVXEnabled && IsAVXSupported()) ? SHA1_GenerateTripcodesWithOptimization_x86_AVX          :
; 282  : 		(IsCPUBasedOnNehalemMicroarchitecture()  ) ? SHA1_GenerateTripcodesWithOptimization_x86_SSE2_Nehalem :
; 283  : 		                                             SHA1_GenerateTripcodesWithOptimization_x86_SSE2;
; 284  : #endif
; 285  : 
; 286  : 	tripcode[lenTripcode]    = '\0';

	movsxd	rax, DWORD PTR ?lenTripcode@@3HA	; lenTripcode
	mov	QWORD PTR SHA1_GenerateTripcodesWithOptimization$1$[rsp], rsi
	cmp	rax, 13
	jae	$LN95@SearchForT
	mov	BYTE PTR tripcode$[rbp+rax-256], dil

; 287  : 	key     [lenTripcodeKey] = '\0';

	movsxd	rax, DWORD PTR ?lenTripcodeKey@@3HA	; lenTripcodeKey
	cmp	rax, 13
	jae	$LN193@SearchForT
	mov	QWORD PTR [rsp+2992], rbx
	mov	QWORD PTR [rsp+3000], r12
	mov	QWORD PTR [rsp+3008], r13
	mov	QWORD PTR [rsp+2952], r14
	mov	BYTE PTR key$[rbp+rax-256], dil
	mov	QWORD PTR [rsp+2944], r15
$LN186@SearchForT:

; 288  : 
; 289  : 	SetCharactersInTripcodeKeyForSHA1Tripcode(key);

	lea	rcx, QWORD PTR key$[rbp-256]
$LN185@SearchForT:
	call	?SetCharactersInTripcodeKeyForSHA1Tripcode@@YAXPEAE@Z ; SetCharactersInTripcodeKeyForSHA1Tripcode

; 290  : 	while (TRUE) {
; 291  : 		key[0] = ((key[0] & 0xfc) | 0x00); if (!IsValidKey(key)) { SetCharactersInTripcodeKeyForSHA1Tripcode(key); continue; }

	movzx	ebx, BYTE PTR key$[rbp-256]
	lea	rcx, QWORD PTR key$[rbp-256]
	and	bl, 252					; 000000fcH
	mov	BYTE PTR key$[rbp-256], bl
	call	?IsValidKey@@YAHPEAE@Z			; IsValidKey
	lea	rcx, QWORD PTR key$[rbp-256]
	test	eax, eax
	je	SHORT $LN185@SearchForT

; 292  : 		key[0] = ((key[0] & 0xfc) | 0x01); if (!IsValidKey(key)) { SetCharactersInTripcodeKeyForSHA1Tripcode(key); continue; }

	and	bl, 253					; 000000fdH
	or	bl, 1
	mov	BYTE PTR key$[rbp-256], bl
	call	?IsValidKey@@YAHPEAE@Z			; IsValidKey
	lea	rcx, QWORD PTR key$[rbp-256]
	test	eax, eax
	je	SHORT $LN185@SearchForT

; 293  : 		key[0] = ((key[0] & 0xfc) | 0x02); if (!IsValidKey(key)) { SetCharactersInTripcodeKeyForSHA1Tripcode(key); continue; }

	and	bl, 254					; 000000feH
	or	bl, 2
	mov	BYTE PTR key$[rbp-256], bl
	call	?IsValidKey@@YAHPEAE@Z			; IsValidKey
	lea	rcx, QWORD PTR key$[rbp-256]
	test	eax, eax
	je	SHORT $LN185@SearchForT

; 294  : 		key[0] = ((key[0] & 0xfc) | 0x03); if (!IsValidKey(key)) { SetCharactersInTripcodeKeyForSHA1Tripcode(key); continue; }

	or	BYTE PTR key$[rbp-256], 3
	call	?IsValidKey@@YAHPEAE@Z			; IsValidKey
	test	eax, eax
	je	SHORT $LN186@SearchForT

; 303  : 		keyCharTable_FirstByte_local[i]            = keyCharTable_FirstByte[i];
; 304  : 		keyCharTable_SecondByteAndOneByte_local[i] = keyCharTable_SecondByteAndOneByte[i];

	lea	rdx, OFFSET FLAT:?keyCharTable_SecondByteAndOneByte@@3PAEA ; keyCharTable_SecondByteAndOneByte
	lea	rcx, QWORD PTR keyCharTable_SecondByteAndOneByte_local$[rbp-256]
	mov	r8d, 512				; 00000200H
	call	memcpy
	lea	rdx, OFFSET FLAT:?keyCharTable_FirstByte@@3PAEA ; keyCharTable_FirstByte
	lea	rcx, QWORD PTR keyCharTable_FirstByte_local$[rbp-256]
	mov	r8d, 512				; 00000200H
	call	memcpy

; 305  : 	}
; 306  : 
; 307  : 	PW[0]  = _mm_set1_epi32(0);
; 308  : 	PW[1]  = _mm_set1_epi32((key[4] << 24) | (key[5] << 16) | (key[ 6] << 8) | key[ 7]);

	movzx	eax, BYTE PTR key$[rbp-251]
	movzx	ecx, BYTE PTR key$[rbp-252]
	xorps	xmm2, xmm2
	movdqa	XMMWORD PTR PW$[rbp-256], xmm2

; 309  : 	PW[2]  = _mm_set1_epi32((key[8] << 24) | (key[9] << 16) | (key[10] << 8) | key[11]);
; 310  : 	PW[3]  = _mm_set1_epi32(0x80000000);
; 311  : 	PW[4]  = _mm_set1_epi32(0);

	movdqa	XMMWORD PTR PW$[rbp-192], xmm2

; 312  : 	PW[5]  = _mm_set1_epi32(0);

	movdqa	XMMWORD PTR PW$[rbp-176], xmm2
	shl	ecx, 8
	or	ecx, eax
	movzx	eax, BYTE PTR key$[rbp-250]

; 313  : 	PW[6]  = _mm_set1_epi32(0);

	movdqa	XMMWORD PTR PW$[rbp-160], xmm2

; 314  : 	PW[7]  = _mm_set1_epi32(0);

	movdqa	XMMWORD PTR PW$[rbp-144], xmm2
	movdqa	XMMWORD PTR PW$[rbp-128], xmm2
	shl	ecx, 8
	or	ecx, eax
	movzx	eax, BYTE PTR key$[rbp-249]
	shl	ecx, 8

; 315  : 	PW[8]  = _mm_set1_epi32(0);
; 316  : 	PW[9]  = _mm_set1_epi32(0);

	movdqa	XMMWORD PTR PW$[rbp-112], xmm2

; 317  : 	PW[10] = _mm_set1_epi32(0);

	movdqa	XMMWORD PTR PW$[rbp-96], xmm2
	or	ecx, eax
	movzx	eax, BYTE PTR key$[rbp-247]

; 318  : 	PW[11] = _mm_set1_epi32(0);

	movdqa	XMMWORD PTR PW$[rbp-80], xmm2

; 319  : 	PW[12] = _mm_set1_epi32(0);

	movdqa	XMMWORD PTR PW$[rbp-64], xmm2
	movdqa	XMMWORD PTR PW$[rbp-48], xmm2
	movd	xmm0, ecx

; 320  : 	PW[13] = _mm_set1_epi32(0);
; 321  : 	PW[14] = _mm_set1_epi32(0);

	movdqa	XMMWORD PTR PW$[rbp-32], xmm2
	movzx	ecx, BYTE PTR key$[rbp-248]
	shl	ecx, 8
	or	ecx, eax
	movzx	eax, BYTE PTR key$[rbp-246]
	shl	ecx, 8
	or	ecx, eax
	movzx	eax, BYTE PTR key$[rbp-245]
	pshufd	xmm0, xmm0, 0
	shl	ecx, 8
	movdqa	XMMWORD PTR PW$[rbp-240], xmm0
	movdqa	xmm0, XMMWORD PTR __xmm@80000000800000008000000080000000
	or	ecx, eax
	lea	rax, QWORD PTR PW$[rbp-32]
	movdqa	XMMWORD PTR PW$[rbp-208], xmm0

; 322  : 	PW[15] = _mm_set1_epi32(12 * 8);

	movdqa	xmm0, XMMWORD PTR __xmm@00000060000000600000006000000060
	movdqa	XMMWORD PTR PW$[rbp-16], xmm0
	movd	xmm1, ecx
	mov	ecx, 63					; 0000003fH
	pshufd	xmm1, xmm1, 0

; 323  : 	PW[16] = ROTL(1, _mm_xor_si128(_mm_xor_si128(PW[16 - 3], PW[16 - 8]), PW[16 - 14]));

	pxor	xmm2, xmm1
	movdqa	XMMWORD PTR PW$[rbp-224], xmm1
	movdqa	xmm0, xmm2
	pslld	xmm2, 1
	psrld	xmm0, 31
	por	xmm0, xmm2
	movdqa	XMMWORD PTR PW$[rbp], xmm0
	npad	4
$LL81@SearchForT:

; 324  : 	for (int32_t t = 17; t < 80; ++t)
; 325  : 		PW[t] = ROTL(1, _mm_xor_si128(_mm_xor_si128(_mm_xor_si128(PW[(t) - 3], PW[(t) - 8]), PW[(t) - 14]), PW[(t) - 16]));

	movdqa	xmm1, XMMWORD PTR [rax-80]
	lea	rax, QWORD PTR [rax+16]
	pxor	xmm1, XMMWORD PTR [rax-16]
	pxor	xmm1, XMMWORD PTR [rax-192]
	pxor	xmm1, XMMWORD PTR [rax-224]
	movdqa	xmm0, xmm1
	pslld	xmm1, 1
	psrld	xmm0, 31
	por	xmm0, xmm1
	movdqa	XMMWORD PTR [rax+32], xmm0
	dec	rcx
	jne	SHORT $LL81@SearchForT

; 326  : 
; 327  : 	for (int32_t indexKey1 = 0; indexKey1 <= CPU_SHA1_MAX_INDEX_FOR_KEYS; ++indexKey1) {

	xor	eax, eax
	lea	r12, OFFSET FLAT:__ImageBase
	mov	QWORD PTR $T1[rsp], rax
	npad	8
$LL78@SearchForT:

; 328  : 		key[1] = keyCharTable_SecondByteAndOneByte_local[indexKey1];

	movzx	eax, BYTE PTR keyCharTable_SecondByteAndOneByte_local$[rbp+rax-256]
	mov	BYTE PTR key$[rbp-255], al

; 329  : 
; 330  : 		for (int32_t indexKey2 = 0; indexKey2 <= CPU_SHA1_MAX_INDEX_FOR_KEYS; ++indexKey2) {

	xor	eax, eax
	mov	QWORD PTR $T3[rsp], rax
	npad	11
$LL75@SearchForT:

; 331  : 			key[2] = keyCharTable_FirstByte_local[indexKey2];

	movzx	ecx, BYTE PTR keyCharTable_FirstByte_local$[rbp+rax-256]

; 332  : 
; 333  : 			for (int32_t indexKey3 = 0; indexKey3 <= CPU_SHA1_MAX_INDEX_FOR_KEYS; ++indexKey3) {

	xor	eax, eax
	mov	BYTE PTR key$[rbp-254], cl
	mov	QWORD PTR $T2[rsp], rax
	npad	11
$LL72@SearchForT:

; 334  : 				key[3] = keyCharTable_SecondByteAndOneByte_local[indexKey3];

	movzx	eax, BYTE PTR keyCharTable_SecondByteAndOneByte_local$[rbp+rax-256]

; 335  : 
; 336  : 				__declspec(align(16)) __m128i W0, ABC[3];
; 337  : 				W0.m128i_u32[0] = (((key[0] & 0xfc) | 0x00) << 24) | (key[1] << 16) | (key[ 2] << 8) | key[ 3];

	movzx	r10d, BYTE PTR key$[rbp-255]
	movzx	r9d, BYTE PTR key$[rbp-256]
	movzx	edx, cl
	mov	r8d, eax
	mov	ecx, r10d
	shl	ecx, 8
	mov	BYTE PTR key$[rbp-253], al
	shl	r9d, 24
	or	ecx, edx
	mov	eax, r9d
	shl	ecx, 8
	and	eax, -67108864				; fc000000H
	or	ecx, eax

; 338  : 				W0.m128i_u32[1] = (((key[0] & 0xfc) | 0x01) << 24) | (key[1] << 16) | (key[ 2] << 8) | key[ 3];

	mov	eax, r9d
	or	ecx, r8d
	and	eax, -50331648				; fd000000H
	mov	DWORD PTR W0$4[rsp], ecx
	mov	ecx, r10d
	bts	ecx, 8
	shl	ecx, 8
	or	ecx, edx
	shl	ecx, 8
	or	ecx, eax

; 339  : 				W0.m128i_u32[2] = (((key[0] & 0xfc) | 0x02) << 24) | (key[1] << 16) | (key[ 2] << 8) | key[ 3];

	mov	eax, r9d

; 340  : 				W0.m128i_u32[3] = (((key[0] & 0xfc) | 0x03) << 24) | (key[1] << 16) | (key[ 2] << 8) | key[ 3];

	and	r9d, -16777216				; ff000000H
	or	ecx, r8d
	and	eax, -33554432				; fe000000H
	mov	DWORD PTR W0$4[rsp+4], ecx
	mov	ecx, r10d
	or	r10d, 768				; 00000300H
	bts	ecx, 9
	shl	r10d, 8
	shl	ecx, 8
	or	r10d, edx
	or	ecx, edx
	shl	r10d, 8

; 341  : 
; 342  : 				(*SHA1_GenerateTripcodesWithOptimization)(&W0, PW, W0Shifted, ABC);

	lea	rdx, QWORD PTR PW$[rbp-256]
	shl	ecx, 8
	or	r10d, r9d
	lea	r9, QWORD PTR ABC$6[rbp-256]
	or	ecx, eax
	or	r10d, r8d
	or	ecx, r8d
	lea	r8, QWORD PTR W0Shifted$[rbp-256]
	mov	DWORD PTR W0$4[rsp+12], r10d
	mov	DWORD PTR W0$4[rsp+8], ecx
	lea	rcx, QWORD PTR W0$4[rsp]
	call	rsi

; 343  : 
; 344  : 				rawTripcodeArray[0][0] = ABC[0].m128i_u32[0];

	mov	eax, DWORD PTR ABC$6[rbp-256]

; 345  : 				rawTripcodeArray[0][1] = ABC[1].m128i_u32[0];
; 346  : 				rawTripcodeArray[0][2] = ABC[2].m128i_u32[0];
; 347  : 
; 348  : 				rawTripcodeArray[1][0] = ABC[0].m128i_u32[1];
; 349  : 				rawTripcodeArray[1][1] = ABC[1].m128i_u32[1];
; 350  : 				rawTripcodeArray[1][2] = ABC[2].m128i_u32[1];
; 351  : 
; 352  : 				rawTripcodeArray[2][0] = ABC[0].m128i_u32[2];
; 353  : 				rawTripcodeArray[2][1] = ABC[1].m128i_u32[2];
; 354  : 				rawTripcodeArray[2][2] = ABC[2].m128i_u32[2];
; 355  : 
; 356  : 				rawTripcodeArray[3][0] = ABC[0].m128i_u32[3];
; 357  : 				rawTripcodeArray[3][1] = ABC[1].m128i_u32[3];
; 358  : 				rawTripcodeArray[3][2] = ABC[2].m128i_u32[3];
; 359  : 
; 360  : 				numGeneratedTripcodes += 4;
; 361  : 			
; 362  : 				LOOK_FOR_POSSIBLE_MATCH(4)

	mov	r14d, DWORD PTR generatedTripcodeChunkArray$5[rbp-252]
	mov	DWORD PTR rawTripcodeArray$[rsp], eax
	mov	eax, DWORD PTR ABC$6[rbp-240]
	add	edi, 4
	mov	DWORD PTR rawTripcodeArray$[rsp+4], eax
	mov	eax, DWORD PTR ABC$6[rbp-224]
	xor	ecx, ecx
	mov	DWORD PTR rawTripcodeArray$[rsp+8], eax
	mov	eax, DWORD PTR ABC$6[rbp-252]
	mov	DWORD PTR numGeneratedTripcodes$1$[rsp], edi
	mov	DWORD PTR rawTripcodeArray$[rsp+12], eax
	mov	eax, DWORD PTR ABC$6[rbp-236]
	mov	DWORD PTR wordIndex$1$[rsp], ecx
	mov	DWORD PTR rawTripcodeArray$[rsp+16], eax
	mov	eax, DWORD PTR ABC$6[rbp-220]
	mov	DWORD PTR rawTripcodeArray$[rsp+20], eax
	mov	eax, DWORD PTR ABC$6[rbp-248]
	mov	DWORD PTR rawTripcodeArray$[rsp+24], eax
	mov	eax, DWORD PTR ABC$6[rbp-232]
	mov	DWORD PTR rawTripcodeArray$[rsp+28], eax
	mov	eax, DWORD PTR ABC$6[rbp-216]
	mov	DWORD PTR rawTripcodeArray$[rbp-224], eax
	mov	eax, DWORD PTR ABC$6[rbp-244]
	mov	DWORD PTR rawTripcodeArray$[rbp-220], eax
	mov	eax, DWORD PTR ABC$6[rbp-228]
	mov	DWORD PTR rawTripcodeArray$[rbp-216], eax
	mov	eax, DWORD PTR ABC$6[rbp-212]
	mov	DWORD PTR rawTripcodeArray$[rbp-212], eax
	npad	1
$LL69@SearchForT:
	movzx	eax, BYTE PTR key$[rbp-256]
	xor	esi, esi
	and	al, 252					; 000000fcH
	or	al, cl
	cmp	DWORD PTR ?searchMode@@3HA, esi		; searchMode
	mov	BYTE PTR key$[rbp-256], al
	movsxd	rax, ecx
	lea	rcx, QWORD PTR [rax+rax*2]
	lea	rdi, QWORD PTR [rcx*4]
	jne	SHORT $LN66@SearchForT
	mov	r9d, DWORD PTR rawTripcodeArray$[rsp+rdi]
	shr	r9d, 2
	jmp	SHORT $LN187@SearchForT
$LN66@SearchForT:
	cmp	DWORD PTR ?searchMode@@3HA, 1		; searchMode
	jne	SHORT $LN64@SearchForT
	mov	r9d, DWORD PTR rawTripcodeArray$[rsp+rdi+4]
	movzx	eax, BYTE PTR rawTripcodeArray$[rsp+rdi+11]
	and	r9d, 4194303				; 003fffffH
	shl	r9d, 8
	or	r9d, eax
$LN187@SearchForT:
	cmp	DWORD PTR ?numTripcodeChunk@@3IA, 1	; numTripcodeChunk
	mov	DWORD PTR generatedTripcodeChunkArray$5[rbp-256], r9d
	jne	$LN60@SearchForT
	mov	rax, QWORD PTR ?tripcodeChunkArray@@3PEAIEA ; tripcodeChunkArray
	cmp	r9d, DWORD PTR [rax]
	jne	$LN158@SearchForT
	lea	rcx, QWORD PTR rawTripcodeArray$[rsp]
	lea	rdx, QWORD PTR tripcode$[rbp-256]
	add	rcx, rdi
	call	?ConvertRaw12CharTripcodeIntoDisplayFormat@@YAXPEAIPEAE@Z ; ConvertRaw12CharTripcodeIntoDisplayFormat
	lea	rdx, QWORD PTR key$[rbp-256]
	lea	rcx, QWORD PTR tripcode$[rbp-256]
	call	?ProcessPossibleMatch@@YAXPEAE0@Z	; ProcessPossibleMatch
	jmp	$LN158@SearchForT
$LN64@SearchForT:
	cmp	DWORD PTR ?searchMode@@3HA, 2		; searchMode
	jne	SHORT $LN62@SearchForT
	mov	r14d, DWORD PTR rawTripcodeArray$[rsp+rdi+4]
	mov	r9d, DWORD PTR rawTripcodeArray$[rsp+rdi]
	movzx	eax, BYTE PTR rawTripcodeArray$[rsp+rdi+11]
	and	r14d, 4194303				; 003fffffH
	shr	r9d, 2
	shl	r14d, 8
	or	r14d, eax
	mov	DWORD PTR generatedTripcodeChunkArray$5[rbp-252], r14d
	jmp	$LN157@SearchForT
$LN62@SearchForT:
	mov	edx, DWORD PTR rawTripcodeArray$[rsp+rdi]
	mov	r8d, DWORD PTR rawTripcodeArray$[rsp+rdi+4]
	mov	r14d, r8d
	mov	ecx, r8d
	mov	eax, edx
	shl	eax, 4
	shr	ecx, 22
	shr	r14d, 28
	or	r14d, eax
	mov	eax, edx
	mov	r9d, edx
	shl	eax, 10
	shr	r9d, 2
	and	r14d, 1073741823			; 3fffffffH
	or	ecx, eax
	mov	eax, edx
	mov	DWORD PTR generatedTripcodeChunkArray$5[rbp-256], r9d
	and	ecx, 1073741823				; 3fffffffH
	and	eax, 16383				; 00003fffH
	mov	DWORD PTR generatedTripcodeChunkArray$5[rbp-252], r14d
	mov	DWORD PTR generatedTripcodeChunkArray$5[rbp-248], ecx
	movzx	ecx, WORD PTR rawTripcodeArray$[rsp+rdi+6]
	shl	eax, 16
	or	ecx, eax
	mov	eax, edx
	shl	edx, 28
	mov	DWORD PTR generatedTripcodeChunkArray$5[rbp-244], ecx
	shl	eax, 22
	mov	ecx, r8d
	shr	ecx, 10
	or	ecx, eax
	mov	eax, r8d
	and	ecx, 1073741823				; 3fffffffH
	shr	eax, 4
	or	eax, edx
	mov	DWORD PTR generatedTripcodeChunkArray$5[rbp-240], ecx
	mov	ecx, DWORD PTR rawTripcodeArray$[rsp+rdi+8]
	and	eax, 1073741823				; 3fffffffH
	shr	ecx, 30
	mov	DWORD PTR generatedTripcodeChunkArray$5[rbp-236], eax
	lea	eax, DWORD PTR [r8*4]
	and	r8d, 4194303				; 003fffffH
	or	ecx, eax
	movzx	eax, BYTE PTR rawTripcodeArray$[rsp+rdi+11]
	shl	r8d, 8
	and	ecx, 1073741823				; 3fffffffH
	or	eax, r8d
	mov	DWORD PTR generatedTripcodeChunkArray$5[rbp-228], eax
	mov	DWORD PTR generatedTripcodeChunkArray$5[rbp-232], ecx
$LN60@SearchForT:
	mov	eax, DWORD PTR ?searchMode@@3HA		; searchMode
	cmp	eax, 1
	jbe	$LN159@SearchForT
	cmp	eax, 2
	jne	$LN46@SearchForT
$LN157@SearchForT:
	mov	eax, r9d
	shr	rax, 18
	cmp	BYTE PTR ?smallChunkBitmap@@3PAEA[rax+r12], sil
	jne	SHORT $LN160@SearchForT
	mov	r8d, DWORD PTR ?numTripcodeChunk@@3IA	; numTripcodeChunk
	xor	r10d, r10d
	dec	r8d
	js	SHORT $LN160@SearchForT
	npad	1
$LL44@SearchForT:
	mov	rax, QWORD PTR ?tripcodeChunkArray@@3PEAIEA ; tripcodeChunkArray
	lea	edx, DWORD PTR [r8+r10]
	sar	edx, 1
	movsxd	rcx, edx
	mov	r11d, DWORD PTR [rax+rcx*4]
	cmp	r9d, r11d
	jbe	SHORT $LN188@SearchForT
	lea	r10d, DWORD PTR [rdx+1]
	jmp	SHORT $LN39@SearchForT
$LN188@SearchForT:
	jae	SHORT $LN40@SearchForT
	lea	r8d, DWORD PTR [rdx-1]
$LN39@SearchForT:
	cmp	r10d, r8d
	jle	SHORT $LL44@SearchForT
$LN160@SearchForT:
	mov	eax, r14d
	shr	rax, 18
	cmp	BYTE PTR ?smallChunkBitmap@@3PAEA[rax+r12], sil
	jne	$LN158@SearchForT
	mov	r8d, DWORD PTR ?numTripcodeChunk@@3IA	; numTripcodeChunk
	xor	r9d, r9d
	dec	r8d
	js	$LN158@SearchForT
	npad	14
$LL37@SearchForT:
	mov	rcx, QWORD PTR ?tripcodeChunkArray@@3PEAIEA ; tripcodeChunkArray
	lea	eax, DWORD PTR [r8+r9]
	sar	eax, 1
	movsxd	rdx, eax
	mov	r10d, DWORD PTR [rcx+rdx*4]
	cmp	r14d, r10d
	jbe	SHORT $LN189@SearchForT
	lea	r9d, DWORD PTR [rax+1]
	jmp	SHORT $LN32@SearchForT
$LN40@SearchForT:
	lea	rcx, QWORD PTR rawTripcodeArray$[rsp]
	lea	rdx, QWORD PTR tripcode$[rbp-256]
	add	rcx, rdi
	call	?ConvertRaw12CharTripcodeIntoDisplayFormat@@YAXPEAIPEAE@Z ; ConvertRaw12CharTripcodeIntoDisplayFormat
	lea	rdx, QWORD PTR key$[rbp-256]
	lea	rcx, QWORD PTR tripcode$[rbp-256]
	call	?ProcessPossibleMatch@@YAXPEAE0@Z	; ProcessPossibleMatch
	jmp	$LN68@SearchForT
$LN189@SearchForT:
	jae	SHORT $LN40@SearchForT
	lea	r8d, DWORD PTR [rax-1]
$LN32@SearchForT:
	cmp	r9d, r8d
	jle	SHORT $LL37@SearchForT

; 295  : 		break;
; 296  : 	}
; 297  : 
; 298  : 	__declspec(align(16)) __m128i PW[80], W0Shifted[23];
; 299  : 	unsigned char keyCharTable_FirstByte_local           [SIZE_KEY_CHAR_TABLE];
; 300  : 	unsigned char keyCharTable_SecondByteAndOneByte_local[SIZE_KEY_CHAR_TABLE];
; 301  : 
; 302  : 	for (int32_t i = 0; i < SIZE_KEY_CHAR_TABLE; ++i) {

	jmp	$LN158@SearchForT
$LN46@SearchForT:

; 345  : 				rawTripcodeArray[0][1] = ABC[1].m128i_u32[0];
; 346  : 				rawTripcodeArray[0][2] = ABC[2].m128i_u32[0];
; 347  : 
; 348  : 				rawTripcodeArray[1][0] = ABC[0].m128i_u32[1];
; 349  : 				rawTripcodeArray[1][1] = ABC[1].m128i_u32[1];
; 350  : 				rawTripcodeArray[1][2] = ABC[2].m128i_u32[1];
; 351  : 
; 352  : 				rawTripcodeArray[2][0] = ABC[0].m128i_u32[2];
; 353  : 				rawTripcodeArray[2][1] = ABC[1].m128i_u32[2];
; 354  : 				rawTripcodeArray[2][2] = ABC[2].m128i_u32[2];
; 355  : 
; 356  : 				rawTripcodeArray[3][0] = ABC[0].m128i_u32[3];
; 357  : 				rawTripcodeArray[3][1] = ABC[1].m128i_u32[3];
; 358  : 				rawTripcodeArray[3][2] = ABC[2].m128i_u32[3];
; 359  : 
; 360  : 				numGeneratedTripcodes += 4;
; 361  : 			
; 362  : 				LOOK_FOR_POSSIBLE_MATCH(4)

	cmp	DWORD PTR ?searchMode@@3HA, 3		; searchMode
	je	SHORT $LN103@SearchForT
	xor	eax, eax
	jmp	SHORT $LN104@SearchForT
$LN103@SearchForT:
	mov	eax, DWORD PTR ?lenTripcode@@3HA	; lenTripcode
	add	eax, -5
$LN104@SearchForT:
	xor	ebx, ebx
	movsxd	r15, eax
	test	eax, eax
	js	$LN158@SearchForT
	npad	2
$LL30@SearchForT:
	test	esi, esi
	jne	$LN29@SearchForT
	mov	r10d, DWORD PTR generatedTripcodeChunkArray$5[rbp+rbx*4-256]
	mov	eax, r10d
	shr	rax, 18
	cmp	BYTE PTR ?smallChunkBitmap@@3PAEA[rax+r12], sil
	jne	SHORT $LN29@SearchForT
	mov	r8d, DWORD PTR ?numTripcodeChunk@@3IA	; numTripcodeChunk
	xor	r9d, r9d
	dec	r8d
	js	SHORT $LN29@SearchForT
	npad	3
$LL26@SearchForT:
	mov	rax, QWORD PTR ?tripcodeChunkArray@@3PEAIEA ; tripcodeChunkArray
	lea	edx, DWORD PTR [r8+r9]
	sar	edx, 1
	movsxd	rcx, edx
	mov	r11d, DWORD PTR [rax+rcx*4]
	cmp	r10d, r11d
	jbe	SHORT $LN190@SearchForT
	lea	r9d, DWORD PTR [rdx+1]
	jmp	SHORT $LN21@SearchForT
$LN190@SearchForT:
	jae	SHORT $LN22@SearchForT
	lea	r8d, DWORD PTR [rdx-1]
$LN21@SearchForT:
	cmp	r9d, r8d
	jle	SHORT $LL26@SearchForT

; 295  : 		break;
; 296  : 	}
; 297  : 
; 298  : 	__declspec(align(16)) __m128i PW[80], W0Shifted[23];
; 299  : 	unsigned char keyCharTable_FirstByte_local           [SIZE_KEY_CHAR_TABLE];
; 300  : 	unsigned char keyCharTable_SecondByteAndOneByte_local[SIZE_KEY_CHAR_TABLE];
; 301  : 
; 302  : 	for (int32_t i = 0; i < SIZE_KEY_CHAR_TABLE; ++i) {

	jmp	SHORT $LN29@SearchForT
$LN22@SearchForT:

; 345  : 				rawTripcodeArray[0][1] = ABC[1].m128i_u32[0];
; 346  : 				rawTripcodeArray[0][2] = ABC[2].m128i_u32[0];
; 347  : 
; 348  : 				rawTripcodeArray[1][0] = ABC[0].m128i_u32[1];
; 349  : 				rawTripcodeArray[1][1] = ABC[1].m128i_u32[1];
; 350  : 				rawTripcodeArray[1][2] = ABC[2].m128i_u32[1];
; 351  : 
; 352  : 				rawTripcodeArray[2][0] = ABC[0].m128i_u32[2];
; 353  : 				rawTripcodeArray[2][1] = ABC[1].m128i_u32[2];
; 354  : 				rawTripcodeArray[2][2] = ABC[2].m128i_u32[2];
; 355  : 
; 356  : 				rawTripcodeArray[3][0] = ABC[0].m128i_u32[3];
; 357  : 				rawTripcodeArray[3][1] = ABC[1].m128i_u32[3];
; 358  : 				rawTripcodeArray[3][2] = ABC[2].m128i_u32[3];
; 359  : 
; 360  : 				numGeneratedTripcodes += 4;
; 361  : 			
; 362  : 				LOOK_FOR_POSSIBLE_MATCH(4)

	lea	rcx, QWORD PTR rawTripcodeArray$[rsp]
	lea	rdx, QWORD PTR tripcode$[rbp-256]
	add	rcx, rdi
	call	?ConvertRaw12CharTripcodeIntoDisplayFormat@@YAXPEAIPEAE@Z ; ConvertRaw12CharTripcodeIntoDisplayFormat
	lea	rdx, QWORD PTR key$[rbp-256]
	lea	rcx, QWORD PTR tripcode$[rbp-256]
	call	?ProcessPossibleMatch@@YAXPEAE0@Z	; ProcessPossibleMatch
	mov	esi, 1
$LN29@SearchForT:
	inc	rbx
	cmp	rbx, r15
	jle	$LL30@SearchForT
	test	esi, esi
	je	SHORT $LN158@SearchForT
	jmp	$LN68@SearchForT
$LN159@SearchForT:
	mov	eax, r9d
	shr	rax, 18
	cmp	BYTE PTR ?smallChunkBitmap@@3PAEA[rax+r12], sil
	jne	SHORT $LN158@SearchForT
	mov	r8d, DWORD PTR ?numTripcodeChunk@@3IA	; numTripcodeChunk
	xor	r10d, r10d
	dec	r8d
	js	SHORT $LN158@SearchForT
	npad	3
$LL53@SearchForT:
	mov	rax, QWORD PTR ?tripcodeChunkArray@@3PEAIEA ; tripcodeChunkArray
	lea	edx, DWORD PTR [r8+r10]
	sar	edx, 1
	movsxd	rcx, edx
	mov	r11d, DWORD PTR [rax+rcx*4]
	cmp	r9d, r11d
	jbe	SHORT $LN191@SearchForT
	lea	r10d, DWORD PTR [rdx+1]
	jmp	SHORT $LN48@SearchForT
$LN191@SearchForT:
	jae	$LN40@SearchForT
	lea	r8d, DWORD PTR [rdx-1]
$LN48@SearchForT:
	cmp	r10d, r8d
	jle	SHORT $LL53@SearchForT
$LN158@SearchForT:
	cmp	DWORD PTR ?searchForSpecialPatternsOnCPU@@3HA, 0 ; searchForSpecialPatternsOnCPU
	je	$LN68@SearchForT
	lea	rcx, QWORD PTR rawTripcodeArray$[rsp]
	lea	rdx, QWORD PTR tripcode$[rbp-256]
	add	rcx, rdi
	call	?ConvertRaw12CharTripcodeIntoDisplayFormat@@YAXPEAIPEAE@Z ; ConvertRaw12CharTripcodeIntoDisplayFormat
	cmp	DWORD PTR ?options@@3UOptions@@A+60, 0
	movzx	r13d, BYTE PTR tripcode$[rbp-245]
	movzx	ebx, BYTE PTR tripcode$[rbp-246]
	movzx	r12d, BYTE PTR tripcode$[rbp-247]
	movzx	r11d, BYTE PTR tripcode$[rbp-248]
	movzx	r15d, BYTE PTR tripcode$[rbp-249]
	movzx	r10d, BYTE PTR tripcode$[rbp-250]
	movzx	esi, BYTE PTR tripcode$[rbp-251]
	movzx	r9d, BYTE PTR tripcode$[rbp-252]
	movzx	edi, BYTE PTR tripcode$[rbp-253]
	movzx	r8d, BYTE PTR tripcode$[rbp-254]
	movzx	ecx, BYTE PTR tripcode$[rbp-255]
	movzx	edx, BYTE PTR tripcode$[rbp-256]
	je	SHORT $LN19@SearchForT
	cmp	dl, r13b
	jne	SHORT $LN19@SearchForT
	cmp	cl, bl
	jne	SHORT $LN19@SearchForT
	cmp	r8b, r12b
	jne	SHORT $LN19@SearchForT
	cmp	dil, r11b
	jne	SHORT $LN19@SearchForT
	cmp	r9b, r15b
	jne	SHORT $LN19@SearchForT
	cmp	sil, r10b
	je	$LN192@SearchForT
$LN19@SearchForT:
	cmp	DWORD PTR ?options@@3UOptions@@A+72, 0
	je	$LN17@SearchForT
	lea	r10, OFFSET FLAT:__ImageBase
	movzx	eax, dl
	cmp	BYTE PTR ?charTableForKagami@@3PAEA[rax+r10], r13b
	movzx	r10d, BYTE PTR tripcode$[rbp-250]
	jne	$LN17@SearchForT
	lea	rsi, OFFSET FLAT:__ImageBase
	movzx	eax, cl
	cmp	BYTE PTR ?charTableForKagami@@3PAEA[rax+rsi], bl
	movzx	esi, BYTE PTR tripcode$[rbp-251]
	jne	SHORT $LN17@SearchForT
	lea	rdx, OFFSET FLAT:__ImageBase
	movzx	eax, r8b
	cmp	BYTE PTR ?charTableForKagami@@3PAEA[rax+rdx], r12b
	movzx	edx, BYTE PTR tripcode$[rbp-256]
	jne	SHORT $LN17@SearchForT
	lea	r15, OFFSET FLAT:__ImageBase
	movzx	eax, dil
	cmp	BYTE PTR ?charTableForKagami@@3PAEA[rax+r15], r11b
	movzx	r15d, BYTE PTR tripcode$[rbp-249]
	jne	SHORT $LN17@SearchForT
	lea	r13, OFFSET FLAT:__ImageBase
	movzx	eax, r9b
	cmp	BYTE PTR ?charTableForKagami@@3PAEA[rax+r13], r15b
	movzx	r13d, BYTE PTR tripcode$[rbp-245]
	jne	SHORT $LN17@SearchForT
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	eax, sil
	cmp	BYTE PTR ?charTableForKagami@@3PAEA[rax+rcx], r10b
	movzx	ecx, BYTE PTR tripcode$[rbp-255]
	je	$LN192@SearchForT
$LN17@SearchForT:
	cmp	DWORD PTR ?options@@3UOptions@@A+64, 0
	je	SHORT $LN15@SearchForT
	cmp	dl, r10b
	jne	SHORT $LN15@SearchForT
	cmp	cl, r15b
	jne	SHORT $LN15@SearchForT
	cmp	r8b, r11b
	jne	SHORT $LN15@SearchForT
	cmp	dil, r12b
	jne	SHORT $LN15@SearchForT
	cmp	r9b, bl
	jne	SHORT $LN15@SearchForT
	cmp	sil, r13b
	je	$LN192@SearchForT
$LN15@SearchForT:
	cmp	DWORD PTR ?options@@3UOptions@@A+68, 0
	je	SHORT $LN13@SearchForT
	cmp	dl, cl
	jne	SHORT $LN13@SearchForT
	cmp	r8b, dil
	jne	SHORT $LN13@SearchForT
	cmp	r9b, sil
	jne	SHORT $LN13@SearchForT
	cmp	r10b, r15b
	jne	SHORT $LN13@SearchForT
	cmp	r11b, r12b
	jne	SHORT $LN13@SearchForT
	cmp	bl, r13b
	je	$LN192@SearchForT
$LN13@SearchForT:
	cmp	DWORD PTR ?options@@3UOptions@@A+52, 0
	je	SHORT $LN5@SearchForT
	cmp	dl, 46					; 0000002eH
	jne	SHORT $LN11@SearchForT
	cmp	r8b, dl
	jne	SHORT $LN11@SearchForT
	cmp	r9b, dl
	jne	SHORT $LN11@SearchForT
	cmp	r10b, dl
	jne	SHORT $LN11@SearchForT
	cmp	r11b, dl
	jne	SHORT $LN11@SearchForT
	cmp	bl, dl
	je	$LN192@SearchForT
$LN11@SearchForT:
	cmp	cl, 46					; 0000002eH
	jne	SHORT $LN9@SearchForT
	cmp	dil, cl
	jne	SHORT $LN9@SearchForT
	cmp	sil, cl
	jne	SHORT $LN9@SearchForT
	cmp	r15b, cl
	jne	SHORT $LN9@SearchForT
	cmp	r12b, cl
	jne	SHORT $LN9@SearchForT
	cmp	r13b, cl
	je	SHORT $LN192@SearchForT
$LN9@SearchForT:
	cmp	dl, 47					; 0000002fH
	jne	SHORT $LN7@SearchForT
	cmp	r8b, dl
	jne	SHORT $LN7@SearchForT
	cmp	r9b, dl
	jne	SHORT $LN7@SearchForT
	cmp	r10b, dl
	jne	SHORT $LN7@SearchForT
	cmp	r11b, dl
	jne	SHORT $LN7@SearchForT
	cmp	bl, dl
	je	SHORT $LN192@SearchForT
$LN7@SearchForT:
	cmp	cl, 47					; 0000002fH
	jne	SHORT $LN5@SearchForT
	cmp	dil, cl
	jne	SHORT $LN5@SearchForT
	cmp	sil, cl
	jne	SHORT $LN5@SearchForT
	cmp	r15b, cl
	jne	SHORT $LN5@SearchForT
	cmp	r12b, cl
	jne	SHORT $LN5@SearchForT
	cmp	r13b, cl
	je	SHORT $LN192@SearchForT
$LN5@SearchForT:
	cmp	DWORD PTR ?options@@3UOptions@@A+56, 0
	je	SHORT $LN182@SearchForT
	cmp	r8b, dl
	jne	SHORT $LN3@SearchForT
	cmp	r9b, dl
	jne	SHORT $LN3@SearchForT
	cmp	r10b, dl
	jne	SHORT $LN3@SearchForT
	cmp	r11b, dl
	jne	SHORT $LN3@SearchForT
	cmp	bl, dl
	je	SHORT $LN192@SearchForT
$LN3@SearchForT:
	cmp	dil, cl
	jne	SHORT $LN182@SearchForT
	cmp	sil, cl
	jne	SHORT $LN182@SearchForT
	cmp	r15b, cl
	jne	SHORT $LN182@SearchForT
	cmp	r12b, cl
	jne	SHORT $LN182@SearchForT
	cmp	r13b, cl
	jne	SHORT $LN182@SearchForT
$LN192@SearchForT:
	lea	rdx, QWORD PTR key$[rbp-256]
	lea	rcx, QWORD PTR tripcode$[rbp-256]
	call	?ProcessMatch@@YAXPEAE0@Z		; ProcessMatch
$LN182@SearchForT:
	lea	r12, OFFSET FLAT:__ImageBase
$LN68@SearchForT:
	mov	ecx, DWORD PTR wordIndex$1$[rsp]
	inc	ecx
	mov	DWORD PTR wordIndex$1$[rsp], ecx
	cmp	ecx, 4
	jl	$LL69@SearchForT

; 332  : 
; 333  : 			for (int32_t indexKey3 = 0; indexKey3 <= CPU_SHA1_MAX_INDEX_FOR_KEYS; ++indexKey3) {

	mov	rax, QWORD PTR $T2[rsp]
	mov	edi, DWORD PTR numGeneratedTripcodes$1$[rsp]
	mov	rsi, QWORD PTR SHA1_GenerateTripcodesWithOptimization$1$[rsp]
	inc	rax
	mov	QWORD PTR $T2[rsp], rax
	cmp	rax, 63					; 0000003fH
	jg	SHORT $LN175@SearchForT
	movzx	ecx, BYTE PTR key$[rbp-254]
	jmp	$LL72@SearchForT
$LN175@SearchForT:

; 329  : 
; 330  : 		for (int32_t indexKey2 = 0; indexKey2 <= CPU_SHA1_MAX_INDEX_FOR_KEYS; ++indexKey2) {

	mov	rax, QWORD PTR $T3[rsp]
	inc	rax
	mov	QWORD PTR $T3[rsp], rax
	cmp	rax, 63					; 0000003fH
	jle	$LL75@SearchForT

; 326  : 
; 327  : 	for (int32_t indexKey1 = 0; indexKey1 <= CPU_SHA1_MAX_INDEX_FOR_KEYS; ++indexKey1) {

	mov	rax, QWORD PTR $T1[rsp]
	inc	rax
	mov	QWORD PTR $T1[rsp], rax
	cmp	rax, 63					; 0000003fH
	jle	$LL78@SearchForT

; 363  : 			}
; 364  : 		}
; 365  : 	}
; 366  : 
; 367  : 	return numGeneratedTripcodes;

	mov	r15, QWORD PTR [rsp+2944]
	mov	r14, QWORD PTR [rsp+2952]
	mov	r13, QWORD PTR [rsp+3008]
	mov	r12, QWORD PTR [rsp+3000]
	mov	rbx, QWORD PTR [rsp+2992]
	mov	eax, edi

; 368  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rbp-256]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2960				; 00000b90H
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
$LN193@SearchForT:

; 287  : 	key     [lenTripcodeKey] = '\0';

	call	__report_rangecheckfailure
	int	3
$LN95@SearchForT:

; 276  : 		(options.isAVXEnabled && IsAVXSupported()) ? SHA1_GenerateTripcodesWithOptimization_x64_AVX          :
; 277  : 		(IsCPUBasedOnNehalemMicroarchitecture()  ) ? SHA1_GenerateTripcodesWithOptimization_x64_SSE2_Nehalem :
; 278  : 		                                             SHA1_GenerateTripcodesWithOptimization_x64_SSE2;
; 279  : #else
; 280  : 	void           (*SHA1_GenerateTripcodesWithOptimization)(void *, void *, void *, void *) = 
; 281  : 		(options.isAVXEnabled && IsAVXSupported()) ? SHA1_GenerateTripcodesWithOptimization_x86_AVX          :
; 282  : 		(IsCPUBasedOnNehalemMicroarchitecture()  ) ? SHA1_GenerateTripcodesWithOptimization_x86_SSE2_Nehalem :
; 283  : 		                                             SHA1_GenerateTripcodesWithOptimization_x86_SSE2;
; 284  : #endif
; 285  : 
; 286  : 	tripcode[lenTripcode]    = '\0';

	call	__report_rangecheckfailure
	int	3
$LN183@SearchForT:
?SearchForTripcodesWithOptimization@@YAIXZ ENDP		; SearchForTripcodesWithOptimization
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\github\merikens-tripcode-engine\sourcefiles\cpu12.cpp
;	COMDAT ?SearchForTripcodesWithOptimization_AVX2@@YAIXZ
_TEXT	SEGMENT
numGeneratedTripcodes$1$ = 0
wordIndex$1$ = 4
$T1 = 8
$T2 = 16
$T3 = 24
W0$ = 32
rawTripcodeArray$ = 64
generatedTripcodeChunkArray$4 = 160
ABC$ = 192
PW$ = 288
W0Shifted$ = 2848
key$ = 3584
tripcode$ = 3600
keyCharTable_SecondByteAndOneByte_local$ = 3616
keyCharTable_FirstByte_local$ = 4128
__$ArrayPad$ = 4640
?SearchForTripcodesWithOptimization_AVX2@@YAIXZ PROC	; SearchForTripcodesWithOptimization_AVX2, COMDAT

; 371  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	push	rbp
	push	r12
	push	r13
	push	r14
	push	r15
	mov	eax, 4720				; 00001270H
	call	__chkstk
	sub	rsp, rax
	lea	rbp, QWORD PTR [rsp+64]
	and	rbp, -32				; ffffffffffffffe0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rbp], rax

; 372  : 	unsigned char  tripcode[MAX_LEN_TRIPCODE + 1], key[MAX_LEN_TRIPCODE_KEY + 1];
; 373  : 	uint32_t   numGeneratedTripcodes = 0;
; 374  : 	uint32_t   rawTripcodeArray[8][3];
; 375  : 
; 376  : 	tripcode[lenTripcode]    = '\0';

	movsxd	rax, DWORD PTR ?lenTripcode@@3HA	; lenTripcode
	xor	edi, edi
	cmp	rax, 13
	jae	$LN97@SearchForT
	mov	BYTE PTR tripcode$[rbp+rax], dil

; 377  : 	key     [lenTripcodeKey] = '\0';

	movsxd	rax, DWORD PTR ?lenTripcodeKey@@3HA	; lenTripcodeKey
	cmp	rax, 13
	jae	$LN198@SearchForT
	mov	BYTE PTR key$[rbp+rax], dil
$LN191@SearchForT:

; 378  : 
; 379  : 	SetCharactersInTripcodeKeyForSHA1Tripcode(key);

	lea	rcx, QWORD PTR key$[rbp]
$LN190@SearchForT:
	call	?SetCharactersInTripcodeKeyForSHA1Tripcode@@YAXPEAE@Z ; SetCharactersInTripcodeKeyForSHA1Tripcode

; 380  : 	while (TRUE) {
; 381  : 		key[0] = ((key[0] & 0xf8) | 0x00); if (!IsValidKey(key)) { SetCharactersInTripcodeKeyForSHA1Tripcode(key); continue; }

	movzx	ebx, BYTE PTR key$[rbp]
	lea	rcx, QWORD PTR key$[rbp]
	and	bl, 248					; 000000f8H
	mov	BYTE PTR key$[rbp], bl
	call	?IsValidKey@@YAHPEAE@Z			; IsValidKey
	lea	rcx, QWORD PTR key$[rbp]
	test	eax, eax
	je	SHORT $LN190@SearchForT

; 382  : 		key[0] = ((key[0] & 0xf8) | 0x01); if (!IsValidKey(key)) { SetCharactersInTripcodeKeyForSHA1Tripcode(key); continue; }

	and	bl, 249					; 000000f9H
	or	bl, 1
	mov	BYTE PTR key$[rbp], bl
	call	?IsValidKey@@YAHPEAE@Z			; IsValidKey
	lea	rcx, QWORD PTR key$[rbp]
	test	eax, eax
	je	SHORT $LN190@SearchForT

; 383  : 		key[0] = ((key[0] & 0xf8) | 0x02); if (!IsValidKey(key)) { SetCharactersInTripcodeKeyForSHA1Tripcode(key); continue; }

	and	bl, 250					; 000000faH
	or	bl, 2
	mov	BYTE PTR key$[rbp], bl
	call	?IsValidKey@@YAHPEAE@Z			; IsValidKey
	lea	rcx, QWORD PTR key$[rbp]
	test	eax, eax
	je	SHORT $LN190@SearchForT

; 384  : 		key[0] = ((key[0] & 0xf8) | 0x03); if (!IsValidKey(key)) { SetCharactersInTripcodeKeyForSHA1Tripcode(key); continue; }

	and	bl, 251					; 000000fbH
	or	bl, 3
	mov	BYTE PTR key$[rbp], bl
	call	?IsValidKey@@YAHPEAE@Z			; IsValidKey
	lea	rcx, QWORD PTR key$[rbp]
	test	eax, eax
	je	SHORT $LN190@SearchForT

; 385  : 		key[0] = ((key[0] & 0xf8) | 0x04); if (!IsValidKey(key)) { SetCharactersInTripcodeKeyForSHA1Tripcode(key); continue; }

	and	bl, 252					; 000000fcH
	or	bl, 4
	mov	BYTE PTR key$[rbp], bl
	call	?IsValidKey@@YAHPEAE@Z			; IsValidKey
	lea	rcx, QWORD PTR key$[rbp]
	test	eax, eax
	je	$LN190@SearchForT

; 386  : 		key[0] = ((key[0] & 0xf8) | 0x05); if (!IsValidKey(key)) { SetCharactersInTripcodeKeyForSHA1Tripcode(key); continue; }

	and	bl, 253					; 000000fdH
	or	bl, 5
	mov	BYTE PTR key$[rbp], bl
	call	?IsValidKey@@YAHPEAE@Z			; IsValidKey
	lea	rcx, QWORD PTR key$[rbp]
	test	eax, eax
	je	$LN190@SearchForT

; 387  : 		key[0] = ((key[0] & 0xf8) | 0x06); if (!IsValidKey(key)) { SetCharactersInTripcodeKeyForSHA1Tripcode(key); continue; }

	and	bl, 254					; 000000feH
	or	bl, 6
	mov	BYTE PTR key$[rbp], bl
	call	?IsValidKey@@YAHPEAE@Z			; IsValidKey
	lea	rcx, QWORD PTR key$[rbp]
	test	eax, eax
	je	$LN190@SearchForT

; 388  : 		key[0] = ((key[0] & 0xf8) | 0x07); if (!IsValidKey(key)) { SetCharactersInTripcodeKeyForSHA1Tripcode(key); continue; }

	or	BYTE PTR key$[rbp], 7
	call	?IsValidKey@@YAHPEAE@Z			; IsValidKey
	test	eax, eax
	je	$LN191@SearchForT

; 399  : 		keyCharTable_FirstByte_local[i]            = keyCharTable_FirstByte[i];
; 400  : 		keyCharTable_SecondByteAndOneByte_local[i] = keyCharTable_SecondByteAndOneByte[i];

	lea	rdx, OFFSET FLAT:?keyCharTable_SecondByteAndOneByte@@3PAEA ; keyCharTable_SecondByteAndOneByte
	lea	rcx, QWORD PTR keyCharTable_SecondByteAndOneByte_local$[rbp]
	mov	r8d, 512				; 00000200H
	call	memcpy
	lea	rdx, OFFSET FLAT:?keyCharTable_FirstByte@@3PAEA ; keyCharTable_FirstByte
	lea	rcx, QWORD PTR keyCharTable_FirstByte_local$[rbp]
	mov	r8d, 512				; 00000200H
	call	memcpy

; 401  : 	}
; 402  : 
; 403  : 	PW[0].lower  = PW[0].upper  = _mm_set1_epi32(0);
; 404  : 	PW[1].lower  = PW[1].upper  = _mm_set1_epi32((key[4] << 24) | (key[5] << 16) | (key[ 6] << 8) | key[ 7]);

	movzx	eax, BYTE PTR key$[rbp+5]
	movzx	ecx, BYTE PTR key$[rbp+4]
	xorps	xmm2, xmm2
	movdqa	XMMWORD PTR PW$[rbp+16], xmm2
	movdqa	XMMWORD PTR PW$[rbp], xmm2
	movdqa	XMMWORD PTR PW$[rbp+144], xmm2
	shl	ecx, 8
	or	ecx, eax
	movzx	eax, BYTE PTR key$[rbp+6]

; 405  : 	PW[2].lower  = PW[2].upper  = _mm_set1_epi32((key[8] << 24) | (key[9] << 16) | (key[10] << 8) | key[11]);
; 406  : 	PW[3].lower  = PW[3].upper  = _mm_set1_epi32(0x80000000);
; 407  : 	PW[4].lower  = PW[4].upper  = _mm_set1_epi32(0);

	movdqa	XMMWORD PTR PW$[rbp+128], xmm2
	movdqa	XMMWORD PTR PW$[rbp+176], xmm2

; 408  : 	PW[5].lower  = PW[5].upper  = _mm_set1_epi32(0);

	movdqa	XMMWORD PTR PW$[rbp+160], xmm2
	shl	ecx, 8
	or	ecx, eax
	movzx	eax, BYTE PTR key$[rbp+7]
	shl	ecx, 8
	movdqa	XMMWORD PTR PW$[rbp+208], xmm2

; 409  : 	PW[6].lower  = PW[6].upper  = _mm_set1_epi32(0);

	movdqa	XMMWORD PTR PW$[rbp+192], xmm2
	or	ecx, eax
	movzx	eax, BYTE PTR key$[rbp+9]
	movdqa	XMMWORD PTR PW$[rbp+240], xmm2

; 410  : 	PW[7].lower  = PW[7].upper  = _mm_set1_epi32(0);

	movdqa	XMMWORD PTR PW$[rbp+224], xmm2
	movdqa	XMMWORD PTR PW$[rbp+272], xmm2
	movd	xmm0, ecx

; 411  : 	PW[8].lower  = PW[8].upper  = _mm_set1_epi32(0);

	movdqa	XMMWORD PTR PW$[rbp+256], xmm2
	movdqa	XMMWORD PTR PW$[rbp+304], xmm2
	movzx	ecx, BYTE PTR key$[rbp+8]
	shl	ecx, 8
	or	ecx, eax
	movzx	eax, BYTE PTR key$[rbp+10]
	shl	ecx, 8
	or	ecx, eax
	movzx	eax, BYTE PTR key$[rbp+11]
	pshufd	xmm0, xmm0, 0
	movdqa	XMMWORD PTR PW$[rbp+48], xmm0
	movdqa	XMMWORD PTR PW$[rbp+32], xmm0
	movdqa	xmm0, XMMWORD PTR __xmm@80000000800000008000000080000000
	shl	ecx, 8
	or	ecx, eax
	lea	rax, QWORD PTR PW$[rbp+448]
	movdqa	XMMWORD PTR PW$[rbp+112], xmm0
	movdqa	XMMWORD PTR PW$[rbp+96], xmm0

; 412  : 	PW[9].lower  = PW[9].upper  = _mm_set1_epi32(0);
; 413  : 	PW[10].lower = PW[10].upper = _mm_set1_epi32(0);
; 414  : 	PW[11].lower = PW[11].upper = _mm_set1_epi32(0);
; 415  : 	PW[12].lower = PW[12].upper = _mm_set1_epi32(0);
; 416  : 	PW[13].lower = PW[13].upper = _mm_set1_epi32(0);
; 417  : 	PW[14].lower = PW[14].upper = _mm_set1_epi32(0);
; 418  : 	PW[15].lower = PW[15].upper = _mm_set1_epi32(12 * 8);

	movdqa	xmm0, XMMWORD PTR __xmm@00000060000000600000006000000060
	movdqa	XMMWORD PTR PW$[rbp+496], xmm0
	movdqa	XMMWORD PTR PW$[rbp+480], xmm0
	movd	xmm1, ecx
	mov	ecx, 63					; 0000003fH
	pshufd	xmm1, xmm1, 0
	movdqa	XMMWORD PTR PW$[rbp+288], xmm2
	movdqa	XMMWORD PTR PW$[rbp+336], xmm2
	movdqa	XMMWORD PTR PW$[rbp+320], xmm2
	movdqa	XMMWORD PTR PW$[rbp+368], xmm2
	movdqa	XMMWORD PTR PW$[rbp+352], xmm2
	movdqa	XMMWORD PTR PW$[rbp+400], xmm2
	movdqa	XMMWORD PTR PW$[rbp+384], xmm2
	movdqa	XMMWORD PTR PW$[rbp+432], xmm2
	movdqa	XMMWORD PTR PW$[rbp+416], xmm2
	movdqa	XMMWORD PTR PW$[rbp+464], xmm2
	movdqa	XMMWORD PTR PW$[rbp+448], xmm2
	movdqa	XMMWORD PTR PW$[rbp+80], xmm1

; 419  : 	PW[16].lower = PW[16].upper = ROTL(1, _mm_xor_si128(_mm_xor_si128(PW[16 - 3].lower, PW[16 - 8].lower), PW[16 - 14].lower));

	pxor	xmm2, xmm1
	movdqa	xmm0, xmm2
	movdqa	XMMWORD PTR PW$[rbp+64], xmm1
	pslld	xmm2, 1
	psrld	xmm0, 31
	por	xmm0, xmm2
	movdqa	XMMWORD PTR PW$[rbp+528], xmm0
	movdqa	XMMWORD PTR PW$[rbp+512], xmm0
	npad	3
$LL81@SearchForT:

; 420  : 	for (int32_t t = 17; t < 80; ++t)
; 421  : 		PW[t].lower = PW[t].upper = ROTL(1, _mm_xor_si128(_mm_xor_si128(_mm_xor_si128(PW[(t) - 3].lower, PW[(t) - 8].lower), PW[(t) - 14].lower), PW[(t) - 16].lower));

	movdqa	xmm1, XMMWORD PTR [rax-160]
	lea	rax, QWORD PTR [rax+32]
	pxor	xmm1, XMMWORD PTR [rax-32]
	pxor	xmm1, XMMWORD PTR [rax-384]
	pxor	xmm1, XMMWORD PTR [rax-448]
	movdqa	xmm0, xmm1
	pslld	xmm1, 1
	psrld	xmm0, 31
	por	xmm0, xmm1
	movdqa	XMMWORD PTR [rax+80], xmm0
	movdqa	XMMWORD PTR [rax+64], xmm0
	dec	rcx
	jne	SHORT $LL81@SearchForT

; 422  : 
; 423  : 	for (int32_t indexKey1 = 0; indexKey1 <= CPU_SHA1_MAX_INDEX_FOR_KEYS; ++indexKey1) {

	xor	eax, eax
	lea	r12, OFFSET FLAT:__ImageBase
	mov	QWORD PTR $T2[rbp], rax
	npad	1
$LL78@SearchForT:

; 424  : 		key[1] = keyCharTable_SecondByteAndOneByte_local[indexKey1];

	movzx	eax, BYTE PTR keyCharTable_SecondByteAndOneByte_local$[rbp+rax]
	mov	BYTE PTR key$[rbp+1], al

; 425  : 
; 426  : 		for (int32_t indexKey2 = 0; indexKey2 <= CPU_SHA1_MAX_INDEX_FOR_KEYS; ++indexKey2) {

	xor	eax, eax
	mov	QWORD PTR $T1[rbp], rax
	npad	12
$LL75@SearchForT:

; 427  : 			key[2] = keyCharTable_FirstByte_local[indexKey2];

	movzx	ecx, BYTE PTR keyCharTable_FirstByte_local$[rbp+rax]

; 428  : 
; 429  : 			for (int32_t indexKey3 = 0; indexKey3 <= CPU_SHA1_MAX_INDEX_FOR_KEYS; ++indexKey3) {

	xor	eax, eax
	mov	BYTE PTR key$[rbp+2], cl
	mov	QWORD PTR $T3[rbp], rax
$LL72@SearchForT:

; 430  : 				key[3] = keyCharTable_SecondByteAndOneByte_local[indexKey3];
; 431  : 				
; 432  : 				W0.lower.m128i_u32[0] = (((key[0] & 0xf8) | 0x00) << 24) | (key[1] << 16) | (key[ 2] << 8) | key[ 3];

	movzx	edx, cl
	movzx	eax, BYTE PTR keyCharTable_SecondByteAndOneByte_local$[rbp+rax]
	movzx	r10d, BYTE PTR key$[rbp+1]
	movzx	r9d, BYTE PTR key$[rbp]
	mov	r8d, eax
	mov	BYTE PTR key$[rbp+3], al
	shl	r9d, 24
	mov	ecx, r10d
	shl	ecx, 8
	mov	eax, r9d
	or	ecx, edx
	and	eax, -134217728				; f8000000H
	shl	ecx, 8
	or	ecx, eax

; 433  : 				W0.lower.m128i_u32[1] = (((key[0] & 0xf8) | 0x01) << 24) | (key[1] << 16) | (key[ 2] << 8) | key[ 3];

	mov	eax, r9d
	or	ecx, r8d
	and	eax, -117440512				; f9000000H
	mov	DWORD PTR W0$[rbp], ecx
	mov	ecx, r10d
	bts	ecx, 8
	shl	ecx, 8
	or	ecx, edx
	shl	ecx, 8
	or	ecx, eax

; 434  : 				W0.lower.m128i_u32[2] = (((key[0] & 0xf8) | 0x02) << 24) | (key[1] << 16) | (key[ 2] << 8) | key[ 3];

	mov	eax, r9d
	or	ecx, r8d
	and	eax, -100663296				; fa000000H
	mov	DWORD PTR W0$[rbp+4], ecx
	mov	ecx, r10d
	bts	ecx, 9
	shl	ecx, 8
	or	ecx, edx
	shl	ecx, 8
	or	ecx, eax

; 435  : 				W0.lower.m128i_u32[3] = (((key[0] & 0xf8) | 0x03) << 24) | (key[1] << 16) | (key[ 2] << 8) | key[ 3];

	mov	eax, r9d
	or	ecx, r8d
	and	eax, -83886080				; fb000000H
	mov	DWORD PTR W0$[rbp+8], ecx
	mov	ecx, r10d
	or	ecx, 768				; 00000300H
	shl	ecx, 8
	or	ecx, edx
	shl	ecx, 8
	or	ecx, eax

; 436  : 
; 437  : 				W0.upper.m128i_u32[0] = (((key[0] & 0xf8) | 0x04) << 24) | (key[1] << 16) | (key[ 2] << 8) | key[ 3];

	mov	eax, r9d
	or	ecx, r8d
	and	eax, -67108864				; fc000000H
	mov	DWORD PTR W0$[rbp+12], ecx
	mov	ecx, r10d
	bts	ecx, 10
	shl	ecx, 8
	or	ecx, edx
	shl	ecx, 8
	or	ecx, eax

; 438  : 				W0.upper.m128i_u32[1] = (((key[0] & 0xf8) | 0x05) << 24) | (key[1] << 16) | (key[ 2] << 8) | key[ 3];

	mov	eax, r9d
	or	ecx, r8d
	and	eax, -50331648				; fd000000H
	mov	DWORD PTR W0$[rbp+16], ecx
	mov	ecx, r10d
	or	ecx, 1280				; 00000500H
	shl	ecx, 8
	or	ecx, edx
	shl	ecx, 8
	or	ecx, eax

; 439  : 				W0.upper.m128i_u32[2] = (((key[0] & 0xf8) | 0x06) << 24) | (key[1] << 16) | (key[ 2] << 8) | key[ 3];

	mov	eax, r9d
	or	ecx, r8d
	and	eax, -33554432				; fe000000H
	mov	DWORD PTR W0$[rbp+20], ecx
	mov	ecx, r10d

; 440  : 				W0.upper.m128i_u32[3] = (((key[0] & 0xf8) | 0x07) << 24) | (key[1] << 16) | (key[ 2] << 8) | key[ 3];

	or	r10d, 1792				; 00000700H
	or	ecx, 1536				; 00000600H
	shl	r10d, 8
	shl	ecx, 8
	or	r10d, edx
	or	ecx, edx
	shl	r10d, 8
	shl	ecx, 8
	or	ecx, eax
	or	ecx, r8d
	and	r9d, -16777216				; ff000000H
	mov	DWORD PTR W0$[rbp+24], ecx
	or	r10d, r9d

; 441  : 
; 442  : #ifdef _M_X64
; 443  : 				SHA1_GenerateTripcodesWithOptimization_x64_AVX2(&W0, PW, W0Shifted, ABC);

	lea	rdx, QWORD PTR PW$[rbp]
	lea	rcx, QWORD PTR W0$[rbp]
	or	r10d, r8d
	lea	r8, QWORD PTR W0Shifted$[rbp]
	lea	r9, QWORD PTR ABC$[rbp]
	mov	DWORD PTR W0$[rbp+28], r10d
	call	SHA1_GenerateTripcodesWithOptimization_x64_AVX2

; 444  : #else
; 445  : 				SHA1_GenerateTripcodesWithOptimization_x86_AVX2(&W0, PW, W0Shifted, ABC);
; 446  : #endif
; 447  : 
; 448  : 				rawTripcodeArray[0][0] = ABC[0].lower.m128i_u32[0];

	mov	eax, DWORD PTR ABC$[rbp]

; 449  : 				rawTripcodeArray[0][1] = ABC[1].lower.m128i_u32[0];
; 450  : 				rawTripcodeArray[0][2] = ABC[2].lower.m128i_u32[0];
; 451  : 
; 452  : 				rawTripcodeArray[1][0] = ABC[0].lower.m128i_u32[1];
; 453  : 				rawTripcodeArray[1][1] = ABC[1].lower.m128i_u32[1];
; 454  : 				rawTripcodeArray[1][2] = ABC[2].lower.m128i_u32[1];
; 455  : 
; 456  : 				rawTripcodeArray[2][0] = ABC[0].lower.m128i_u32[2];
; 457  : 				rawTripcodeArray[2][1] = ABC[1].lower.m128i_u32[2];
; 458  : 				rawTripcodeArray[2][2] = ABC[2].lower.m128i_u32[2];
; 459  : 
; 460  : 				rawTripcodeArray[3][0] = ABC[0].lower.m128i_u32[3];
; 461  : 				rawTripcodeArray[3][1] = ABC[1].lower.m128i_u32[3];
; 462  : 				rawTripcodeArray[3][2] = ABC[2].lower.m128i_u32[3];
; 463  : 
; 464  : 				rawTripcodeArray[4][0] = ABC[0].upper.m128i_u32[0];
; 465  : 				rawTripcodeArray[4][1] = ABC[1].upper.m128i_u32[0];
; 466  : 				rawTripcodeArray[4][2] = ABC[2].upper.m128i_u32[0];
; 467  : 
; 468  : 				rawTripcodeArray[5][0] = ABC[0].upper.m128i_u32[1];
; 469  : 				rawTripcodeArray[5][1] = ABC[1].upper.m128i_u32[1];
; 470  : 				rawTripcodeArray[5][2] = ABC[2].upper.m128i_u32[1];
; 471  : 
; 472  : 				rawTripcodeArray[6][0] = ABC[0].upper.m128i_u32[2];
; 473  : 				rawTripcodeArray[6][1] = ABC[1].upper.m128i_u32[2];
; 474  : 				rawTripcodeArray[6][2] = ABC[2].upper.m128i_u32[2];
; 475  : 
; 476  : 				rawTripcodeArray[7][0] = ABC[0].upper.m128i_u32[3];
; 477  : 				rawTripcodeArray[7][1] = ABC[1].upper.m128i_u32[3];
; 478  : 				rawTripcodeArray[7][2] = ABC[2].upper.m128i_u32[3];
; 479  : 
; 480  : 				numGeneratedTripcodes += 8;
; 481  : 			
; 482  : 				LOOK_FOR_POSSIBLE_MATCH(8)

	mov	esi, DWORD PTR generatedTripcodeChunkArray$4[rbp+4]
	mov	DWORD PTR rawTripcodeArray$[rbp], eax
	mov	eax, DWORD PTR ABC$[rbp+32]
	mov	DWORD PTR rawTripcodeArray$[rbp+4], eax
	mov	eax, DWORD PTR ABC$[rbp+64]
	add	edi, 8
	mov	DWORD PTR rawTripcodeArray$[rbp+8], eax
	mov	eax, DWORD PTR ABC$[rbp+4]
	xor	ecx, ecx
	mov	DWORD PTR rawTripcodeArray$[rbp+12], eax
	mov	eax, DWORD PTR ABC$[rbp+36]
	mov	DWORD PTR numGeneratedTripcodes$1$[rbp], edi
	mov	DWORD PTR rawTripcodeArray$[rbp+16], eax
	mov	eax, DWORD PTR ABC$[rbp+68]
	mov	DWORD PTR wordIndex$1$[rbp], ecx
	mov	DWORD PTR rawTripcodeArray$[rbp+20], eax
	mov	eax, DWORD PTR ABC$[rbp+8]
	mov	DWORD PTR rawTripcodeArray$[rbp+24], eax
	mov	eax, DWORD PTR ABC$[rbp+40]
	mov	DWORD PTR rawTripcodeArray$[rbp+28], eax
	mov	eax, DWORD PTR ABC$[rbp+72]
	mov	DWORD PTR rawTripcodeArray$[rbp+32], eax
	mov	eax, DWORD PTR ABC$[rbp+12]
	mov	DWORD PTR rawTripcodeArray$[rbp+36], eax
	mov	eax, DWORD PTR ABC$[rbp+44]
	mov	DWORD PTR rawTripcodeArray$[rbp+40], eax
	mov	eax, DWORD PTR ABC$[rbp+76]
	mov	DWORD PTR rawTripcodeArray$[rbp+44], eax
	mov	eax, DWORD PTR ABC$[rbp+16]
	mov	DWORD PTR rawTripcodeArray$[rbp+48], eax
	mov	eax, DWORD PTR ABC$[rbp+48]
	mov	DWORD PTR rawTripcodeArray$[rbp+52], eax
	mov	eax, DWORD PTR ABC$[rbp+80]
	mov	DWORD PTR rawTripcodeArray$[rbp+56], eax
	mov	eax, DWORD PTR ABC$[rbp+20]
	mov	DWORD PTR rawTripcodeArray$[rbp+60], eax
	mov	eax, DWORD PTR ABC$[rbp+52]
	mov	DWORD PTR rawTripcodeArray$[rbp+64], eax
	mov	eax, DWORD PTR ABC$[rbp+84]
	mov	DWORD PTR rawTripcodeArray$[rbp+68], eax
	mov	eax, DWORD PTR ABC$[rbp+24]
	mov	DWORD PTR rawTripcodeArray$[rbp+72], eax
	mov	eax, DWORD PTR ABC$[rbp+56]
	mov	DWORD PTR rawTripcodeArray$[rbp+76], eax
	mov	eax, DWORD PTR ABC$[rbp+88]
	mov	DWORD PTR rawTripcodeArray$[rbp+80], eax
	mov	eax, DWORD PTR ABC$[rbp+28]
	mov	DWORD PTR rawTripcodeArray$[rbp+84], eax
	mov	eax, DWORD PTR ABC$[rbp+60]
	mov	DWORD PTR rawTripcodeArray$[rbp+88], eax
	mov	eax, DWORD PTR ABC$[rbp+92]
	mov	DWORD PTR rawTripcodeArray$[rbp+92], eax
	npad	7
$LL69@SearchForT:
	movzx	eax, BYTE PTR key$[rbp]
	xor	r14d, r14d
	and	al, 248					; 000000f8H
	or	al, cl
	cmp	DWORD PTR ?searchMode@@3HA, r14d	; searchMode
	mov	BYTE PTR key$[rbp], al
	movsxd	rax, ecx
	lea	rcx, QWORD PTR [rax+rax*2]
	lea	rbx, QWORD PTR [rcx*4]
	jne	SHORT $LN66@SearchForT
	mov	r9d, DWORD PTR rawTripcodeArray$[rbp+rbx]
	shr	r9d, 2
	jmp	SHORT $LN192@SearchForT
$LN66@SearchForT:
	cmp	DWORD PTR ?searchMode@@3HA, 1		; searchMode
	jne	SHORT $LN64@SearchForT
	mov	r9d, DWORD PTR rawTripcodeArray$[rbp+rbx+4]
	movzx	eax, BYTE PTR rawTripcodeArray$[rbp+rbx+11]
	and	r9d, 4194303				; 003fffffH
	shl	r9d, 8
	or	r9d, eax
$LN192@SearchForT:
	cmp	DWORD PTR ?numTripcodeChunk@@3IA, 1	; numTripcodeChunk
	mov	DWORD PTR generatedTripcodeChunkArray$4[rbp], r9d
	jne	$LN60@SearchForT
	mov	rax, QWORD PTR ?tripcodeChunkArray@@3PEAIEA ; tripcodeChunkArray
	cmp	r9d, DWORD PTR [rax]
	jne	$LN164@SearchForT
	lea	rcx, QWORD PTR rawTripcodeArray$[rbp]
	lea	rdx, QWORD PTR tripcode$[rbp]
	add	rcx, rbx
	call	?ConvertRaw12CharTripcodeIntoDisplayFormat@@YAXPEAIPEAE@Z ; ConvertRaw12CharTripcodeIntoDisplayFormat
	lea	rdx, QWORD PTR key$[rbp]
	lea	rcx, QWORD PTR tripcode$[rbp]
	call	?ProcessPossibleMatch@@YAXPEAE0@Z	; ProcessPossibleMatch
	jmp	$LN164@SearchForT
$LN64@SearchForT:
	cmp	DWORD PTR ?searchMode@@3HA, 2		; searchMode
	jne	SHORT $LN62@SearchForT
	mov	esi, DWORD PTR rawTripcodeArray$[rbp+rbx+4]
	mov	r9d, DWORD PTR rawTripcodeArray$[rbp+rbx]
	movzx	eax, BYTE PTR rawTripcodeArray$[rbp+rbx+11]
	and	esi, 4194303				; 003fffffH
	shr	r9d, 2
	shl	esi, 8
	or	esi, eax
	mov	DWORD PTR generatedTripcodeChunkArray$4[rbp+4], esi
	jmp	$LN163@SearchForT
$LN62@SearchForT:
	mov	edx, DWORD PTR rawTripcodeArray$[rbp+rbx]
	mov	r8d, DWORD PTR rawTripcodeArray$[rbp+rbx+4]
	mov	esi, r8d
	mov	ecx, r8d
	mov	eax, edx
	shl	eax, 4
	shr	ecx, 22
	shr	esi, 28
	or	esi, eax
	mov	eax, edx
	mov	r9d, edx
	shl	eax, 10
	shr	r9d, 2
	and	esi, 1073741823				; 3fffffffH
	or	ecx, eax
	mov	eax, edx
	mov	DWORD PTR generatedTripcodeChunkArray$4[rbp], r9d
	and	ecx, 1073741823				; 3fffffffH
	and	eax, 16383				; 00003fffH
	mov	DWORD PTR generatedTripcodeChunkArray$4[rbp+4], esi
	mov	DWORD PTR generatedTripcodeChunkArray$4[rbp+8], ecx
	movzx	ecx, WORD PTR rawTripcodeArray$[rbp+rbx+6]
	shl	eax, 16
	or	ecx, eax
	mov	eax, edx
	shl	edx, 28
	mov	DWORD PTR generatedTripcodeChunkArray$4[rbp+12], ecx
	shl	eax, 22
	mov	ecx, r8d
	shr	ecx, 10
	or	ecx, eax
	mov	eax, r8d
	and	ecx, 1073741823				; 3fffffffH
	shr	eax, 4
	or	eax, edx
	mov	DWORD PTR generatedTripcodeChunkArray$4[rbp+16], ecx
	mov	ecx, DWORD PTR rawTripcodeArray$[rbp+rbx+8]
	and	eax, 1073741823				; 3fffffffH
	shr	ecx, 30
	mov	DWORD PTR generatedTripcodeChunkArray$4[rbp+20], eax
	lea	eax, DWORD PTR [r8*4]
	and	r8d, 4194303				; 003fffffH
	or	ecx, eax
	movzx	eax, BYTE PTR rawTripcodeArray$[rbp+rbx+11]
	shl	r8d, 8
	and	ecx, 1073741823				; 3fffffffH
	or	eax, r8d
	mov	DWORD PTR generatedTripcodeChunkArray$4[rbp+28], eax
	mov	DWORD PTR generatedTripcodeChunkArray$4[rbp+24], ecx
$LN60@SearchForT:
	mov	eax, DWORD PTR ?searchMode@@3HA		; searchMode
	cmp	eax, 1
	jbe	$LN165@SearchForT
	cmp	eax, 2
	jne	$LN46@SearchForT
$LN163@SearchForT:
	mov	eax, r9d
	shr	rax, 18
	cmp	BYTE PTR ?smallChunkBitmap@@3PAEA[rax+r12], r14b
	jne	SHORT $LN166@SearchForT
	mov	r8d, DWORD PTR ?numTripcodeChunk@@3IA	; numTripcodeChunk
	xor	r10d, r10d
	dec	r8d
	js	SHORT $LN166@SearchForT
	npad	11
$LL44@SearchForT:
	mov	rax, QWORD PTR ?tripcodeChunkArray@@3PEAIEA ; tripcodeChunkArray
	lea	edx, DWORD PTR [r8+r10]
	sar	edx, 1
	movsxd	rcx, edx
	mov	r11d, DWORD PTR [rax+rcx*4]
	cmp	r9d, r11d
	jbe	SHORT $LN193@SearchForT
	lea	r10d, DWORD PTR [rdx+1]
	jmp	SHORT $LN39@SearchForT
$LN193@SearchForT:
	jae	SHORT $LN40@SearchForT
	lea	r8d, DWORD PTR [rdx-1]
$LN39@SearchForT:
	cmp	r10d, r8d
	jle	SHORT $LL44@SearchForT
$LN166@SearchForT:
	mov	eax, esi
	shr	rax, 18
	cmp	BYTE PTR ?smallChunkBitmap@@3PAEA[rax+r12], r14b
	jne	$LN164@SearchForT
	mov	r8d, DWORD PTR ?numTripcodeChunk@@3IA	; numTripcodeChunk
	xor	r9d, r9d
	dec	r8d
	js	$LN164@SearchForT
	npad	15
$LL37@SearchForT:
	mov	rcx, QWORD PTR ?tripcodeChunkArray@@3PEAIEA ; tripcodeChunkArray
	lea	eax, DWORD PTR [r8+r9]
	sar	eax, 1
	movsxd	rdx, eax
	mov	r10d, DWORD PTR [rcx+rdx*4]
	cmp	esi, r10d
	jbe	SHORT $LN194@SearchForT
	lea	r9d, DWORD PTR [rax+1]
	jmp	SHORT $LN32@SearchForT
$LN40@SearchForT:
	lea	rcx, QWORD PTR rawTripcodeArray$[rbp]
	lea	rdx, QWORD PTR tripcode$[rbp]
	add	rcx, rbx
	call	?ConvertRaw12CharTripcodeIntoDisplayFormat@@YAXPEAIPEAE@Z ; ConvertRaw12CharTripcodeIntoDisplayFormat
	lea	rdx, QWORD PTR key$[rbp]
	lea	rcx, QWORD PTR tripcode$[rbp]
	call	?ProcessPossibleMatch@@YAXPEAE0@Z	; ProcessPossibleMatch
	jmp	$LN68@SearchForT
$LN194@SearchForT:
	jae	SHORT $LN40@SearchForT
	lea	r8d, DWORD PTR [rax-1]
$LN32@SearchForT:
	cmp	r9d, r8d
	jle	SHORT $LL37@SearchForT

; 389  : 		break;
; 390  : 	}
; 391  : 
; 392  : 	__declspec(align(32)) struct {
; 393  : 		__m128i lower, upper; 
; 394  : 	} PW[80], W0Shifted[23], W0, ABC[3];
; 395  : 	unsigned char keyCharTable_FirstByte_local           [SIZE_KEY_CHAR_TABLE];
; 396  : 	unsigned char keyCharTable_SecondByteAndOneByte_local[SIZE_KEY_CHAR_TABLE];
; 397  : 
; 398  : 	for (int32_t i = 0; i < SIZE_KEY_CHAR_TABLE; ++i) {

	jmp	$LN164@SearchForT
$LN46@SearchForT:

; 449  : 				rawTripcodeArray[0][1] = ABC[1].lower.m128i_u32[0];
; 450  : 				rawTripcodeArray[0][2] = ABC[2].lower.m128i_u32[0];
; 451  : 
; 452  : 				rawTripcodeArray[1][0] = ABC[0].lower.m128i_u32[1];
; 453  : 				rawTripcodeArray[1][1] = ABC[1].lower.m128i_u32[1];
; 454  : 				rawTripcodeArray[1][2] = ABC[2].lower.m128i_u32[1];
; 455  : 
; 456  : 				rawTripcodeArray[2][0] = ABC[0].lower.m128i_u32[2];
; 457  : 				rawTripcodeArray[2][1] = ABC[1].lower.m128i_u32[2];
; 458  : 				rawTripcodeArray[2][2] = ABC[2].lower.m128i_u32[2];
; 459  : 
; 460  : 				rawTripcodeArray[3][0] = ABC[0].lower.m128i_u32[3];
; 461  : 				rawTripcodeArray[3][1] = ABC[1].lower.m128i_u32[3];
; 462  : 				rawTripcodeArray[3][2] = ABC[2].lower.m128i_u32[3];
; 463  : 
; 464  : 				rawTripcodeArray[4][0] = ABC[0].upper.m128i_u32[0];
; 465  : 				rawTripcodeArray[4][1] = ABC[1].upper.m128i_u32[0];
; 466  : 				rawTripcodeArray[4][2] = ABC[2].upper.m128i_u32[0];
; 467  : 
; 468  : 				rawTripcodeArray[5][0] = ABC[0].upper.m128i_u32[1];
; 469  : 				rawTripcodeArray[5][1] = ABC[1].upper.m128i_u32[1];
; 470  : 				rawTripcodeArray[5][2] = ABC[2].upper.m128i_u32[1];
; 471  : 
; 472  : 				rawTripcodeArray[6][0] = ABC[0].upper.m128i_u32[2];
; 473  : 				rawTripcodeArray[6][1] = ABC[1].upper.m128i_u32[2];
; 474  : 				rawTripcodeArray[6][2] = ABC[2].upper.m128i_u32[2];
; 475  : 
; 476  : 				rawTripcodeArray[7][0] = ABC[0].upper.m128i_u32[3];
; 477  : 				rawTripcodeArray[7][1] = ABC[1].upper.m128i_u32[3];
; 478  : 				rawTripcodeArray[7][2] = ABC[2].upper.m128i_u32[3];
; 479  : 
; 480  : 				numGeneratedTripcodes += 8;
; 481  : 			
; 482  : 				LOOK_FOR_POSSIBLE_MATCH(8)

	cmp	DWORD PTR ?searchMode@@3HA, 3		; searchMode
	je	SHORT $LN105@SearchForT
	xor	eax, eax
	jmp	SHORT $LN106@SearchForT
$LN105@SearchForT:
	mov	eax, DWORD PTR ?lenTripcode@@3HA	; lenTripcode
	add	eax, -5
$LN106@SearchForT:
	xor	edi, edi
	movsxd	r15, eax
	test	eax, eax
	js	$LN164@SearchForT
	npad	3
$LL30@SearchForT:
	test	r14d, r14d
	jne	$LN29@SearchForT
	mov	r10d, DWORD PTR generatedTripcodeChunkArray$4[rbp+rdi*4]
	mov	eax, r10d
	shr	rax, 18
	cmp	BYTE PTR ?smallChunkBitmap@@3PAEA[rax+r12], r14b
	jne	SHORT $LN29@SearchForT
	mov	r8d, DWORD PTR ?numTripcodeChunk@@3IA	; numTripcodeChunk
	xor	r9d, r9d
	dec	r8d
	js	SHORT $LN29@SearchForT
	npad	15
$LL26@SearchForT:
	mov	rax, QWORD PTR ?tripcodeChunkArray@@3PEAIEA ; tripcodeChunkArray
	lea	edx, DWORD PTR [r8+r9]
	sar	edx, 1
	movsxd	rcx, edx
	mov	r11d, DWORD PTR [rax+rcx*4]
	cmp	r10d, r11d
	jbe	SHORT $LN195@SearchForT
	lea	r9d, DWORD PTR [rdx+1]
	jmp	SHORT $LN21@SearchForT
$LN195@SearchForT:
	jae	SHORT $LN22@SearchForT
	lea	r8d, DWORD PTR [rdx-1]
$LN21@SearchForT:
	cmp	r9d, r8d
	jle	SHORT $LL26@SearchForT

; 389  : 		break;
; 390  : 	}
; 391  : 
; 392  : 	__declspec(align(32)) struct {
; 393  : 		__m128i lower, upper; 
; 394  : 	} PW[80], W0Shifted[23], W0, ABC[3];
; 395  : 	unsigned char keyCharTable_FirstByte_local           [SIZE_KEY_CHAR_TABLE];
; 396  : 	unsigned char keyCharTable_SecondByteAndOneByte_local[SIZE_KEY_CHAR_TABLE];
; 397  : 
; 398  : 	for (int32_t i = 0; i < SIZE_KEY_CHAR_TABLE; ++i) {

	jmp	SHORT $LN29@SearchForT
$LN22@SearchForT:

; 449  : 				rawTripcodeArray[0][1] = ABC[1].lower.m128i_u32[0];
; 450  : 				rawTripcodeArray[0][2] = ABC[2].lower.m128i_u32[0];
; 451  : 
; 452  : 				rawTripcodeArray[1][0] = ABC[0].lower.m128i_u32[1];
; 453  : 				rawTripcodeArray[1][1] = ABC[1].lower.m128i_u32[1];
; 454  : 				rawTripcodeArray[1][2] = ABC[2].lower.m128i_u32[1];
; 455  : 
; 456  : 				rawTripcodeArray[2][0] = ABC[0].lower.m128i_u32[2];
; 457  : 				rawTripcodeArray[2][1] = ABC[1].lower.m128i_u32[2];
; 458  : 				rawTripcodeArray[2][2] = ABC[2].lower.m128i_u32[2];
; 459  : 
; 460  : 				rawTripcodeArray[3][0] = ABC[0].lower.m128i_u32[3];
; 461  : 				rawTripcodeArray[3][1] = ABC[1].lower.m128i_u32[3];
; 462  : 				rawTripcodeArray[3][2] = ABC[2].lower.m128i_u32[3];
; 463  : 
; 464  : 				rawTripcodeArray[4][0] = ABC[0].upper.m128i_u32[0];
; 465  : 				rawTripcodeArray[4][1] = ABC[1].upper.m128i_u32[0];
; 466  : 				rawTripcodeArray[4][2] = ABC[2].upper.m128i_u32[0];
; 467  : 
; 468  : 				rawTripcodeArray[5][0] = ABC[0].upper.m128i_u32[1];
; 469  : 				rawTripcodeArray[5][1] = ABC[1].upper.m128i_u32[1];
; 470  : 				rawTripcodeArray[5][2] = ABC[2].upper.m128i_u32[1];
; 471  : 
; 472  : 				rawTripcodeArray[6][0] = ABC[0].upper.m128i_u32[2];
; 473  : 				rawTripcodeArray[6][1] = ABC[1].upper.m128i_u32[2];
; 474  : 				rawTripcodeArray[6][2] = ABC[2].upper.m128i_u32[2];
; 475  : 
; 476  : 				rawTripcodeArray[7][0] = ABC[0].upper.m128i_u32[3];
; 477  : 				rawTripcodeArray[7][1] = ABC[1].upper.m128i_u32[3];
; 478  : 				rawTripcodeArray[7][2] = ABC[2].upper.m128i_u32[3];
; 479  : 
; 480  : 				numGeneratedTripcodes += 8;
; 481  : 			
; 482  : 				LOOK_FOR_POSSIBLE_MATCH(8)

	lea	rcx, QWORD PTR rawTripcodeArray$[rbp]
	lea	rdx, QWORD PTR tripcode$[rbp]
	add	rcx, rbx
	call	?ConvertRaw12CharTripcodeIntoDisplayFormat@@YAXPEAIPEAE@Z ; ConvertRaw12CharTripcodeIntoDisplayFormat
	lea	rdx, QWORD PTR key$[rbp]
	lea	rcx, QWORD PTR tripcode$[rbp]
	call	?ProcessPossibleMatch@@YAXPEAE0@Z	; ProcessPossibleMatch
	mov	r14d, 1
$LN29@SearchForT:
	inc	rdi
	cmp	rdi, r15
	jle	$LL30@SearchForT
	test	r14d, r14d
	je	SHORT $LN164@SearchForT
	jmp	$LN68@SearchForT
$LN165@SearchForT:
	mov	eax, r9d
	shr	rax, 18
	cmp	BYTE PTR ?smallChunkBitmap@@3PAEA[rax+r12], r14b
	jne	SHORT $LN164@SearchForT
	mov	r8d, DWORD PTR ?numTripcodeChunk@@3IA	; numTripcodeChunk
	xor	r10d, r10d
	dec	r8d
	js	SHORT $LN164@SearchForT
	npad	2
$LL53@SearchForT:
	mov	rax, QWORD PTR ?tripcodeChunkArray@@3PEAIEA ; tripcodeChunkArray
	lea	edx, DWORD PTR [r8+r10]
	sar	edx, 1
	movsxd	rcx, edx
	mov	r11d, DWORD PTR [rax+rcx*4]
	cmp	r9d, r11d
	jbe	SHORT $LN196@SearchForT
	lea	r10d, DWORD PTR [rdx+1]
	jmp	SHORT $LN48@SearchForT
$LN196@SearchForT:
	jae	$LN40@SearchForT
	lea	r8d, DWORD PTR [rdx-1]
$LN48@SearchForT:
	cmp	r10d, r8d
	jle	SHORT $LL53@SearchForT
$LN164@SearchForT:
	cmp	DWORD PTR ?searchForSpecialPatternsOnCPU@@3HA, 0 ; searchForSpecialPatternsOnCPU
	je	$LN68@SearchForT
	lea	rcx, QWORD PTR rawTripcodeArray$[rbp]
	lea	rdx, QWORD PTR tripcode$[rbp]
	add	rcx, rbx
	call	?ConvertRaw12CharTripcodeIntoDisplayFormat@@YAXPEAIPEAE@Z ; ConvertRaw12CharTripcodeIntoDisplayFormat
	cmp	DWORD PTR ?options@@3UOptions@@A+60, 0
	movzx	r13d, BYTE PTR tripcode$[rbp+11]
	movzx	ebx, BYTE PTR tripcode$[rbp+10]
	movzx	r12d, BYTE PTR tripcode$[rbp+9]
	movzx	r11d, BYTE PTR tripcode$[rbp+8]
	movzx	r15d, BYTE PTR tripcode$[rbp+7]
	movzx	r10d, BYTE PTR tripcode$[rbp+6]
	movzx	r14d, BYTE PTR tripcode$[rbp+5]
	movzx	r9d, BYTE PTR tripcode$[rbp+4]
	movzx	edi, BYTE PTR tripcode$[rbp+3]
	movzx	r8d, BYTE PTR tripcode$[rbp+2]
	movzx	ecx, BYTE PTR tripcode$[rbp+1]
	movzx	edx, BYTE PTR tripcode$[rbp]
	je	SHORT $LN19@SearchForT
	cmp	dl, r13b
	jne	SHORT $LN19@SearchForT
	cmp	cl, bl
	jne	SHORT $LN19@SearchForT
	cmp	r8b, r12b
	jne	SHORT $LN19@SearchForT
	cmp	dil, r11b
	jne	SHORT $LN19@SearchForT
	cmp	r9b, r15b
	jne	SHORT $LN19@SearchForT
	cmp	r14b, r10b
	je	$LN197@SearchForT
$LN19@SearchForT:
	cmp	DWORD PTR ?options@@3UOptions@@A+72, 0
	je	$LN17@SearchForT
	lea	r10, OFFSET FLAT:__ImageBase
	movzx	eax, dl
	cmp	BYTE PTR ?charTableForKagami@@3PAEA[rax+r10], r13b
	movzx	r10d, BYTE PTR tripcode$[rbp+6]
	jne	$LN17@SearchForT
	lea	r14, OFFSET FLAT:__ImageBase
	movzx	eax, cl
	cmp	BYTE PTR ?charTableForKagami@@3PAEA[rax+r14], bl
	movzx	r14d, BYTE PTR tripcode$[rbp+5]
	jne	SHORT $LN17@SearchForT
	lea	rdx, OFFSET FLAT:__ImageBase
	movzx	eax, r8b
	cmp	BYTE PTR ?charTableForKagami@@3PAEA[rax+rdx], r12b
	movzx	edx, BYTE PTR tripcode$[rbp]
	jne	SHORT $LN17@SearchForT
	lea	r15, OFFSET FLAT:__ImageBase
	movzx	eax, dil
	cmp	BYTE PTR ?charTableForKagami@@3PAEA[rax+r15], r11b
	movzx	r15d, BYTE PTR tripcode$[rbp+7]
	jne	SHORT $LN17@SearchForT
	lea	r13, OFFSET FLAT:__ImageBase
	movzx	eax, r9b
	cmp	BYTE PTR ?charTableForKagami@@3PAEA[rax+r13], r15b
	movzx	r13d, BYTE PTR tripcode$[rbp+11]
	jne	SHORT $LN17@SearchForT
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	eax, r14b
	cmp	BYTE PTR ?charTableForKagami@@3PAEA[rax+rcx], r10b
	movzx	ecx, BYTE PTR tripcode$[rbp+1]
	je	$LN197@SearchForT
$LN17@SearchForT:
	cmp	DWORD PTR ?options@@3UOptions@@A+64, 0
	je	SHORT $LN15@SearchForT
	cmp	dl, r10b
	jne	SHORT $LN15@SearchForT
	cmp	cl, r15b
	jne	SHORT $LN15@SearchForT
	cmp	r8b, r11b
	jne	SHORT $LN15@SearchForT
	cmp	dil, r12b
	jne	SHORT $LN15@SearchForT
	cmp	r9b, bl
	jne	SHORT $LN15@SearchForT
	cmp	r14b, r13b
	je	$LN197@SearchForT
$LN15@SearchForT:
	cmp	DWORD PTR ?options@@3UOptions@@A+68, 0
	je	SHORT $LN13@SearchForT
	cmp	dl, cl
	jne	SHORT $LN13@SearchForT
	cmp	r8b, dil
	jne	SHORT $LN13@SearchForT
	cmp	r9b, r14b
	jne	SHORT $LN13@SearchForT
	cmp	r10b, r15b
	jne	SHORT $LN13@SearchForT
	cmp	r11b, r12b
	jne	SHORT $LN13@SearchForT
	cmp	bl, r13b
	je	$LN197@SearchForT
$LN13@SearchForT:
	cmp	DWORD PTR ?options@@3UOptions@@A+52, 0
	je	SHORT $LN5@SearchForT
	cmp	dl, 46					; 0000002eH
	jne	SHORT $LN11@SearchForT
	cmp	r8b, dl
	jne	SHORT $LN11@SearchForT
	cmp	r9b, dl
	jne	SHORT $LN11@SearchForT
	cmp	r10b, dl
	jne	SHORT $LN11@SearchForT
	cmp	r11b, dl
	jne	SHORT $LN11@SearchForT
	cmp	bl, dl
	je	$LN197@SearchForT
$LN11@SearchForT:
	cmp	cl, 46					; 0000002eH
	jne	SHORT $LN9@SearchForT
	cmp	dil, cl
	jne	SHORT $LN9@SearchForT
	cmp	r14b, cl
	jne	SHORT $LN9@SearchForT
	cmp	r15b, cl
	jne	SHORT $LN9@SearchForT
	cmp	r12b, cl
	jne	SHORT $LN9@SearchForT
	cmp	r13b, cl
	je	SHORT $LN197@SearchForT
$LN9@SearchForT:
	cmp	dl, 47					; 0000002fH
	jne	SHORT $LN7@SearchForT
	cmp	r8b, dl
	jne	SHORT $LN7@SearchForT
	cmp	r9b, dl
	jne	SHORT $LN7@SearchForT
	cmp	r10b, dl
	jne	SHORT $LN7@SearchForT
	cmp	r11b, dl
	jne	SHORT $LN7@SearchForT
	cmp	bl, dl
	je	SHORT $LN197@SearchForT
$LN7@SearchForT:
	cmp	cl, 47					; 0000002fH
	jne	SHORT $LN5@SearchForT
	cmp	dil, cl
	jne	SHORT $LN5@SearchForT
	cmp	r14b, cl
	jne	SHORT $LN5@SearchForT
	cmp	r15b, cl
	jne	SHORT $LN5@SearchForT
	cmp	r12b, cl
	jne	SHORT $LN5@SearchForT
	cmp	r13b, cl
	je	SHORT $LN197@SearchForT
$LN5@SearchForT:
	cmp	DWORD PTR ?options@@3UOptions@@A+56, 0
	je	SHORT $LN188@SearchForT
	cmp	r8b, dl
	jne	SHORT $LN3@SearchForT
	cmp	r9b, dl
	jne	SHORT $LN3@SearchForT
	cmp	r10b, dl
	jne	SHORT $LN3@SearchForT
	cmp	r11b, dl
	jne	SHORT $LN3@SearchForT
	cmp	bl, dl
	je	SHORT $LN197@SearchForT
$LN3@SearchForT:
	cmp	dil, cl
	jne	SHORT $LN188@SearchForT
	cmp	r14b, cl
	jne	SHORT $LN188@SearchForT
	cmp	r15b, cl
	jne	SHORT $LN188@SearchForT
	cmp	r12b, cl
	jne	SHORT $LN188@SearchForT
	cmp	r13b, cl
	jne	SHORT $LN188@SearchForT
$LN197@SearchForT:
	lea	rdx, QWORD PTR key$[rbp]
	lea	rcx, QWORD PTR tripcode$[rbp]
	call	?ProcessMatch@@YAXPEAE0@Z		; ProcessMatch
$LN188@SearchForT:
	lea	r12, OFFSET FLAT:__ImageBase
$LN68@SearchForT:
	mov	ecx, DWORD PTR wordIndex$1$[rbp]
	inc	ecx
	mov	DWORD PTR wordIndex$1$[rbp], ecx
	cmp	ecx, 8
	jl	$LL69@SearchForT

; 428  : 
; 429  : 			for (int32_t indexKey3 = 0; indexKey3 <= CPU_SHA1_MAX_INDEX_FOR_KEYS; ++indexKey3) {

	mov	rax, QWORD PTR $T3[rbp]
	mov	edi, DWORD PTR numGeneratedTripcodes$1$[rbp]
	inc	rax
	mov	QWORD PTR $T3[rbp], rax
	cmp	rax, 63					; 0000003fH
	jg	SHORT $LN181@SearchForT
	movzx	ecx, BYTE PTR key$[rbp+2]
	jmp	$LL72@SearchForT
$LN181@SearchForT:

; 425  : 
; 426  : 		for (int32_t indexKey2 = 0; indexKey2 <= CPU_SHA1_MAX_INDEX_FOR_KEYS; ++indexKey2) {

	mov	rax, QWORD PTR $T1[rbp]
	inc	rax
	mov	QWORD PTR $T1[rbp], rax
	cmp	rax, 63					; 0000003fH
	jle	$LL75@SearchForT

; 422  : 
; 423  : 	for (int32_t indexKey1 = 0; indexKey1 <= CPU_SHA1_MAX_INDEX_FOR_KEYS; ++indexKey1) {

	mov	rax, QWORD PTR $T2[rbp]
	inc	rax
	mov	QWORD PTR $T2[rbp], rax
	cmp	rax, 63					; 0000003fH
	jle	$LL78@SearchForT

; 483  : 			}
; 484  : 		}
; 485  : 	}
; 486  : 
; 487  : 	return numGeneratedTripcodes;

	mov	eax, edi

; 488  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rsp
	call	__security_check_cookie
	lea	r11, QWORD PTR [rsp+4720]
	mov	rbx, QWORD PTR [r11+48]
	mov	rsi, QWORD PTR [r11+56]
	mov	rdi, QWORD PTR [r11+64]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rbp
	ret	0
$LN198@SearchForT:

; 377  : 	key     [lenTripcodeKey] = '\0';

	call	__report_rangecheckfailure
	int	3
$LN97@SearchForT:

; 372  : 	unsigned char  tripcode[MAX_LEN_TRIPCODE + 1], key[MAX_LEN_TRIPCODE_KEY + 1];
; 373  : 	uint32_t   numGeneratedTripcodes = 0;
; 374  : 	uint32_t   rawTripcodeArray[8][3];
; 375  : 
; 376  : 	tripcode[lenTripcode]    = '\0';

	call	__report_rangecheckfailure
	int	3
$LN189@SearchForT:
?SearchForTripcodesWithOptimization_AVX2@@YAIXZ ENDP	; SearchForTripcodesWithOptimization_AVX2
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\github\merikens-tripcode-engine\sourcefiles\cpu12.cpp
;	COMDAT ?run_cpuid@@YAXIIPEAH@Z
_TEXT	SEGMENT
eax$ = 8
ecx$dead$ = 16
abcd$ = 24
?run_cpuid@@YAXIIPEAH@Z PROC				; run_cpuid, COMDAT

; 588  : {

$LN4:
	mov	QWORD PTR [rsp+8], rbx

; 589  :     __cpuidex(abcd, eax, ecx);

	mov	eax, ecx
	xor	ecx, ecx
	cpuid
	mov	DWORD PTR [r8], eax
	mov	DWORD PTR [r8+4], ebx

; 590  : }     

	mov	rbx, QWORD PTR [rsp+8]
	mov	DWORD PTR [r8+8], ecx
	mov	DWORD PTR [r8+12], edx
	ret	0
?run_cpuid@@YAXIIPEAH@Z ENDP				; run_cpuid
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\github\merikens-tripcode-engine\sourcefiles\cpu12.cpp
;	COMDAT ?check_xcr0_ymm@@YAHXZ
_TEXT	SEGMENT
?check_xcr0_ymm@@YAHXZ PROC				; check_xcr0_ymm, COMDAT

; 593  : {

$LN4:
	sub	rsp, 40					; 00000028H

; 594  :     uint32_t xcr0;
; 595  :     xcr0 = (uint32_t)_myxgetbv(0);

	xor	ecx, ecx
	call	_myxgetbv

; 596  :     return ((xcr0 & 6) == 6); /* checking if xmm and ymm state are enabled in XCR0 */

	xor	ecx, ecx
	and	eax, 6
	cmp	al, 6
	sete	cl
	mov	eax, ecx

; 597  : }

	add	rsp, 40					; 00000028H
	ret	0
?check_xcr0_ymm@@YAHXZ ENDP				; check_xcr0_ymm
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\github\merikens-tripcode-engine\sourcefiles\cpu12.cpp
;	COMDAT ?check_4th_gen_intel_core_features@@YAHXZ
_TEXT	SEGMENT
abcd$ = 32
__$ArrayPad$ = 48
?check_4th_gen_intel_core_features@@YAHXZ PROC		; check_4th_gen_intel_core_features, COMDAT

; 600  : {

$LN17:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 589  :     __cpuidex(abcd, eax, ecx);

	xor	ecx, ecx
	mov	eax, 1
	cpuid

; 601  :     int32_t abcd[4];
; 602  :     uint32_t fma_movbe_osxsave_mask = ((1 << 12) | (1 << 22) | (1 << 27));
; 603  :     uint32_t avx2_bmi12_mask = (1 << 5) | (1 << 3) | (1 << 8);
; 604  :  
; 605  :     /* CPUID.(EAX=01H, ECX=0H):ECX.FMA[bit 12]==1   && 
; 606  :        CPUID.(EAX=01H, ECX=0H):ECX.MOVBE[bit 22]==1 && 
; 607  :        CPUID.(EAX=01H, ECX=0H):ECX.OSXSAVE[bit 27]==1 */
; 608  :     run_cpuid( 1, 0, abcd );
; 609  :     if ( (abcd[2] & fma_movbe_osxsave_mask) != fma_movbe_osxsave_mask ) 

	and	ecx, 138416128				; 08401000H

; 589  :     __cpuidex(abcd, eax, ecx);

	mov	DWORD PTR abcd$[rsp], eax
	mov	DWORD PTR abcd$[rsp+4], ebx
	mov	DWORD PTR abcd$[rsp+12], edx

; 601  :     int32_t abcd[4];
; 602  :     uint32_t fma_movbe_osxsave_mask = ((1 << 12) | (1 << 22) | (1 << 27));
; 603  :     uint32_t avx2_bmi12_mask = (1 << 5) | (1 << 3) | (1 << 8);
; 604  :  
; 605  :     /* CPUID.(EAX=01H, ECX=0H):ECX.FMA[bit 12]==1   && 
; 606  :        CPUID.(EAX=01H, ECX=0H):ECX.MOVBE[bit 22]==1 && 
; 607  :        CPUID.(EAX=01H, ECX=0H):ECX.OSXSAVE[bit 27]==1 */
; 608  :     run_cpuid( 1, 0, abcd );
; 609  :     if ( (abcd[2] & fma_movbe_osxsave_mask) != fma_movbe_osxsave_mask ) 

	cmp	ecx, 138416128				; 08401000H
	je	SHORT $LN4@check_4th_
$LN15@check_4th_:

; 610  :         return 0;

	xor	eax, eax

; 625  :         return 0;
; 626  :  
; 627  :     return 1;
; 628  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
$LN4@check_4th_:

; 590  : }     
; 591  : 
; 592  : int32_t check_xcr0_ymm() 
; 593  : {
; 594  :     uint32_t xcr0;
; 595  :     xcr0 = (uint32_t)_myxgetbv(0);

	xor	ecx, ecx
	call	_myxgetbv

; 596  :     return ((xcr0 & 6) == 6); /* checking if xmm and ymm state are enabled in XCR0 */

	and	eax, 6
	cmp	al, 6

; 611  :  
; 612  :     if ( ! check_xcr0_ymm() )

	jne	SHORT $LN15@check_4th_

; 589  :     __cpuidex(abcd, eax, ecx);

	xor	ecx, ecx
	mov	eax, 7
	cpuid

; 613  :         return 0;
; 614  :  
; 615  :     /*  CPUID.(EAX=07H, ECX=0H):EBX.AVX2[bit 5]==1  &&
; 616  :         CPUID.(EAX=07H, ECX=0H):EBX.BMI1[bit 3]==1  &&
; 617  :         CPUID.(EAX=07H, ECX=0H):EBX.BMI2[bit 8]==1  */
; 618  :     run_cpuid( 7, 0, abcd );
; 619  :     if ( (abcd[1] & avx2_bmi12_mask) != avx2_bmi12_mask ) 

	and	ebx, 296				; 00000128H

; 589  :     __cpuidex(abcd, eax, ecx);

	mov	DWORD PTR abcd$[rsp], eax
	mov	DWORD PTR abcd$[rsp+8], ecx
	mov	DWORD PTR abcd$[rsp+12], edx

; 613  :         return 0;
; 614  :  
; 615  :     /*  CPUID.(EAX=07H, ECX=0H):EBX.AVX2[bit 5]==1  &&
; 616  :         CPUID.(EAX=07H, ECX=0H):EBX.BMI1[bit 3]==1  &&
; 617  :         CPUID.(EAX=07H, ECX=0H):EBX.BMI2[bit 8]==1  */
; 618  :     run_cpuid( 7, 0, abcd );
; 619  :     if ( (abcd[1] & avx2_bmi12_mask) != avx2_bmi12_mask ) 

	cmp	ebx, 296				; 00000128H
	jne	SHORT $LN15@check_4th_

; 589  :     __cpuidex(abcd, eax, ecx);

	xor	ecx, ecx
	mov	eax, -2147483647			; ffffffff80000001H
	cpuid
	mov	DWORD PTR abcd$[rsp], eax

; 620  :         return 0;
; 621  :  
; 622  :     /* CPUID.(EAX=80000001H):ECX.LZCNT[bit 5]==1 */
; 623  :     run_cpuid( 0x80000001, 0, abcd );
; 624  :     if ( (abcd[2] & (1 << 5)) == 0)

	movsx	eax, cl

; 589  :     __cpuidex(abcd, eax, ecx);

	mov	DWORD PTR abcd$[rsp+4], ebx

; 620  :         return 0;
; 621  :  
; 622  :     /* CPUID.(EAX=80000001H):ECX.LZCNT[bit 5]==1 */
; 623  :     run_cpuid( 0x80000001, 0, abcd );
; 624  :     if ( (abcd[2] & (1 << 5)) == 0)

	and	eax, 32					; 00000020H

; 589  :     __cpuidex(abcd, eax, ecx);

	mov	DWORD PTR abcd$[rsp+8], ecx
	mov	DWORD PTR abcd$[rsp+12], edx

; 620  :         return 0;
; 621  :  
; 622  :     /* CPUID.(EAX=80000001H):ECX.LZCNT[bit 5]==1 */
; 623  :     run_cpuid( 0x80000001, 0, abcd );
; 624  :     if ( (abcd[2] & (1 << 5)) == 0)

	shr	eax, 5

; 625  :         return 0;
; 626  :  
; 627  :     return 1;
; 628  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
?check_4th_gen_intel_core_features@@YAHXZ ENDP		; check_4th_gen_intel_core_features
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\github\merikens-tripcode-engine\sourcefiles\cpu12.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\thread
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h
; File z:\github\merikens-tripcode-engine\sourcefiles\main.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h
; File z:\github\merikens-tripcode-engine\sourcefiles\cpu12.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\thread
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h
; File z:\github\merikens-tripcode-engine\sourcefiles\main.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h
; File z:\github\merikens-tripcode-engine\sourcefiles\cpu12.cpp
;	COMDAT ?Thread_SearchForSHA1TripcodesOnCPU@@YAXXZ
_TEXT	SEGMENT
?Thread_SearchForSHA1TripcodesOnCPU@@YAXXZ PROC		; Thread_SearchForSHA1TripcodesOnCPU, COMDAT

; 641  : {

$LN124:
	mov	QWORD PTR [rsp+16], rbx
	push	rsi
	sub	rsp, 32					; 00000020H

; 642  : 	BOOL useAVX2 = options.isAVX2Enabled && IsAVX2Supported();

	xor	esi, esi
	cmp	DWORD PTR ?options@@3UOptions@@A+92, esi
	je	SHORT $LN7@Thread_Sea

; 634  :     if (the_4th_gen_features_available < 0 )

	mov	eax, DWORD PTR ?the_4th_gen_features_available@?1??IsAVX2Supported@@YAHXZ@4HA
	test	eax, eax
	jns	SHORT $LN121@Thread_Sea

; 635  :         the_4th_gen_features_available = check_4th_gen_intel_core_features();

	call	?check_4th_gen_intel_core_features@@YAHXZ ; check_4th_gen_intel_core_features
	mov	DWORD PTR ?the_4th_gen_features_available@?1??IsAVX2Supported@@YAHXZ@4HA, eax

; 642  : 	BOOL useAVX2 = options.isAVX2Enabled && IsAVX2Supported();

	test	eax, eax
$LN121@Thread_Sea:
	mov	ebx, 1
	jne	SHORT $LN8@Thread_Sea
$LN7@Thread_Sea:
	mov	ebx, esi
$LN8@Thread_Sea:

; 644  : 	while (!GetTerminationState()) {

	call	?GetTerminationState@@YAHXZ		; GetTerminationState
	test	eax, eax
	jne	$LN3@Thread_Sea

; 647  : 
; 648  : 		uint32_t numGeneratedTripcodes = (useAVX2) ? SearchForTripcodesWithOptimization_AVX2()
; 649  : 			                                           : SearchForTripcodesWithOptimization();

	mov	QWORD PTR [rsp+48], rdi
	movsxd	rdi, ebx
	npad	7
$LL17@Thread_Sea:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h

; 2385 : 			return (_INTRIN_ACQUIRE(_interlockedbittestandset)(_Flag, 0));

	lock_bts DWORD PTR ?current_state_spinlock@@3Vspinlock@@A, 0 ; current_state_spinlock
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h

; 149  : 		while (flag.test_and_set(std::memory_order_acquire))

	jae	SHORT $LN16@Thread_Sea
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\thread

; 123  : 	if (::Concurrency::details::_CurrentScheduler::_Id() != -1)

	call	?_Id@_CurrentScheduler@details@Concurrency@@SAIXZ ; Concurrency::details::_CurrentScheduler::_Id
	cmp	eax, -1					; ffffffffH
	je	SHORT $LN31@Thread_Sea

; 124  : 		{	// yield, then quit
; 125  : 		::Concurrency::details::_Context::_Yield();

	call	?_Yield@_Context@details@Concurrency@@SAXXZ ; Concurrency::details::_Context::_Yield

; 126  : 		return;

	jmp	SHORT $LL17@Thread_Sea
$LN31@Thread_Sea:

; 127  : 		}
; 128  : 	_Thrd_yield();

	call	_Thrd_yield
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h

; 150  : 			std::this_thread::yield();

	jmp	SHORT $LL17@Thread_Sea
$LN16@Thread_Sea:
; File z:\github\merikens-tripcode-engine\sourcefiles\main.cpp

; 1633 : 	ret = isSearchPaused;

	mov	eax, DWORD PTR ?isSearchPaused@@3HA	; isSearchPaused
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h

; 1363 : 	*_Tgt = _Value;

	mov	DWORD PTR ?current_state_spinlock@@3Vspinlock@@A, esi ; current_state_spinlock
; File z:\github\merikens-tripcode-engine\sourcefiles\cpu12.cpp

; 645  : 		while (GetPauseState() && !GetTerminationState())

	test	eax, eax
	je	SHORT $LN1@Thread_Sea
	call	?GetTerminationState@@YAHXZ		; GetTerminationState
	test	eax, eax
	jne	SHORT $LN1@Thread_Sea

; 646  : 			Sleep(PAUSE_INTERVAL);

	lea	ecx, QWORD PTR [rax+100]
	call	QWORD PTR __imp_Sleep
	jmp	SHORT $LL17@Thread_Sea
$LN1@Thread_Sea:

; 647  : 
; 648  : 		uint32_t numGeneratedTripcodes = (useAVX2) ? SearchForTripcodesWithOptimization_AVX2()
; 649  : 			                                           : SearchForTripcodesWithOptimization();

	test	rdi, rdi
	je	SHORT $LN9@Thread_Sea
	call	?SearchForTripcodesWithOptimization_AVX2@@YAIXZ ; SearchForTripcodesWithOptimization_AVX2
	jmp	SHORT $LN122@Thread_Sea
$LN9@Thread_Sea:
	call	?SearchForTripcodesWithOptimization@@YAIXZ ; SearchForTripcodesWithOptimization
$LN122@Thread_Sea:
	mov	ebx, eax
	npad	6
$LL62@Thread_Sea:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h

; 2385 : 			return (_INTRIN_ACQUIRE(_interlockedbittestandset)(_Flag, 0));

	lock_bts DWORD PTR ?num_generated_tripcodes_spinlock@@3Vspinlock@@A, 0 ; num_generated_tripcodes_spinlock
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h

; 149  : 		while (flag.test_and_set(std::memory_order_acquire))

	jae	SHORT $LN61@Thread_Sea
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\thread

; 123  : 	if (::Concurrency::details::_CurrentScheduler::_Id() != -1)

	call	?_Id@_CurrentScheduler@details@Concurrency@@SAIXZ ; Concurrency::details::_CurrentScheduler::_Id
	cmp	eax, -1					; ffffffffH
	je	SHORT $LN76@Thread_Sea

; 124  : 		{	// yield, then quit
; 125  : 		::Concurrency::details::_Context::_Yield();

	call	?_Yield@_Context@details@Concurrency@@SAXXZ ; Concurrency::details::_Context::_Yield

; 126  : 		return;

	jmp	SHORT $LL62@Thread_Sea
$LN76@Thread_Sea:

; 127  : 		}
; 128  : 	_Thrd_yield();

	call	_Thrd_yield
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h

; 150  : 			std::this_thread::yield();

	jmp	SHORT $LL62@Thread_Sea
$LN61@Thread_Sea:
; File z:\github\merikens-tripcode-engine\sourcefiles\main.cpp

; 1575 : 	numGeneratedTripcodes_CPU += num;

	mov	ecx, DWORD PTR ?numGeneratedTripcodes_CPU@@3IA ; numGeneratedTripcodes_CPU
	add	ecx, ebx
	mov	DWORD PTR ?numGeneratedTripcodes_CPU@@3IA, ecx ; numGeneratedTripcodes_CPU

; 1576 : 	if (numGeneratedTripcodes_CPU >= 1000000) {

	cmp	ecx, 1000000				; 000f4240H
	jb	SHORT $LN58@Thread_Sea

; 1577 : 		numGeneratedTripcodesByCPUInMillions += numGeneratedTripcodes_CPU / 1000000;

	mov	eax, 1125899907				; 431bde83H
	mul	ecx
	shr	edx, 18
	add	DWORD PTR ?numGeneratedTripcodesByCPUInMillions@@3IA, edx ; numGeneratedTripcodesByCPUInMillions

; 1578 : 		numGeneratedTripcodes_CPU           %= 1000000;

	imul	eax, edx, -1000000			; fff0bdc0H
	add	ecx, eax
	mov	DWORD PTR ?numGeneratedTripcodes_CPU@@3IA, ecx ; numGeneratedTripcodes_CPU
$LN58@Thread_Sea:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h

; 1363 : 	*_Tgt = _Value;

	mov	DWORD PTR ?num_generated_tripcodes_spinlock@@3Vspinlock@@A, esi ; num_generated_tripcodes_spinlock
; File z:\github\merikens-tripcode-engine\sourcefiles\cpu12.cpp

; 644  : 	while (!GetTerminationState()) {

	call	?GetTerminationState@@YAHXZ		; GetTerminationState
	test	eax, eax
	je	$LL17@Thread_Sea
	mov	rdi, QWORD PTR [rsp+48]
$LN3@Thread_Sea:

; 650  : 		AddToNumGeneratedTripcodesByCPU(numGeneratedTripcodes);
; 651  : 	}
; 652  : }

	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rsi
	ret	0
?Thread_SearchForSHA1TripcodesOnCPU@@YAXXZ ENDP		; Thread_SearchForSHA1TripcodesOnCPU
_TEXT	ENDS
END
