; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

include listing.inc

INCLUDELIB OLDNAMES

DES_charToIndexTable DB 07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
	DB	07fH
DES_indexToCharTable DB 02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
keySchedule DB	0cH
	DB	02eH
	DB	021H
	DB	034H
	DB	030H
	DB	014H
	DB	022H
	DB	037H
	DB	05H
	DB	0dH
	DB	012H
	DB	028H
	DB	04H
	DB	020H
	DB	01aH
	DB	01bH
	DB	026H
	DB	036H
	DB	035H
	DB	06H
	DB	01fH
	DB	019H
	DB	013H
	DB	029H
	DB	0fH
	DB	018H
	DB	01cH
	DB	02bH
	DB	01eH
	DB	03H
	DB	023H
	DB	016H
	DB	02H
	DB	02cH
	DB	0eH
	DB	017H
	DB	033H
	DB	010H
	DB	01dH
	DB	031H
	DB	07H
	DB	011H
	DB	025H
	DB	08H
	DB	09H
	DB	032H
	DB	02aH
	DB	015H
	DB	05H
	DB	027H
	DB	01aH
	DB	02dH
	DB	029H
	DB	0dH
	DB	01bH
	DB	030H
	DB	035H
	DB	06H
	DB	0bH
	DB	021H
	DB	034H
	DB	019H
	DB	013H
	DB	014H
	DB	01fH
	DB	02fH
	DB	02eH
	DB	036H
	DB	037H
	DB	012H
	DB	0cH
	DB	022H
	DB	08H
	DB	011H
	DB	015H
	DB	024H
	DB	017H
	DB	031H
	DB	01cH
	DB	0fH
	DB	018H
	DB	025H
	DB	07H
	DB	010H
	DB	02cH
	DB	09H
	DB	016H
	DB	02aH
	DB	00H
	DB	0aH
	DB	01eH
	DB	01H
	DB	02H
	DB	02bH
	DB	023H
	DB	0eH
	DB	02eH
	DB	019H
	DB	0cH
	DB	01fH
	DB	01bH
	DB	036H
	DB	0dH
	DB	022H
	DB	027H
	DB	02fH
	DB	034H
	DB	013H
	DB	026H
	DB	0bH
	DB	05H
	DB	06H
	DB	030H
	DB	021H
	DB	020H
	DB	028H
	DB	029H
	DB	04H
	DB	035H
	DB	014H
	DB	033H
	DB	03H
	DB	07H
	DB	016H
	DB	09H
	DB	023H
	DB	0eH
	DB	01H
	DB	0aH
	DB	017H
	DB	032H
	DB	02H
	DB	01eH
	DB	018H
	DB	08H
	DB	01cH
	DB	02bH
	DB	031H
	DB	010H
	DB	02cH
	DB	011H
	DB	01dH
	DB	015H
	DB	00H
	DB	020H
	DB	0bH
	DB	035H
	DB	030H
	DB	0dH
	DB	028H
	DB	036H
	DB	014H
	DB	019H
	DB	021H
	DB	026H
	DB	05H
	DB	037H
	DB	034H
	DB	02eH
	DB	02fH
	DB	022H
	DB	013H
	DB	012H
	DB	01aH
	DB	01bH
	DB	02dH
	DB	027H
	DB	06H
	DB	025H
	DB	02aH
	DB	032H
	DB	08H
	DB	018H
	DB	015H
	DB	00H
	DB	02cH
	DB	031H
	DB	09H
	DB	024H
	DB	011H
	DB	010H
	DB	0aH
	DB	033H
	DB	0eH
	DB	01dH
	DB	023H
	DB	02H
	DB	01eH
	DB	03H
	DB	0fH
	DB	07H
	DB	02bH
	DB	012H
	DB	034H
	DB	027H
	DB	022H
	DB	036H
	DB	01aH
	DB	028H
	DB	06H
	DB	0bH
	DB	013H
	DB	037H
	DB	02eH
	DB	029H
	DB	026H
	DB	020H
	DB	021H
	DB	014H
	DB	05H
	DB	04H
	DB	0cH
	DB	0dH
	DB	01fH
	DB	019H
	DB	02fH
	DB	017H
	DB	01cH
	DB	024H
	DB	033H
	DB	0aH
	DB	07H
	DB	02bH
	DB	01eH
	DB	023H
	DB	018H
	DB	016H
	DB	03H
	DB	02H
	DB	031H
	DB	025H
	DB	00H
	DB	0fH
	DB	015H
	DB	011H
	DB	010H
	DB	02aH
	DB	01H
	DB	032H
	DB	01dH
	DB	04H
	DB	026H
	DB	019H
	DB	014H
	DB	028H
	DB	0cH
	DB	01aH
	DB	02fH
	DB	034H
	DB	05H
	DB	029H
	DB	020H
	DB	01bH
	DB	037H
	DB	012H
	DB	013H
	DB	06H
	DB	02eH
	DB	02dH
	DB	035H
	DB	036H
	DB	030H
	DB	0bH
	DB	021H
	DB	09H
	DB	0eH
	DB	016H
	DB	025H
	DB	031H
	DB	032H
	DB	01dH
	DB	010H
	DB	015H
	DB	0aH
	DB	08H
	DB	02aH
	DB	011H
	DB	023H
	DB	017H
	DB	02bH
	DB	01H
	DB	07H
	DB	03H
	DB	02H
	DB	01cH
	DB	02cH
	DB	024H
	DB	0fH
	DB	02dH
	DB	037H
	DB	0bH
	DB	06H
	DB	01aH
	DB	035H
	DB	0cH
	DB	021H
	DB	026H
	DB	02eH
	DB	01bH
	DB	012H
	DB	0dH
	DB	029H
	DB	04H
	DB	05H
	DB	02fH
	DB	020H
	DB	01fH
	DB	027H
	DB	028H
	DB	022H
	DB	034H
	DB	013H
	DB	018H
	DB	00H
	DB	08H
	DB	017H
	DB	023H
	DB	024H
	DB	0fH
	DB	02H
	DB	07H
	DB	031H
	DB	033H
	DB	01cH
	DB	03H
	DB	015H
	DB	09H
	DB	01dH
	DB	02cH
	DB	032H
	DB	02aH
	DB	011H
	DB	0eH
	DB	01eH
	DB	016H
	DB	01H
	DB	01fH
	DB	029H
	DB	034H
	DB	02fH
	DB	0cH
	DB	027H
	DB	035H
	DB	013H
	DB	037H
	DB	020H
	DB	0dH
	DB	04H
	DB	036H
	DB	01bH
	DB	02dH
	DB	02eH
	DB	021H
	DB	012H
	DB	030H
	DB	019H
	DB	01aH
	DB	014H
	DB	026H
	DB	05H
	DB	0aH
	DB	02bH
	DB	033H
	DB	09H
	DB	015H
	DB	016H
	DB	01H
	DB	011H
	DB	032H
	DB	023H
	DB	025H
	DB	0eH
	DB	02aH
	DB	07H
	DB	018H
	DB	0fH
	DB	01eH
	DB	024H
	DB	01cH
	DB	03H
	DB	00H
	DB	010H
	DB	08H
	DB	02cH
	DB	037H
	DB	022H
	DB	02dH
	DB	028H
	DB	05H
	DB	020H
	DB	02eH
	DB	0cH
	DB	030H
	DB	019H
	DB	06H
	DB	034H
	DB	02fH
	DB	014H
	DB	026H
	DB	027H
	DB	01aH
	DB	0bH
	DB	029H
	DB	012H
	DB	013H
	DB	0dH
	DB	01fH
	DB	035H
	DB	03H
	DB	024H
	DB	02cH
	DB	02H
	DB	0eH
	DB	0fH
	DB	033H
	DB	0aH
	DB	02bH
	DB	01cH
	DB	01eH
	DB	07H
	DB	023H
	DB	00H
	DB	011H
	DB	08H
	DB	017H
	DB	01dH
	DB	015H
	DB	031H
	DB	032H
	DB	09H
	DB	01H
	DB	025H
	DB	029H
	DB	014H
	DB	01fH
	DB	01aH
	DB	02eH
	DB	012H
	DB	020H
	DB	035H
	DB	022H
	DB	0bH
	DB	02fH
	DB	026H
	DB	021H
	DB	06H
	DB	037H
	DB	019H
	DB	0cH
	DB	034H
	DB	01bH
	DB	04H
	DB	05H
	DB	036H
	DB	030H
	DB	027H
	DB	02aH
	DB	016H
	DB	01eH
	DB	011H
	DB	00H
	DB	01H
	DB	025H
	DB	031H
	DB	01dH
	DB	0eH
	DB	010H
	DB	032H
	DB	015H
	DB	02bH
	DB	03H
	DB	033H
	DB	09H
	DB	0fH
	DB	07H
	DB	023H
	DB	024H
	DB	018H
	DB	02cH
	DB	017H
	DB	01bH
	DB	06H
	DB	030H
	DB	0cH
	DB	020H
	DB	04H
	DB	012H
	DB	027H
	DB	014H
	DB	034H
	DB	021H
	DB	037H
	DB	013H
	DB	02fH
	DB	029H
	DB	0bH
	DB	035H
	DB	026H
	DB	0dH
	DB	02dH
	DB	02eH
	DB	028H
	DB	022H
	DB	019H
	DB	01cH
	DB	08H
	DB	010H
	DB	03H
	DB	02bH
	DB	02cH
	DB	017H
	DB	023H
	DB	0fH
	DB	00H
	DB	02H
	DB	024H
	DB	07H
	DB	01dH
	DB	02aH
	DB	025H
	DB	018H
	DB	01H
	DB	032H
	DB	015H
	DB	016H
	DB	0aH
	DB	01eH
	DB	09H
	DB	0dH
	DB	02fH
	DB	022H
	DB	035H
	DB	012H
	DB	02dH
	DB	04H
	DB	019H
	DB	06H
	DB	026H
	DB	013H
	DB	029H
	DB	05H
	DB	021H
	DB	01bH
	DB	034H
	DB	027H
	DB	037H
	DB	036H
	DB	01fH
	DB	020H
	DB	01aH
	DB	014H
	DB	0bH
	DB	0eH
	DB	033H
	DB	02H
	DB	02aH
	DB	01dH
	DB	01eH
	DB	09H
	DB	015H
	DB	01H
	DB	02bH
	DB	011H
	DB	016H
	DB	032H
	DB	0fH
	DB	01cH
	DB	017H
	DB	0aH
	DB	02cH
	DB	024H
	DB	07H
	DB	08H
	DB	031H
	DB	010H
	DB	018H
	DB	036H
	DB	021H
	DB	014H
	DB	027H
	DB	04H
	DB	01fH
	DB	02dH
	DB	0bH
	DB	02fH
	DB	037H
	DB	05H
	DB	01bH
	DB	02eH
	DB	013H
	DB	0dH
	DB	026H
	DB	019H
	DB	029H
	DB	028H
	DB	030H
	DB	012H
	DB	0cH
	DB	06H
	DB	034H
	DB	00H
	DB	025H
	DB	011H
	DB	01cH
	DB	0fH
	DB	010H
	DB	018H
	DB	07H
	DB	02cH
	DB	01dH
	DB	03H
	DB	08H
	DB	024H
	DB	01H
	DB	0eH
	DB	09H
	DB	031H
	DB	01eH
	DB	016H
	DB	032H
	DB	033H
	DB	023H
	DB	02H
	DB	0aH
	DB	028H
	DB	013H
	DB	06H
	DB	019H
	DB	02dH
	DB	030H
	DB	01fH
	DB	034H
	DB	021H
	DB	029H
	DB	02eH
	DB	0dH
	DB	020H
	DB	05H
	DB	036H
	DB	037H
	DB	0bH
	DB	01bH
	DB	01aH
	DB	022H
	DB	04H
	DB	035H
	DB	02fH
	DB	026H
	DB	02bH
	DB	017H
	DB	03H
	DB	0eH
	DB	01H
	DB	02H
	DB	0aH
	DB	032H
	DB	01eH
	DB	0fH
	DB	02aH
	DB	033H
	DB	016H
	DB	02cH
	DB	00H
	DB	018H
	DB	023H
	DB	010H
	DB	08H
	DB	024H
	DB	025H
	DB	015H
	DB	011H
	DB	031H
	DB	01aH
	DB	05H
	DB	02fH
	DB	0bH
	DB	01fH
	DB	022H
	DB	030H
	DB	026H
	DB	013H
	DB	01bH
	DB	020H
	DB	036H
	DB	012H
	DB	02eH
	DB	028H
	DB	029H
	DB	034H
	DB	0dH
	DB	0cH
	DB	014H
	DB	02dH
	DB	027H
	DB	021H
	DB	037H
	DB	01dH
	DB	09H
	DB	02aH
	DB	00H
	DB	02cH
	DB	011H
	DB	031H
	DB	024H
	DB	010H
	DB	01H
	DB	01cH
	DB	025H
	DB	08H
	DB	01eH
	DB	02bH
	DB	0aH
	DB	015H
	DB	02H
	DB	033H
	DB	016H
	DB	017H
	DB	07H
	DB	03H
	DB	023H
	DB	013H
	DB	035H
	DB	028H
	DB	04H
	DB	037H
	DB	01bH
	DB	029H
	DB	01fH
	DB	0cH
	DB	014H
	DB	019H
	DB	02fH
	DB	0bH
	DB	027H
	DB	021H
	DB	022H
	DB	02dH
	DB	06H
	DB	05H
	DB	0dH
	DB	026H
	DB	020H
	DB	01aH
	DB	030H
	DB	016H
	DB	02H
	DB	023H
	DB	032H
	DB	025H
	DB	0aH
	DB	02aH
	DB	01dH
	DB	09H
	DB	033H
	DB	015H
	DB	01eH
	DB	01H
	DB	017H
	DB	024H
	DB	03H
	DB	0eH
	DB	018H
	DB	02cH
	DB	0fH
	DB	010H
	DB	00H
	DB	031H
	DB	01cH
$SG4294954233 DB 'THIS_IS_THE_END_OF_THE_FUNCTION', 00H
PUBLIC	?CPU_DES_MainLoop_AVX2@@YAXXZ			; CPU_DES_MainLoop_AVX2
_Tuple_alloc DB	01H DUP (?)
	ALIGN	8

errno_ecat DQ	01H DUP (?)
ignore	DB	01H DUP (?)
	ALIGN	4

allocator_arg DB 01H DUP (?)
	ALIGN	8

native_ecat DQ	01H DUP (?)
piecewise_construct DB 01H DUP (?)
	ALIGN	8

posix_category DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetCrypt25Address@@YAPEADPEAUDES_Context@@@Z DD imagerel ?GetCrypt25Address@@YAPEADPEAUDES_Context@@@Z
	DD	imagerel ?GetCrypt25Address@@YAPEADPEAUDES_Context@@@Z+58
	DD	imagerel $unwind$?GetCrypt25Address@@YAPEADPEAUDES_Context@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SearchForTripcodes@@YAIPEAUDES_Context@@@Z DD imagerel ?SearchForTripcodes@@YAIPEAUDES_Context@@@Z
	DD	imagerel ?SearchForTripcodes@@YAIPEAUDES_Context@@@Z+60
	DD	imagerel $unwind$?SearchForTripcodes@@YAIPEAUDES_Context@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?SearchForTripcodes@@YAIPEAUDES_Context@@@Z DD imagerel ?SearchForTripcodes@@YAIPEAUDES_Context@@@Z+60
	DD	imagerel ?SearchForTripcodes@@YAIPEAUDES_Context@@@Z+8670
	DD	imagerel $chain$3$?SearchForTripcodes@@YAIPEAUDES_Context@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?SearchForTripcodes@@YAIPEAUDES_Context@@@Z DD imagerel ?SearchForTripcodes@@YAIPEAUDES_Context@@@Z+8670
	DD	imagerel ?SearchForTripcodes@@YAIPEAUDES_Context@@@Z+8676
	DD	imagerel $chain$4$?SearchForTripcodes@@YAIPEAUDES_Context@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DES_GetTripcode@@YAPEAEPEAUDES_Context@@HPEAE@Z DD imagerel ?DES_GetTripcode@@YAPEAEPEAUDES_Context@@HPEAE@Z
	DD	imagerel ?DES_GetTripcode@@YAPEAEPEAUDES_Context@@HPEAE@Z+1172
	DD	imagerel $unwind$?DES_GetTripcode@@YAPEAEPEAUDES_Context@@HPEAE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DES_GetTripcodeChunks@@YAXPEAUDES_Context@@HPEAIH@Z DD imagerel ?DES_GetTripcodeChunks@@YAXPEAUDES_Context@@HPEAIH@Z
	DD	imagerel ?DES_GetTripcodeChunks@@YAXPEAUDES_Context@@HPEAIH@Z+3333
	DD	imagerel $unwind$?DES_GetTripcodeChunks@@YAXPEAUDES_Context@@HPEAIH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DES_SetSalt@@YAXPEAUDES_Context@@H@Z DD imagerel ?DES_SetSalt@@YAXPEAUDES_Context@@H@Z
	DD	imagerel ?DES_SetSalt@@YAXPEAUDES_Context@@H@Z+183
	DD	imagerel $unwind$?DES_SetSalt@@YAXPEAUDES_Context@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DES_RewriteCrypt25_x64_AVX2@@YAXPEAUDES_Context@@@Z DD imagerel ?DES_RewriteCrypt25_x64_AVX2@@YAXPEAUDES_Context@@@Z
	DD	imagerel ?DES_RewriteCrypt25_x64_AVX2@@YAXPEAUDES_Context@@@Z+366
	DD	imagerel $unwind$?DES_RewriteCrypt25_x64_AVX2@@YAXPEAUDES_Context@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DES_RewriteCrypt25@@YAXPEAUDES_Context@@@Z DD imagerel ?DES_RewriteCrypt25@@YAXPEAUDES_Context@@@Z
	DD	imagerel ?DES_RewriteCrypt25@@YAXPEAUDES_Context@@@Z+593
	DD	imagerel $unwind$?DES_RewriteCrypt25@@YAXPEAUDES_Context@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Enative_ecat@system@boost@@YAXXZ DD imagerel ??__Enative_ecat@system@boost@@YAXXZ
	DD	imagerel ??__Enative_ecat@system@boost@@YAXXZ+21
	DD	imagerel $unwind$??__Enative_ecat@system@boost@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Eerrno_ecat@system@boost@@YAXXZ DD imagerel ??__Eerrno_ecat@system@boost@@YAXXZ
	DD	imagerel ??__Eerrno_ecat@system@boost@@YAXXZ+21
	DD	imagerel $unwind$??__Eerrno_ecat@system@boost@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Eposix_category@system@boost@@YAXXZ DD imagerel ??__Eposix_category@system@boost@@YAXXZ
	DD	imagerel ??__Eposix_category@system@boost@@YAXXZ+21
	DD	imagerel $unwind$??__Eposix_category@system@boost@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CPU_DES_MainLoop_AVX2@@YAXXZ DD imagerel $LN158
	DD	imagerel $LN158+794
	DD	imagerel $unwind$?CPU_DES_MainLoop_AVX2@@YAXXZ
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CPU_DES_MainLoop_AVX2@@YAXXZ DD 0b3c19H
	DD	0edde422H
	DD	0edc7422H
	DD	0edb6422H
	DD	0eda3422H
	DD	0ed80122H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	07664H
	DD	050H
	DD	020H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Eposix_category@system@boost@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Eerrno_ecat@system@boost@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Enative_ecat@system@boost@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DES_RewriteCrypt25@@YAXPEAUDES_Context@@@Z DD 051f19H
	DD	033340dH
	DD	030010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0170H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DES_RewriteCrypt25_x64_AVX2@@YAXPEAUDES_Context@@@Z DD 021619H
	DD	0110107H
	DD	imagerel __GSHandlerCheck
	DD	070H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DES_SetSalt@@YAXPEAUDES_Context@@H@Z DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DES_GetTripcodeChunks@@YAXPEAUDES_Context@@HPEAIH@Z DD 040a01H
	DD	02740aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DES_GetTripcode@@YAPEAEPEAUDES_Context@@HPEAE@Z DD 020501H
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?SearchForTripcodes@@YAIPEAUDES_Context@@@Z DD 021H
	DD	imagerel ?SearchForTripcodes@@YAIPEAUDES_Context@@@Z
	DD	imagerel ?SearchForTripcodes@@YAIPEAUDES_Context@@@Z+60
	DD	imagerel $unwind$?SearchForTripcodes@@YAIPEAUDES_Context@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?SearchForTripcodes@@YAIPEAUDES_Context@@@Z DD 081821H
	DD	01ce418H
	DD	025c40cH
	DD	0247408H
	DD	0236404H
	DD	imagerel ?SearchForTripcodes@@YAIPEAUDES_Context@@@Z
	DD	imagerel ?SearchForTripcodes@@YAIPEAUDES_Context@@@Z+60
	DD	imagerel $unwind$?SearchForTripcodes@@YAIPEAUDES_Context@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SearchForTripcodes@@YAIPEAUDES_Context@@@Z DD 062219H
	DD	01d0114H
	DD	0d007f009H
	DD	050043005H
	DD	imagerel __GSHandlerCheck
	DD	0d0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetCrypt25Address@@YAPEADPEAUDES_Context@@@Z DD 010401H
	DD	04204H
	ORG $-24
posix_category$initializer$ DQ FLAT:??__Eposix_category@system@boost@@YAXXZ
errno_ecat$initializer$ DQ FLAT:??__Eerrno_ecat@system@boost@@YAXXZ
native_ecat$initializer$ DQ FLAT:??__Enative_ecat@system@boost@@YAXXZ
; Function compile flags: /Ogtpy
; File z:\github\merikens-tripcode-engine\sourcefiles\cpu10.h
; File z:\github\merikens-tripcode-engine\sourcefiles\cpu12.cpp
; File z:\github\merikens-tripcode-engine\sourcefiles\cpu10.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\thread
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h
; File z:\github\merikens-tripcode-engine\sourcefiles\main.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h
; File z:\github\merikens-tripcode-engine\sourcefiles\cpu10.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\thread
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h
; File z:\github\merikens-tripcode-engine\sourcefiles\main.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h
; File z:\github\merikens-tripcode-engine\sourcefiles\cpu10.h
;	COMDAT ?CPU_DES_MainLoop_AVX2@@YAXXZ
_TEXT	SEGMENT
context$ = 0
__$ArrayPad$ = 30304
?CPU_DES_MainLoop_AVX2@@YAXXZ PROC			; CPU_DES_MainLoop_AVX2, COMDAT

; 1018 : {

$LN158:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14
	push	rbp
	mov	eax, 30400				; 000076c0H
	call	__chkstk
	sub	rsp, rax
	lea	rbp, QWORD PTR [rsp+80]
	and	rbp, -32				; ffffffffffffffe0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rbp], rax

; 1019 : 	DES_Context context;
; 1020 : 
; 1021 : 	for (int32_t i = 0; i < SIZE_KEY_CHAR_TABLE; ++i) {

	xor	r14d, r14d
	lea	rdx, OFFSET FLAT:__ImageBase
	mov	ecx, r14d
	npad	7
$LL133@CPU_DES_Ma:

; 1022 : 		context.keyCharTable_FirstByte[i]  = keyCharTable_FirstByte[i];

	movzx	eax, BYTE PTR ?keyCharTable_FirstByte@@3PAEA[rcx+rdx]
	inc	rcx
	mov	BYTE PTR context$[rbp+rcx+28943], al

; 1023 : 		context.keyCharTable_SecondByte[i] = keyCharTable_SecondByte[i];

	movzx	eax, BYTE PTR ?keyCharTable_SecondByte@@3PAEA[rcx+rdx-1]
	mov	BYTE PTR context$[rbp+rcx+29455], al
	cmp	rcx, 512				; 00000200H
	jl	SHORT $LL133@CPU_DES_Ma

; 1026 : 	context.useAVX2 = options.isAVX2Enabled && IsAVX2Supported();

	cmp	DWORD PTR ?options@@3UOptions@@A+92, r14d
	je	SHORT $LN19@CPU_DES_Ma
; File z:\github\merikens-tripcode-engine\sourcefiles\cpu12.cpp

; 634  :     if (the_4th_gen_features_available < 0 )

	mov	eax, DWORD PTR ?the_4th_gen_features_available@?1??IsAVX2Supported@@YAHXZ@4HA
	test	eax, eax
	jns	SHORT $LN155@CPU_DES_Ma

; 635  :         the_4th_gen_features_available = check_4th_gen_intel_core_features();

	call	?check_4th_gen_intel_core_features@@YAHXZ ; check_4th_gen_intel_core_features
	mov	DWORD PTR ?the_4th_gen_features_available@?1??IsAVX2Supported@@YAHXZ@4HA, eax
; File z:\github\merikens-tripcode-engine\sourcefiles\cpu10.h

; 1026 : 	context.useAVX2 = options.isAVX2Enabled && IsAVX2Supported();

	test	eax, eax
$LN155@CPU_DES_Ma:
	je	SHORT $LN19@CPU_DES_Ma
	mov	eax, 1
	mov	DWORD PTR context$[rbp+28940], eax
	jmp	SHORT $LN154@CPU_DES_Ma
$LN19@CPU_DES_Ma:

; 1027 : 	context.useAVX  = !context.useAVX2 && options.isAVXEnabled && IsAVXSupported();

	cmp	DWORD PTR ?options@@3UOptions@@A+80, r14d
	mov	DWORD PTR context$[rbp+28940], r14d
	je	SHORT $LN154@CPU_DES_Ma
	call	IsAVXSupported
	test	eax, eax
	mov	eax, 1
	jne	SHORT $LN156@CPU_DES_Ma
$LN154@CPU_DES_Ma:
	mov	eax, r14d
$LN156@CPU_DES_Ma:
	mov	DWORD PTR context$[rbp+28936], eax

; 1008 : 					                                         DES_Crypt25_x64_SSE2          );

	cmp	DWORD PTR context$[rbp+28940], r14d
	je	SHORT $LN30@CPU_DES_Ma
	lea	rsi, OFFSET FLAT:DES_Crypt25_x64_AVX2
	jmp	SHORT $LN29@CPU_DES_Ma
$LN30@CPU_DES_Ma:
	test	eax, eax
	je	SHORT $LN28@CPU_DES_Ma
	lea	rsi, OFFSET FLAT:DES_Crypt25_x64_AVX
	jmp	SHORT $LN29@CPU_DES_Ma
$LN28@CPU_DES_Ma:
	call	?IsCPUBasedOnNehalemMicroarchitecture@@YAHXZ ; IsCPUBasedOnNehalemMicroarchitecture
	lea	rsi, OFFSET FLAT:DES_Crypt25_x64_SSE2
	lea	rcx, OFFSET FLAT:DES_Crypt25_x64_SSE2_Nehalem
	test	eax, eax
	cmovne	rsi, rcx
$LN29@CPU_DES_Ma:

; 1028 : 	// printf("context.useAVX = %d\n", context.useAVX);
; 1029 : 
; 1030 : #ifdef USE_ASSEMBLY_FUNCTION
; 1031 : 	// Prepare a copy of DES_Crypt25_*() for thread-safe rewrites.
; 1032 : 	char *base = GetCrypt25Address(&context);
; 1033 : 	char *p;
; 1034 : 	int32_t functionSize = 0;
; 1035 : 	for (p = base; strcmp(p, "THIS_IS_THE_END_OF_THE_FUNCTION") != 0; ++p)

	lea	rdx, OFFSET FLAT:$SG4294954233
	mov	rcx, rsi
	mov	edi, r14d
	mov	rbx, rsi
	call	strcmp
	test	eax, eax
	je	SHORT $LN11@CPU_DES_Ma
$LL13@CPU_DES_Ma:
	inc	rbx
	lea	rdx, OFFSET FLAT:$SG4294954233

; 1036 : 		++functionSize;

	inc	edi
	mov	rcx, rbx
	call	strcmp
	test	eax, eax
	jne	SHORT $LL13@CPU_DES_Ma
$LN11@CPU_DES_Ma:

; 1037 : 	context.crypt25 = (void (*)(void *))VirtualAllocEx(GetCurrentProcess(), 0, functionSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE );

	movsxd	rbx, edi
	call	QWORD PTR __imp_GetCurrentProcess
	mov	r9d, 4096				; 00001000H
	mov	r8, rbx
	xor	edx, edx
	mov	rcx, rax
	mov	DWORD PTR [rsp+32], 64			; 00000040H
	call	QWORD PTR __imp_VirtualAllocEx

; 1038 : 	memcpy(context.crypt25, base, functionSize);

	mov	r8, rbx
	mov	rcx, rax
	mov	rdx, rsi
	mov	QWORD PTR context$[rbp+28928], rax
	call	memcpy

; 1039 : #endif
; 1040 : 
; 1041 : 	for (int32_t i = 0; i < 0x40; ++i)

	mov	rax, r14
	npad	10
$LL135@CPU_DES_Ma:

; 1042 : 		context.tripcodeChunkBitmap[0][i] = context.tripcodeChunkBitmap[1][i] = context.tripcodeChunkBitmap[2][i] = context.tripcodeChunkBitmap[3][i] = context.tripcodeChunkBitmap[4][i] = 0; 

	mov	BYTE PTR context$[rbp+rax+30224], r14b
	mov	BYTE PTR context$[rbp+rax+30160], r14b
	mov	BYTE PTR context$[rbp+rax+30096], r14b
	mov	BYTE PTR context$[rbp+rax+30032], r14b
	mov	BYTE PTR context$[rbp+rax+29968], r14b
	inc	rax
	cmp	rax, 64					; 00000040H
	jl	SHORT $LL135@CPU_DES_Ma

; 1043 : 	for (int32_t i = 0; i < numTripcodeChunk; ++i) {

	mov	eax, DWORD PTR ?numTripcodeChunk@@3IA	; numTripcodeChunk
	test	eax, eax
	je	SHORT $LN125@CPU_DES_Ma
	mov	rcx, QWORD PTR ?tripcodeChunkArray@@3PEAIEA ; tripcodeChunkArray
	mov	edx, eax
$LL7@CPU_DES_Ma:

; 1044 : 		context.tripcodeChunkBitmap[4][(tripcodeChunkArray[i] >> (6 * 4)) & 0x3f] = 0x1;

	movzx	eax, BYTE PTR [rcx+3]
	lea	rcx, QWORD PTR [rcx+4]
	and	eax, 63					; 0000003fH
	mov	BYTE PTR context$[rbp+rax+30224], 1

; 1045 : 		context.tripcodeChunkBitmap[3][(tripcodeChunkArray[i] >> (6 * 3)) & 0x3f] = 0x1;

	mov	eax, DWORD PTR [rcx-4]
	shr	rax, 18
	and	eax, 63					; 0000003fH
	mov	BYTE PTR context$[rbp+rax+30160], 1

; 1046 : 		context.tripcodeChunkBitmap[2][(tripcodeChunkArray[i] >> (6 * 2)) & 0x3f] = 0x1;

	mov	eax, DWORD PTR [rcx-4]
	shr	rax, 12
	and	eax, 63					; 0000003fH
	mov	BYTE PTR context$[rbp+rax+30096], 1

; 1047 : 		context.tripcodeChunkBitmap[1][(tripcodeChunkArray[i] >> (6 * 1)) & 0x3f] = 0x1;

	mov	eax, DWORD PTR [rcx-4]
	shr	rax, 6
	and	eax, 63					; 0000003fH
	mov	BYTE PTR context$[rbp+rax+30032], 1

; 1048 : 		context.tripcodeChunkBitmap[0][(tripcodeChunkArray[i] >> (6 * 0)) & 0x3f] = 0x1;

	mov	eax, DWORD PTR [rcx-4]
	and	eax, 63					; 0000003fH
	mov	BYTE PTR context$[rbp+rax+29968], 1
	dec	rdx
	jne	SHORT $LL7@CPU_DES_Ma
$LN125@CPU_DES_Ma:

; 1051 : 	while (!GetTerminationState()) {

	call	?GetTerminationState@@YAHXZ		; GetTerminationState
	test	eax, eax
	jne	$LN3@CPU_DES_Ma
	npad	3
$LL35@CPU_DES_Ma:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h

; 2385 : 			return (_INTRIN_ACQUIRE(_interlockedbittestandset)(_Flag, 0));

	lock_bts DWORD PTR ?current_state_spinlock@@3Vspinlock@@A, 0 ; current_state_spinlock
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h

; 149  : 		while (flag.test_and_set(std::memory_order_acquire))

	jae	SHORT $LN34@CPU_DES_Ma
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\thread

; 123  : 	if (::Concurrency::details::_CurrentScheduler::_Id() != -1)

	call	?_Id@_CurrentScheduler@details@Concurrency@@SAIXZ ; Concurrency::details::_CurrentScheduler::_Id
	cmp	eax, -1					; ffffffffH
	je	SHORT $LN49@CPU_DES_Ma

; 124  : 		{	// yield, then quit
; 125  : 		::Concurrency::details::_Context::_Yield();

	call	?_Yield@_Context@details@Concurrency@@SAXXZ ; Concurrency::details::_Context::_Yield

; 126  : 		return;

	jmp	SHORT $LL35@CPU_DES_Ma
$LN49@CPU_DES_Ma:

; 127  : 		}
; 128  : 	_Thrd_yield();

	call	_Thrd_yield
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h

; 150  : 			std::this_thread::yield();

	jmp	SHORT $LL35@CPU_DES_Ma
$LN34@CPU_DES_Ma:
; File z:\github\merikens-tripcode-engine\sourcefiles\main.cpp

; 1633 : 	ret = isSearchPaused;

	mov	eax, DWORD PTR ?isSearchPaused@@3HA	; isSearchPaused
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h

; 1363 : 	*_Tgt = _Value;

	mov	DWORD PTR ?current_state_spinlock@@3Vspinlock@@A, r14d ; current_state_spinlock
; File z:\github\merikens-tripcode-engine\sourcefiles\cpu10.h

; 1052 : 		while (GetPauseState() && !GetTerminationState())

	test	eax, eax
	je	SHORT $LN1@CPU_DES_Ma
	call	?GetTerminationState@@YAHXZ		; GetTerminationState
	test	eax, eax
	jne	SHORT $LN1@CPU_DES_Ma

; 1053 : 			Sleep(PAUSE_INTERVAL);

	lea	ecx, QWORD PTR [rax+100]
	call	QWORD PTR __imp_Sleep
	jmp	SHORT $LL35@CPU_DES_Ma
$LN1@CPU_DES_Ma:

; 1054 : 
; 1055 : 		uint32_t numGeneratedTripcodes = SearchForTripcodes(&context);

	lea	rcx, QWORD PTR context$[rbp]
	call	?SearchForTripcodes@@YAIPEAUDES_Context@@@Z ; SearchForTripcodes
	mov	ebx, eax
$LL80@CPU_DES_Ma:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h

; 2385 : 			return (_INTRIN_ACQUIRE(_interlockedbittestandset)(_Flag, 0));

	lock_bts DWORD PTR ?num_generated_tripcodes_spinlock@@3Vspinlock@@A, 0 ; num_generated_tripcodes_spinlock
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h

; 149  : 		while (flag.test_and_set(std::memory_order_acquire))

	jae	SHORT $LN79@CPU_DES_Ma
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\thread

; 123  : 	if (::Concurrency::details::_CurrentScheduler::_Id() != -1)

	call	?_Id@_CurrentScheduler@details@Concurrency@@SAIXZ ; Concurrency::details::_CurrentScheduler::_Id
	cmp	eax, -1					; ffffffffH
	je	SHORT $LN94@CPU_DES_Ma

; 124  : 		{	// yield, then quit
; 125  : 		::Concurrency::details::_Context::_Yield();

	call	?_Yield@_Context@details@Concurrency@@SAXXZ ; Concurrency::details::_Context::_Yield

; 126  : 		return;

	jmp	SHORT $LL80@CPU_DES_Ma
$LN94@CPU_DES_Ma:

; 127  : 		}
; 128  : 	_Thrd_yield();

	call	_Thrd_yield
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h

; 150  : 			std::this_thread::yield();

	jmp	SHORT $LL80@CPU_DES_Ma
$LN79@CPU_DES_Ma:
; File z:\github\merikens-tripcode-engine\sourcefiles\main.cpp

; 1575 : 	numGeneratedTripcodes_CPU += num;

	mov	ecx, DWORD PTR ?numGeneratedTripcodes_CPU@@3IA ; numGeneratedTripcodes_CPU
	add	ecx, ebx
	mov	DWORD PTR ?numGeneratedTripcodes_CPU@@3IA, ecx ; numGeneratedTripcodes_CPU

; 1576 : 	if (numGeneratedTripcodes_CPU >= 1000000) {

	cmp	ecx, 1000000				; 000f4240H
	jb	SHORT $LN76@CPU_DES_Ma

; 1577 : 		numGeneratedTripcodesByCPUInMillions += numGeneratedTripcodes_CPU / 1000000;

	mov	eax, 1125899907				; 431bde83H
	mul	ecx
	shr	edx, 18
	add	DWORD PTR ?numGeneratedTripcodesByCPUInMillions@@3IA, edx ; numGeneratedTripcodesByCPUInMillions

; 1578 : 		numGeneratedTripcodes_CPU           %= 1000000;

	imul	eax, edx, -1000000			; fff0bdc0H
	add	ecx, eax
	mov	DWORD PTR ?numGeneratedTripcodes_CPU@@3IA, ecx ; numGeneratedTripcodes_CPU
$LN76@CPU_DES_Ma:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h

; 1363 : 	*_Tgt = _Value;

	mov	DWORD PTR ?num_generated_tripcodes_spinlock@@3Vspinlock@@A, r14d ; num_generated_tripcodes_spinlock
; File z:\github\merikens-tripcode-engine\sourcefiles\cpu10.h

; 1051 : 	while (!GetTerminationState()) {

	call	?GetTerminationState@@YAHXZ		; GetTerminationState
	test	eax, eax
	je	$LL35@CPU_DES_Ma
$LN3@CPU_DES_Ma:

; 1056 : 		AddToNumGeneratedTripcodesByCPU(numGeneratedTripcodes);
; 1057 : 	}
; 1058 : }

	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rsp
	call	__security_check_cookie
	lea	r11, QWORD PTR [rsp+30400]
	mov	rbx, QWORD PTR [r11+16]
	mov	rsi, QWORD PTR [r11+24]
	mov	rdi, QWORD PTR [r11+32]
	mov	r14, QWORD PTR [r11+40]
	mov	rsp, r11
	pop	rbp
	ret	0
?CPU_DES_MainLoop_AVX2@@YAXXZ ENDP			; CPU_DES_MainLoop_AVX2
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\boost\system\error_code.hpp
;	COMDAT ??__Eposix_category@system@boost@@YAXXZ
text$di	SEGMENT
??__Eposix_category@system@boost@@YAXXZ PROC		; boost::system::`dynamic initializer for 'posix_category'', COMDAT

; 221  :     static const error_category &  posix_category = generic_category();

	sub	rsp, 40					; 00000028H
	call	?generic_category@system@boost@@YAAEBVerror_category@12@XZ ; boost::system::generic_category
	mov	QWORD PTR posix_category, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Eposix_category@system@boost@@YAXXZ ENDP		; boost::system::`dynamic initializer for 'posix_category''
text$di	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\boost\system\error_code.hpp
;	COMDAT ??__Eerrno_ecat@system@boost@@YAXXZ
text$di	SEGMENT
??__Eerrno_ecat@system@boost@@YAXXZ PROC		; boost::system::`dynamic initializer for 'errno_ecat'', COMDAT

; 222  :     static const error_category &  errno_ecat     = generic_category();

	sub	rsp, 40					; 00000028H
	call	?generic_category@system@boost@@YAAEBVerror_category@12@XZ ; boost::system::generic_category
	mov	QWORD PTR errno_ecat, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Eerrno_ecat@system@boost@@YAXXZ ENDP		; boost::system::`dynamic initializer for 'errno_ecat''
text$di	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\boost\system\error_code.hpp
;	COMDAT ??__Enative_ecat@system@boost@@YAXXZ
text$di	SEGMENT
??__Enative_ecat@system@boost@@YAXXZ PROC		; boost::system::`dynamic initializer for 'native_ecat'', COMDAT

; 223  :     static const error_category &  native_ecat    = system_category();

	sub	rsp, 40					; 00000028H
	call	?system_category@system@boost@@YAAEBVerror_category@12@XZ ; boost::system::system_category
	mov	QWORD PTR native_ecat, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Enative_ecat@system@boost@@YAXXZ ENDP		; boost::system::`dynamic initializer for 'native_ecat''
text$di	ENDS
; Function compile flags: /Ogtpy
; File z:\github\merikens-tripcode-engine\sourcefiles\cpu10.h
;	COMDAT ?DES_RewriteCrypt25@@YAXPEAUDES_Context@@@Z
_TEXT	SEGMENT
rewriteTable$ = 32
__$ArrayPad$ = 368
context$ = 400
?DES_RewriteCrypt25@@YAXPEAUDES_Context@@@Z PROC	; DES_RewriteCrypt25, COMDAT

; 210  : {

	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 384				; 00000180H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 211  : 	// Rewrite the assembly function.
; 212  : #define SKIP 0x100
; 213  : 	int32_t rewriteTable[] = {
; 214  : 		0,    1,    2,    3,    4,    5,
; 215  : 		6,    7,    8,    9,    10,   11,
; 216  : 		SKIP, SKIP, SKIP, SKIP, SKIP, SKIP,
; 217  : 		SKIP, SKIP, SKIP, SKIP, SKIP,
; 218  : 		24,   25,   26,   27,   28,   29,
; 219  : 		30,   31,   32,   33,   34,   35,
; 220  : 		SKIP, SKIP, SKIP, SKIP, SKIP, 
; 221  : 		SKIP, SKIP, SKIP, SKIP, SKIP, SKIP,
; 222  : 
; 223  : 		48,   49,   50,   51,   52,   53,
; 224  : 		54,   55,   56,   57,   58,   59,
; 225  : 		SKIP, SKIP, SKIP, SKIP, SKIP, SKIP,   
; 226  : 		SKIP, SKIP, SKIP, SKIP, SKIP, SKIP,
; 227  : 		72,   73,   74,   75,   76,   77,
; 228  : 		78,   79,   80,   81,   82,   83,
; 229  : 		-1
; 230  : 	};

	xor	ebx, ebx
	mov	rdi, rcx
	lea	rdx, QWORD PTR rewriteTable$[rsp]
	mov	eax, ebx
	npad	5
$LL29@DES_Rewrit:
	mov	DWORD PTR [rdx], eax
	inc	eax
	lea	rdx, QWORD PTR [rdx+4]
	cmp	eax, 12
	jl	SHORT $LL29@DES_Rewrit
	movdqa	xmm0, XMMWORD PTR __xmm@00000100000001000000010000000100
	mov	edx, 12
	mov	DWORD PTR rewriteTable$[rsp+80], 256	; 00000100H
	movdqa	xmm1, xmm0
	mov	DWORD PTR rewriteTable$[rsp+84], 256	; 00000100H
	mov	DWORD PTR rewriteTable$[rsp+88], 256	; 00000100H
	movdqa	XMMWORD PTR rewriteTable$[rsp+64], xmm1
	movdqa	XMMWORD PTR rewriteTable$[rsp+48], xmm0
	mov	eax, 24
	lea	rcx, QWORD PTR rewriteTable$[rsp+92]
	mov	r8d, edx
	npad	1
$LL31@DES_Rewrit:
	mov	DWORD PTR [rcx], eax
	inc	eax
	lea	rcx, QWORD PTR [rcx+4]
	dec	r8
	jne	SHORT $LL31@DES_Rewrit
	movdqa	xmm0, XMMWORD PTR __xmm@00000100000001000000010000000100
	mov	DWORD PTR rewriteTable$[rsp+140], 256	; 00000100H
	mov	DWORD PTR rewriteTable$[rsp+176], 256	; 00000100H
	movdqa	xmm1, xmm0
	mov	DWORD PTR rewriteTable$[rsp+180], 256	; 00000100H
	mov	eax, 48					; 00000030H
	movdqa	XMMWORD PTR rewriteTable$[rsp+160], xmm1
	movdqa	XMMWORD PTR rewriteTable$[rsp+144], xmm0
	lea	rcx, QWORD PTR rewriteTable$[rsp+184]
	mov	r8, rdx
	npad	4
$LL33@DES_Rewrit:
	mov	DWORD PTR [rcx], eax
	inc	eax
	lea	rcx, QWORD PTR [rcx+4]
	dec	r8
	jne	SHORT $LL33@DES_Rewrit
	mov	rax, 1099511628032			; 0000010000000100H
	lea	rcx, QWORD PTR rewriteTable$[rsp+280]
	mov	QWORD PTR rewriteTable$[rsp+232], rax
	mov	QWORD PTR rewriteTable$[rsp+240], rax
	mov	QWORD PTR rewriteTable$[rsp+248], rax
	mov	QWORD PTR rewriteTable$[rsp+256], rax
	mov	QWORD PTR rewriteTable$[rsp+264], rax
	mov	QWORD PTR rewriteTable$[rsp+272], rax
	mov	eax, 72					; 00000048H
	npad	12
$LL37@DES_Rewrit:
	mov	DWORD PTR [rcx], eax
	inc	eax
	lea	rcx, QWORD PTR [rcx+4]
	dec	rdx
	jne	SHORT $LL37@DES_Rewrit

; 231  : 	unsigned char *p = (unsigned char *)(context->crypt25);
; 232  : 	unsigned char instructionBytes[3];
; 233  : 
; 234  : 	// Rewrite "movdqa/vmovdqa/movaps xmm*, [rbx + 0xffffffff]" based on context->ExpansionFunction[].
; 235  : 	for (int32_t i = 0; rewriteTable[i] >= 0; ++i) {

	mov	r11d, DWORD PTR rewriteTable$[rsp]
	mov	r10, QWORD PTR [rdi+28928]
	mov	DWORD PTR rewriteTable$[rsp+328], -1
	test	r11d, r11d
	js	$LN80@DES_Rewrit
	npad	3
$LL20@DES_Rewrit:

; 236  : 		if (context->useAVX) {

	cmp	DWORD PTR [rdi+28936], 0
	je	SHORT $LN17@DES_Rewrit
	npad	7
$LL16@DES_Rewrit:

; 237  : 			// vmovdqa xmm*, [rbx + 0xffffffff]
; 238  : 			for (; 
; 239  : 					*(p + 0) != 0xc5
; 240  : 				 || *(p + 1) != 0xf9
; 241  : 				 || *(p + 2) != 0x6f
; 242  : 				 || (   *(p + 3) != 0x83
; 243  : 					 && *(p + 3) != 0x8b
; 244  : 					 && *(p + 3) != 0x93
; 245  : 					 && *(p + 3) != 0x9b
; 246  : 					 && *(p + 3) != 0xa3
; 247  : 					 && *(p + 3) != 0xab);
; 248  : 				 ++p)

	cmp	BYTE PTR [r10], 197			; 000000c5H
	jne	SHORT $LN15@DES_Rewrit
	cmp	BYTE PTR [r10+1], 249			; 000000f9H
	jne	SHORT $LN15@DES_Rewrit
	cmp	BYTE PTR [r10+2], 111			; 0000006fH
	jne	SHORT $LN15@DES_Rewrit
	movzx	eax, BYTE PTR [r10+3]
	add	al, 125					; 0000007dH
	cmp	al, 40					; 00000028H
	ja	SHORT $LN15@DES_Rewrit
	test	al, 7
	je	SHORT $LN8@DES_Rewrit
$LN15@DES_Rewrit:
	inc	r10
	jmp	SHORT $LL16@DES_Rewrit
$LN17@DES_Rewrit:

; 249  : 				;
; 250  : 			p+= 4;
; 251  : 		} else if (IsCPUBasedOnNehalemMicroarchitecture()) {

	call	?IsCPUBasedOnNehalemMicroarchitecture@@YAHXZ ; IsCPUBasedOnNehalemMicroarchitecture
	test	eax, eax
	je	SHORT $LL78@DES_Rewrit
$LL10@DES_Rewrit:

; 252  : 			// movdqa xmm*, [rbx + 0xffffffff]
; 253  : 			for (; 
; 254  : 					*(p + 0) != 0x66
; 255  : 				 || *(p + 1) != 0x0f
; 256  : 				 || *(p + 2) != 0x6f
; 257  : 				 || (   *(p + 3) != 0x83
; 258  : 					 && *(p + 3) != 0x8b
; 259  : 					 && *(p + 3) != 0x93
; 260  : 					 && *(p + 3) != 0x9b
; 261  : 					 && *(p + 3) != 0xa3
; 262  : 					 && *(p + 3) != 0xab);
; 263  : 				 ++p)

	cmp	BYTE PTR [r10], 102			; 00000066H
	jne	SHORT $LN9@DES_Rewrit
	cmp	BYTE PTR [r10+1], 15
	jne	SHORT $LN9@DES_Rewrit
	cmp	BYTE PTR [r10+2], 111			; 0000006fH
	jne	SHORT $LN9@DES_Rewrit
	movzx	eax, BYTE PTR [r10+3]
	add	al, 125					; 0000007dH
	cmp	al, 40					; 00000028H
	ja	SHORT $LN9@DES_Rewrit
	test	al, 7
	je	SHORT $LN8@DES_Rewrit
$LN9@DES_Rewrit:
	inc	r10
	jmp	SHORT $LL10@DES_Rewrit
$LN8@DES_Rewrit:

; 264  : 				;
; 265  : 			p+= 4;

	add	r10, 4
	jmp	SHORT $LN6@DES_Rewrit
	npad	1
$LL78@DES_Rewrit:

; 266  : 		} else {
; 267  : 			// movaps xmm*, [rbx + 0xffffffff]
; 268  : 			for (; 
; 269  : 					*(p + 0) != 0x0f
; 270  : 				 || *(p + 1) != 0x28
; 271  : 				 || (   *(p + 2) != 0x83
; 272  : 					 && *(p + 2) != 0x8b
; 273  : 					 && *(p + 2) != 0x93
; 274  : 					 && *(p + 2) != 0x9b
; 275  : 					 && *(p + 2) != 0xa3
; 276  : 					 && *(p + 2) != 0xab);
; 277  : 				 ++p)

	cmp	BYTE PTR [r10], 15
	jne	SHORT $LN4@DES_Rewrit
	cmp	BYTE PTR [r10+1], 40			; 00000028H
	jne	SHORT $LN4@DES_Rewrit
	movzx	eax, BYTE PTR [r10+2]
	add	al, 125					; 0000007dH
	cmp	al, 40					; 00000028H
	ja	SHORT $LN4@DES_Rewrit
	test	al, 7
	je	SHORT $LN3@DES_Rewrit
$LN4@DES_Rewrit:
	inc	r10
	jmp	SHORT $LL78@DES_Rewrit
$LN3@DES_Rewrit:

; 278  : 				;
; 279  : 			p += 3;

	add	r10, 3
$LN6@DES_Rewrit:

; 280  : 		}
; 281  : 		// printf("offset = %d\n", (unsigned char *)p - (unsigned char *)(context->crypt25));
; 282  : 		if (rewriteTable[i] != SKIP)

	cmp	r11d, 256				; 00000100H
	je	SHORT $LN1@DES_Rewrit

; 283  : 			*(__int32 *)p = context->expansionFunction[rewriteTable[i]] * 8;

	movsxd	rax, r11d
	movzx	ecx, BYTE PTR [rax+rdi]
	shl	ecx, 3
	mov	DWORD PTR [r10], ecx
$LN1@DES_Rewrit:

; 231  : 	unsigned char *p = (unsigned char *)(context->crypt25);
; 232  : 	unsigned char instructionBytes[3];
; 233  : 
; 234  : 	// Rewrite "movdqa/vmovdqa/movaps xmm*, [rbx + 0xffffffff]" based on context->ExpansionFunction[].
; 235  : 	for (int32_t i = 0; rewriteTable[i] >= 0; ++i) {

	mov	r11d, DWORD PTR rewriteTable$[rsp+rbx*4+4]
	inc	rbx

; 284  : 		p += 4;

	add	r10, 4
	test	r11d, r11d
	jns	$LL20@DES_Rewrit
$LN80@DES_Rewrit:

; 285  : 	}
; 286  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rbx, QWORD PTR [rsp+408]
	add	rsp, 384				; 00000180H
	pop	rdi
	ret	0
?DES_RewriteCrypt25@@YAXPEAUDES_Context@@@Z ENDP	; DES_RewriteCrypt25
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\github\merikens-tripcode-engine\sourcefiles\cpu10.h
;	COMDAT ?DES_RewriteCrypt25_x64_AVX2@@YAXPEAUDES_Context@@@Z
_TEXT	SEGMENT
rewriteTable$ = 0
__$ArrayPad$ = 112
context$ = 144
?DES_RewriteCrypt25_x64_AVX2@@YAXPEAUDES_Context@@@Z PROC ; DES_RewriteCrypt25_x64_AVX2, COMDAT

; 288  : {

	sub	rsp, 136				; 00000088H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	r9, rcx

; 289  : 	// Rewrite the assembly function.
; 290  : #define SKIP 0x100
; 291  : 	int32_t rewriteTable[] = {
; 292  : 		0,    1,    2,    3,    4,    5,
; 293  : 		6,    7,    8,    9,    10,   11,
; 294  : 		24,   25,   26,   27,   28,   29,
; 295  : 		30,   31,   32,   33,   34,   35,
; 296  : 		-1
; 297  : 	};

	xor	eax, eax
	lea	rdx, QWORD PTR rewriteTable$[rsp]
	npad	1
$LL28@DES_Rewrit:
	mov	DWORD PTR [rdx], eax
	inc	eax
	lea	rdx, QWORD PTR [rdx+4]
	cmp	eax, 12
	jl	SHORT $LL28@DES_Rewrit
	mov	eax, 24
	lea	rcx, QWORD PTR rewriteTable$[rsp+48]
	mov	edx, 12
	npad	4
$LL30@DES_Rewrit:
	mov	DWORD PTR [rcx], eax
	add	rcx, 4
	inc	eax
	dec	rdx
	jne	SHORT $LL30@DES_Rewrit

; 298  : 	unsigned char *p = (unsigned char *)(context->crypt25);

	mov	rax, QWORD PTR [r9+28928]
	mov	DWORD PTR rewriteTable$[rsp+96], -1

; 299  : 	unsigned char instructionBytes[3];
; 300  : 
; 301  : 	// Rewrite "vpxor xmm*/ymm*, [rbx + 0xffffffff]" based on context->ExpansionFunction[].
; 302  : 	for (int32_t i = 0; rewriteTable[i] >= 0; ++i) {

	cmp	DWORD PTR rewriteTable$[rsp], edx
	jl	$LN41@DES_Rewrit
	lea	r8, QWORD PTR rewriteTable$[rsp]
	npad	7
$LL22@DES_Rewrit:

; 303  : 		/*
; 304  : 			c5 f9 ef 83 ff ff ff ff 
; 305  : 			c5 f1 ef 8b ff ff ff ff 
; 306  : 			c5 e9 ef 93 ff ff ff ff 
; 307  : 			c5 e1 ef 9b ff ff ff ff 
; 308  : 			c5 d9 ef a3 ff ff ff ff 
; 309  : 			c5 d1 ef ab ff ff ff ff 
; 310  : 
; 311  : 			c5 c9 ef b3 ff ff ff ff 
; 312  : 			c5 c1 ef bb ff ff ff ff 
; 313  : 			c5 39 ef 83 ff ff ff ff 
; 314  : 			c5 31 ef 8b ff ff ff ff 
; 315  : 			c5 29 ef 93 ff ff ff ff xmm10
; 316  : 			c5 21 ef 9b ff ff ff ff 
; 317  : 			c5 19 ef a3 ff ff ff ff 
; 318  : 			c5 11 ef ab ff ff ff ff 
; 319  : 			c5 09 ef b3 ff ff ff ff 
; 320  : 			c5 01 ef bb ff ff ff ff
; 321  : 		*/
; 322  : 		/*
; 323  : 			c5 fd ef 83 ff ff ff ff 
; 324  : 			c5 f5 ef 8b ff ff ff ff 
; 325  : 			c5 ed ef 93 ff ff ff ff 
; 326  : 			c5 e5 ef 9b ff ff ff ff 
; 327  : 			c5 dd ef a3 ff ff ff ff 
; 328  : 			c5 d5 ef ab ff ff ff ff 
; 329  : 
; 330  : 			c5 cd ef b3 ff ff ff ff 
; 331  : 			c5 c5 ef bb ff ff ff ff 
; 332  : 			c5 3d ef 83 ff ff ff ff 
; 333  : 			c5 35 ef 8b ff ff ff ff 
; 334  : 			c5 2d ef 93 ff ff ff ff ymm10
; 335  : 			c5 25 ef 9b ff ff ff ff 
; 336  : 			c5 1d ef a3 ff ff ff ff 
; 337  : 			c5 15 ef ab ff ff ff ff 
; 338  : 			c5 0d ef b3 ff ff ff ff 
; 339  : 			c5 05 ef bb ff ff ff ff 
; 340  : 		*/
; 341  : 		for (; 
; 342  : 				   *(p + 0) != 0xc5
; 343  : 				|| *(p + 2) != 0xef
; 344  : 				|| !(   (*(p + 1) == 0xf9 && *(p + 3) == 0x83)
; 345  : 					 || (*(p + 1) == 0xf1 && *(p + 3) == 0x8b)
; 346  : 					 || (*(p + 1) == 0xe9 && *(p + 3) == 0x93)
; 347  : 					 || (*(p + 1) == 0xe1 && *(p + 3) == 0x9b)
; 348  : 					 || (*(p + 1) == 0xd9 && *(p + 3) == 0xa3)
; 349  : 					 || (*(p + 1) == 0xd1 && *(p + 3) == 0xab)
; 350  : 					 || (*(p + 1) == 0x29 && *(p + 3) == 0x93)
; 351  : 					 
; 352  : 					 || (*(p + 1) == 0xfd && *(p + 3) == 0x83)
; 353  : 					 || (*(p + 1) == 0xf5 && *(p + 3) == 0x8b)
; 354  : 					 || (*(p + 1) == 0xed && *(p + 3) == 0x93)
; 355  : 					 || (*(p + 1) == 0xe5 && *(p + 3) == 0x9b)
; 356  : 					 || (*(p + 1) == 0xdd && *(p + 3) == 0xa3)
; 357  : 					 || (*(p + 1) == 0xd5 && *(p + 3) == 0xab)
; 358  : 					 || (*(p + 1) == 0x2d && *(p + 3) == 0x93));
; 359  : 				++p)

	cmp	BYTE PTR [rax], 197			; 000000c5H
	jne	$LN18@DES_Rewrit
	cmp	BYTE PTR [rax+2], 239			; 000000efH
	jne	$LN18@DES_Rewrit
	movzx	ecx, BYTE PTR [rax+1]
	cmp	cl, 249					; 000000f9H
	jne	SHORT $LN15@DES_Rewrit
	cmp	BYTE PTR [rax+3], 131			; 00000083H
	je	$LN17@DES_Rewrit
$LN15@DES_Rewrit:
	cmp	cl, 241					; 000000f1H
	jne	SHORT $LN14@DES_Rewrit
	cmp	BYTE PTR [rax+3], 139			; 0000008bH
	je	$LN17@DES_Rewrit
$LN14@DES_Rewrit:
	cmp	cl, 233					; 000000e9H
	jne	SHORT $LN13@DES_Rewrit
	cmp	BYTE PTR [rax+3], 147			; 00000093H
	je	SHORT $LN17@DES_Rewrit
$LN13@DES_Rewrit:
	cmp	cl, 225					; 000000e1H
	jne	SHORT $LN12@DES_Rewrit
	cmp	BYTE PTR [rax+3], 155			; 0000009bH
	je	SHORT $LN17@DES_Rewrit
$LN12@DES_Rewrit:
	cmp	cl, 217					; 000000d9H
	jne	SHORT $LN11@DES_Rewrit
	cmp	BYTE PTR [rax+3], 163			; 000000a3H
	je	SHORT $LN17@DES_Rewrit
$LN11@DES_Rewrit:
	cmp	cl, 209					; 000000d1H
	jne	SHORT $LN10@DES_Rewrit
	cmp	BYTE PTR [rax+3], 171			; 000000abH
	je	SHORT $LN17@DES_Rewrit
$LN10@DES_Rewrit:
	cmp	cl, 41					; 00000029H
	jne	SHORT $LN9@DES_Rewrit
	cmp	BYTE PTR [rax+3], 147			; 00000093H
	je	SHORT $LN17@DES_Rewrit
$LN9@DES_Rewrit:
	cmp	cl, 253					; 000000fdH
	jne	SHORT $LN8@DES_Rewrit
	cmp	BYTE PTR [rax+3], 131			; 00000083H
	je	SHORT $LN17@DES_Rewrit
$LN8@DES_Rewrit:
	cmp	cl, 245					; 000000f5H
	jne	SHORT $LN7@DES_Rewrit
	cmp	BYTE PTR [rax+3], 139			; 0000008bH
	je	SHORT $LN17@DES_Rewrit
$LN7@DES_Rewrit:
	cmp	cl, 237					; 000000edH
	jne	SHORT $LN6@DES_Rewrit
	cmp	BYTE PTR [rax+3], 147			; 00000093H
	je	SHORT $LN17@DES_Rewrit
$LN6@DES_Rewrit:
	cmp	cl, 229					; 000000e5H
	jne	SHORT $LN5@DES_Rewrit
	cmp	BYTE PTR [rax+3], 155			; 0000009bH
	je	SHORT $LN17@DES_Rewrit
$LN5@DES_Rewrit:
	cmp	cl, 221					; 000000ddH
	jne	SHORT $LN4@DES_Rewrit
	cmp	BYTE PTR [rax+3], 163			; 000000a3H
	je	SHORT $LN17@DES_Rewrit
$LN4@DES_Rewrit:
	cmp	cl, 213					; 000000d5H
	jne	SHORT $LN3@DES_Rewrit
	cmp	BYTE PTR [rax+3], 171			; 000000abH
	je	SHORT $LN17@DES_Rewrit
$LN3@DES_Rewrit:
	cmp	cl, 45					; 0000002dH
	jne	SHORT $LN18@DES_Rewrit
	cmp	BYTE PTR [rax+3], 147			; 00000093H
	jne	SHORT $LN18@DES_Rewrit
$LN17@DES_Rewrit:
	movsxd	rcx, DWORD PTR [r8]

; 360  : 			;
; 361  : 		p+= 4;
; 362  : 
; 363  : 		if (rewriteTable[i] != SKIP)

	cmp	ecx, 256				; 00000100H
	je	SHORT $LN1@DES_Rewrit

; 364  : 			*(__int32 *)p = context->expansionFunction[rewriteTable[i]] * (VECTOR_SIZE / 2);

	movzx	edx, BYTE PTR [rcx+r9]
	shl	edx, 4
	mov	DWORD PTR [rax+4], edx
$LN1@DES_Rewrit:

; 365  : 		p += 4;

	add	r8, 4
	add	rax, 8
	cmp	DWORD PTR [r8], 0
	jge	$LL22@DES_Rewrit
$LN41@DES_Rewrit:

; 366  : 	}
; 367  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 136				; 00000088H
	ret	0
$LN18@DES_Rewrit:

; 303  : 		/*
; 304  : 			c5 f9 ef 83 ff ff ff ff 
; 305  : 			c5 f1 ef 8b ff ff ff ff 
; 306  : 			c5 e9 ef 93 ff ff ff ff 
; 307  : 			c5 e1 ef 9b ff ff ff ff 
; 308  : 			c5 d9 ef a3 ff ff ff ff 
; 309  : 			c5 d1 ef ab ff ff ff ff 
; 310  : 
; 311  : 			c5 c9 ef b3 ff ff ff ff 
; 312  : 			c5 c1 ef bb ff ff ff ff 
; 313  : 			c5 39 ef 83 ff ff ff ff 
; 314  : 			c5 31 ef 8b ff ff ff ff 
; 315  : 			c5 29 ef 93 ff ff ff ff xmm10
; 316  : 			c5 21 ef 9b ff ff ff ff 
; 317  : 			c5 19 ef a3 ff ff ff ff 
; 318  : 			c5 11 ef ab ff ff ff ff 
; 319  : 			c5 09 ef b3 ff ff ff ff 
; 320  : 			c5 01 ef bb ff ff ff ff
; 321  : 		*/
; 322  : 		/*
; 323  : 			c5 fd ef 83 ff ff ff ff 
; 324  : 			c5 f5 ef 8b ff ff ff ff 
; 325  : 			c5 ed ef 93 ff ff ff ff 
; 326  : 			c5 e5 ef 9b ff ff ff ff 
; 327  : 			c5 dd ef a3 ff ff ff ff 
; 328  : 			c5 d5 ef ab ff ff ff ff 
; 329  : 
; 330  : 			c5 cd ef b3 ff ff ff ff 
; 331  : 			c5 c5 ef bb ff ff ff ff 
; 332  : 			c5 3d ef 83 ff ff ff ff 
; 333  : 			c5 35 ef 8b ff ff ff ff 
; 334  : 			c5 2d ef 93 ff ff ff ff ymm10
; 335  : 			c5 25 ef 9b ff ff ff ff 
; 336  : 			c5 1d ef a3 ff ff ff ff 
; 337  : 			c5 15 ef ab ff ff ff ff 
; 338  : 			c5 0d ef b3 ff ff ff ff 
; 339  : 			c5 05 ef bb ff ff ff ff 
; 340  : 		*/
; 341  : 		for (; 
; 342  : 				   *(p + 0) != 0xc5
; 343  : 				|| *(p + 2) != 0xef
; 344  : 				|| !(   (*(p + 1) == 0xf9 && *(p + 3) == 0x83)
; 345  : 					 || (*(p + 1) == 0xf1 && *(p + 3) == 0x8b)
; 346  : 					 || (*(p + 1) == 0xe9 && *(p + 3) == 0x93)
; 347  : 					 || (*(p + 1) == 0xe1 && *(p + 3) == 0x9b)
; 348  : 					 || (*(p + 1) == 0xd9 && *(p + 3) == 0xa3)
; 349  : 					 || (*(p + 1) == 0xd1 && *(p + 3) == 0xab)
; 350  : 					 || (*(p + 1) == 0x29 && *(p + 3) == 0x93)
; 351  : 					 
; 352  : 					 || (*(p + 1) == 0xfd && *(p + 3) == 0x83)
; 353  : 					 || (*(p + 1) == 0xf5 && *(p + 3) == 0x8b)
; 354  : 					 || (*(p + 1) == 0xed && *(p + 3) == 0x93)
; 355  : 					 || (*(p + 1) == 0xe5 && *(p + 3) == 0x9b)
; 356  : 					 || (*(p + 1) == 0xdd && *(p + 3) == 0xa3)
; 357  : 					 || (*(p + 1) == 0xd5 && *(p + 3) == 0xab)
; 358  : 					 || (*(p + 1) == 0x2d && *(p + 3) == 0x93));
; 359  : 				++p)

	inc	rax
	jmp	$LL22@DES_Rewrit
?DES_RewriteCrypt25_x64_AVX2@@YAXPEAUDES_Context@@@Z ENDP ; DES_RewriteCrypt25_x64_AVX2
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\github\merikens-tripcode-engine\sourcefiles\cpu10.h
;	COMDAT ?DES_SetSalt@@YAXPEAUDES_Context@@H@Z
_TEXT	SEGMENT
context$ = 48
salt$ = 56
?DES_SetSalt@@YAXPEAUDES_Context@@H@Z PROC		; DES_SetSalt, COMDAT

; 370  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 371  : 	int32_t mask;
; 372  : 	int32_t src, dst;
; 373  : 
; 374  : 	mask = 1;
; 375  : 	for (dst = 0; dst < 48; dst++) {

	mov	r10, -24
	mov	esi, 1
	mov	rbx, rcx
	xor	r9d, r9d
	sub	r10, rcx
	mov	edi, edx
	mov	r11, rcx
	mov	r8d, esi
	mov	rax, rcx
	neg	rbx
	lea	rbp, OFFSET FLAT:?expansionTable@@3QBEB	; expansionTable
	npad	2
$LL10@DES_SetSal:

; 376  : 		if (dst == 24) mask = 1;

	cmp	r9d, 24
	cmove	r8d, esi

; 377  : 
; 378  : 		if (salt & mask) {

	test	r8d, edi
	je	SHORT $LN6@DES_SetSal

; 379  : 			if (dst < 24) src = dst + 24; else src = dst - 24;

	cmp	r9d, 24
	jge	SHORT $LN5@DES_SetSal
	lea	rcx, QWORD PTR [r10+48]
	add	rcx, rax
	jmp	SHORT $LN3@DES_SetSal
$LN5@DES_SetSal:
	lea	rcx, QWORD PTR [r10+rax]
	jmp	SHORT $LN3@DES_SetSal
$LN6@DES_SetSal:

; 380  : 		} else src = dst;

	lea	rcx, QWORD PTR [rbx+rax]
$LN3@DES_SetSal:

; 381  : 
; 382  : 		context->expansionFunction[dst     ] = expansionTable[src];

	movzx	edx, BYTE PTR [rcx+rbp]
	inc	r9d
	inc	rax

; 383  : 		context->expansionFunction[dst + 48] = expansionTable[src] + 32;
; 384  : 
; 385  : #ifdef USE_ASSEMBLY_FUNCTION
; 386  : 		// Multiply the values for the assembly version of DES_Crypt25().
; 387  : 		context->expansionFunction[dst     ] *= 2;

	movzx	ecx, dl

; 388  : 		context->expansionFunction[dst + 48] *= 2;

	add	dl, 32					; 00000020H

; 389  : #endif
; 390  : 
; 391  : 		mask <<= 1;

	add	r8d, r8d
	add	dl, dl
	add	cl, cl
	mov	BYTE PTR [rax+47], dl
	mov	BYTE PTR [rax-1], cl
	cmp	r9d, 48					; 00000030H
	jl	SHORT $LL10@DES_SetSal

; 392  : 	}
; 393  : 
; 394  : #ifdef USE_ASSEMBLY_FUNCTION
; 395  : 	if (context->useAVX2) {

	cmp	DWORD PTR [r11+28940], 0

; 396  : 		DES_RewriteCrypt25_x64_AVX2(context);

	mov	rcx, r11
	je	SHORT $LN2@DES_SetSal
	call	?DES_RewriteCrypt25_x64_AVX2@@YAXPEAUDES_Context@@@Z ; DES_RewriteCrypt25_x64_AVX2

; 397  : 	} else {

	jmp	SHORT $LN1@DES_SetSal
$LN2@DES_SetSal:

; 398  : 		DES_RewriteCrypt25(context);

	call	?DES_RewriteCrypt25@@YAXPEAUDES_Context@@@Z ; DES_RewriteCrypt25
$LN1@DES_SetSal:

; 399  : 	}
; 400  : #endif
; 401  : 
; 402  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?DES_SetSalt@@YAXPEAUDES_Context@@H@Z ENDP		; DES_SetSalt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\github\merikens-tripcode-engine\sourcefiles\cpu10.h
;	COMDAT ?DES_Crypt@@YAXPEAUDES_Context@@@Z
_TEXT	SEGMENT
context$ = 8
?DES_Crypt@@YAXPEAUDES_Context@@@Z PROC			; DES_Crypt, COMDAT

; 450  : 	if (!context->useAVX2) {

	xor	r9d, r9d
	mov	rdx, rcx
	cmp	DWORD PTR [rcx+28940], r9d
	jne	$LN22@DES_Crypt

; 451  : 		for (int32_t i = 0; i < 0x300; ++i)

	mov	r8d, r9d
	sub	rcx, -128				; ffffffffffffff80H
	lea	r10, OFFSET FLAT:keySchedule+1
$LL9@DES_Crypt:

; 452  : 			context->expandedKeySchedule[i] = context->keys[keySchedule[i]];

	movzx	eax, BYTE PTR [r8+r10-1]
	add	r8, 6
	lea	rcx, QWORD PTR [rcx+192]
	add	rax, 848				; 00000350H
	shl	rax, 5
	movups	xmm0, XMMWORD PTR [rax+rdx]
	movups	XMMWORD PTR [rcx-224], xmm0
	movups	xmm1, XMMWORD PTR [rax+rdx+16]
	movzx	eax, BYTE PTR [r8+r10-6]
	add	rax, 848				; 00000350H
	shl	rax, 5
	movups	XMMWORD PTR [rcx-208], xmm1
	movups	xmm0, XMMWORD PTR [rax+rdx]
	movups	XMMWORD PTR [rcx-192], xmm0
	movups	xmm1, XMMWORD PTR [rax+rdx+16]
	movzx	eax, BYTE PTR [r8+r10-5]
	add	rax, 848				; 00000350H
	shl	rax, 5
	movups	XMMWORD PTR [rcx-176], xmm1
	movups	xmm0, XMMWORD PTR [rax+rdx]
	movups	XMMWORD PTR [rcx-160], xmm0
	movups	xmm1, XMMWORD PTR [rax+rdx+16]
	movzx	eax, BYTE PTR [r8+r10-4]
	add	rax, 848				; 00000350H
	shl	rax, 5
	movups	XMMWORD PTR [rcx-144], xmm1
	movups	xmm0, XMMWORD PTR [rax+rdx]
	movups	XMMWORD PTR [rcx-128], xmm0
	movups	xmm1, XMMWORD PTR [rax+rdx+16]
	movzx	eax, BYTE PTR [r8+r10-3]
	add	rax, 848				; 00000350H
	shl	rax, 5
	movups	XMMWORD PTR [rcx-112], xmm1
	movups	xmm0, XMMWORD PTR [rax+rdx]
	movups	XMMWORD PTR [rcx-96], xmm0
	movups	xmm1, XMMWORD PTR [rax+rdx+16]
	movzx	eax, BYTE PTR [r8+r10-2]
	add	rax, 848				; 00000350H
	shl	rax, 5
	movups	XMMWORD PTR [rcx-80], xmm1
	movups	xmm0, XMMWORD PTR [rax+rdx]
	movups	XMMWORD PTR [rcx-64], xmm0
	movups	xmm1, XMMWORD PTR [rax+rdx+16]
	movups	XMMWORD PTR [rcx-48], xmm1
	cmp	r8, 768					; 00000300H
	jl	$LL9@DES_Crypt
$LN22@DES_Crypt:

; 453  : 	}
; 454  : 
; 455  : 	for (int32_t i = 0; i < NUM_DATA_BLOCKS; ++i) {

	lea	rax, QWORD PTR [rdx+24672]

; 456  : 		for (int32_t j = 0; j < NUM_ELEMENTS_IN_VECTOR; ++j)
; 457  : 			context->dataBlocks[i].VECTOR_ELEMENTS[j] = 0;

	mov	ecx, 32					; 00000020H
	npad	3
$LL26@DES_Crypt:
	mov	QWORD PTR [rax], r9
	mov	QWORD PTR [rax+8], r9
	mov	QWORD PTR [rax+16], r9
	lea	rax, QWORD PTR [rax+64]
	mov	QWORD PTR [rax-40], r9
	mov	QWORD PTR [rax-32], r9
	mov	QWORD PTR [rax-24], r9
	mov	QWORD PTR [rax-16], r9
	mov	QWORD PTR [rax-8], r9
	dec	rcx
	jne	SHORT $LL26@DES_Crypt

; 458  : 	}
; 459  : 
; 460  : #ifdef USE_ASSEMBLY_FUNCTION
; 461  :  	(*(context->crypt25))(context);

	mov	rcx, rdx
	rex_jmp	QWORD PTR [rdx+28928]
?DES_Crypt@@YAXPEAUDES_Context@@@Z ENDP			; DES_Crypt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\github\merikens-tripcode-engine\sourcefiles\cpu10.h
;	COMDAT ?DES_GetTripcodeChunks@@YAXPEAUDES_Context@@HPEAIH@Z
_TEXT	SEGMENT
context$ = 8
tripcodeIndex$ = 16
tripcodeChunkArray$ = 24
searchMode$dead$ = 32
?DES_GetTripcodeChunks@@YAXPEAUDES_Context@@HPEAIH@Z PROC ; DES_GetTripcodeChunks, COMDAT

; 486  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rdi
	mov	eax, DWORD PTR ?searchMode@@3HA		; searchMode
	mov	rbx, rcx

; 487  : 	// Perform the final permutation here.
; 488  : 	if (searchMode == SEARCH_MODE_FORWARD_MATCHING) {
; 489  : 		tripcodeChunkArray[0] =   GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 63, 31, 38,  6, 46, 14, 4)
; 490  : 								| GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 54, 22, 62, 30, 37,  5, 3)
; 491  : 								| GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 45, 13, 53, 21, 61, 29, 2)
; 492  : 								| GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 36,  4, 44, 12, 52, 20, 1)
; 493  : 								| GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 60, 28, 35,  3, 43, 11, 0);

	mov	r10d, 1
	mov	ecx, edx
	lea	r11d, QWORD PTR [r10-1]
	mov	rdi, r8
	and	ecx, 31
	shl	r10d, cl
	test	eax, eax
	jne	$LN6@DES_GetTri
	mov	eax, r11d
	mov	ecx, r11d
	movsxd	rdx, edx
	sar	rdx, 5
	test	DWORD PTR [rbx+rdx*4+26688], r10d
	setne	cl
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25664], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25888], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+24864], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+26144], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25120], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+26400], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25376], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+26656], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25632], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25856], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+24832], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+26112], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25088], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+26368], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25344], r10d
	setne	al
	or	ecx, eax
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+26624], r10d
	mov	eax, r11d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25600], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25824], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+24800], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+26080], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25056], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+26336], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25312], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+26592], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25568], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25792], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+24768], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+26048], r10d
	setne	al
	or	ecx, eax
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25024], r10d
	setne	r11b
	or	ecx, r11d
	mov	DWORD PTR [r8], ecx

; 522  : 	}
; 523  : }

	mov	rbx, QWORD PTR [rsp+8]
	mov	rdi, QWORD PTR [rsp+16]
	ret	0
$LN6@DES_GetTri:

; 494  : 	} else if (searchMode == SEARCH_MODE_BACKWARD_MATCHING) {

	cmp	eax, 1
	jne	$LN4@DES_GetTri

; 495  : 		tripcodeChunkArray[0] =   GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 51, 19, 59, 27, 34,  2, 4)
; 496  : 		                        | GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 42, 10, 50, 18, 58, 26, 3)
; 497  : 		                        | GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 33,  1, 41,  9, 49, 17, 2)
; 498  : 		                        | GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 57, 25, 32,  0, 40,  8, 1)
; 499  : 		                        | GET_TRIPCODE_CHAR_INDEX_LAST(context->dataBlocks, tripcodeIndex, 48, 16, 56, 24);

	movsxd	rcx, edx
	mov	eax, r11d
	mov	edx, r11d
	sar	rcx, 5
	test	DWORD PTR [rbx+rcx*4+26304], r10d
	setne	dl
	add	edx, edx
	test	DWORD PTR [rbx+rcx*4+25280], r10d
	setne	al
	or	edx, eax
	mov	eax, r11d
	add	edx, edx
	test	DWORD PTR [rbx+rcx*4+26560], r10d
	setne	al
	or	edx, eax
	mov	eax, r11d
	add	edx, edx
	test	DWORD PTR [rbx+rcx*4+25536], r10d
	setne	al
	or	edx, eax
	mov	eax, r11d
	add	edx, edx
	test	DWORD PTR [rbx+rcx*4+25760], r10d
	setne	al
	or	edx, eax
	mov	eax, r11d
	add	edx, edx
	test	DWORD PTR [rbx+rcx*4+24736], r10d
	setne	al
	or	edx, eax
	mov	eax, r11d
	add	edx, edx
	test	DWORD PTR [rbx+rcx*4+26016], r10d
	setne	al
	or	edx, eax
	mov	eax, r11d
	add	edx, edx
	test	DWORD PTR [rbx+rcx*4+24992], r10d
	setne	al
	or	edx, eax
	mov	eax, r11d
	add	edx, edx
	test	DWORD PTR [rbx+rcx*4+26272], r10d
	setne	al
	or	edx, eax
	mov	eax, r11d
	add	edx, edx
	test	DWORD PTR [rbx+rcx*4+25248], r10d
	setne	al
	or	edx, eax
	mov	eax, r11d
	add	edx, edx
	test	DWORD PTR [rbx+rcx*4+26528], r10d
	setne	al
	or	edx, eax
	mov	eax, r11d
	add	edx, edx
	test	DWORD PTR [rbx+rcx*4+25504], r10d
	setne	al
	or	edx, eax
	mov	eax, r11d
	add	edx, edx
	test	DWORD PTR [rbx+rcx*4+25728], r10d
	setne	al
	or	edx, eax
	mov	eax, r11d
	add	edx, edx
	test	DWORD PTR [rbx+rcx*4+24704], r10d
	setne	al
	or	edx, eax
	mov	eax, r11d
	add	edx, edx
	test	DWORD PTR [rbx+rcx*4+25984], r10d
	setne	al
	or	edx, eax
	mov	eax, r11d
	add	edx, edx
	test	DWORD PTR [rbx+rcx*4+24960], r10d
	setne	al
	or	edx, eax
	add	edx, edx
	test	DWORD PTR [rbx+rcx*4+26240], r10d
	mov	eax, r11d
	setne	al
	or	edx, eax
	mov	eax, r11d
	add	edx, edx
	test	DWORD PTR [rbx+rcx*4+25216], r10d
	setne	al
	or	edx, eax
	mov	eax, r11d
	add	edx, edx
	test	DWORD PTR [rbx+rcx*4+26496], r10d
	setne	al
	or	edx, eax
	mov	eax, r11d
	add	edx, edx
	test	DWORD PTR [rbx+rcx*4+25472], r10d
	setne	al
	or	edx, eax
	mov	eax, r11d
	add	edx, edx
	test	DWORD PTR [rbx+rcx*4+25696], r10d
	setne	al
	or	edx, eax
	mov	eax, r11d
	add	edx, edx
	test	DWORD PTR [rbx+rcx*4+24672], r10d
	setne	al
	or	edx, eax
	mov	eax, r11d
	add	edx, edx
	test	DWORD PTR [rbx+rcx*4+25952], r10d
	setne	al
	or	edx, eax
	mov	eax, r11d
	add	edx, edx
	test	DWORD PTR [rbx+rcx*4+24928], r10d
	setne	al
	or	edx, eax
	mov	eax, r11d
	add	edx, edx
	test	DWORD PTR [rbx+rcx*4+26208], r10d
	setne	al
	or	edx, eax
	mov	eax, r11d
	add	edx, edx
	test	DWORD PTR [rbx+rcx*4+25184], r10d
	setne	al
	or	edx, eax
	mov	eax, r11d
	add	edx, edx
	test	DWORD PTR [rbx+rcx*4+26464], r10d
	setne	al
	or	edx, eax
	add	edx, edx
	test	DWORD PTR [rbx+rcx*4+25440], r10d
	setne	r11b
	or	edx, r11d
	shl	edx, 2
	mov	DWORD PTR [r8], edx

; 522  : 	}
; 523  : }

	mov	rbx, QWORD PTR [rsp+8]
	mov	rdi, QWORD PTR [rsp+16]
	ret	0
$LN4@DES_GetTri:

; 500  : 	} else if (searchMode == SEARCH_MODE_FORWARD_AND_BACKWARD_MATCHING) {

	cmp	eax, 2

; 501  : 		tripcodeChunkArray[0] =   GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 63, 31, 38,  6, 46, 14, 4)
; 502  : 								| GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 54, 22, 62, 30, 37,  5, 3)
; 503  : 								| GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 45, 13, 53, 21, 61, 29, 2)
; 504  : 								| GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 36,  4, 44, 12, 52, 20, 1)
; 505  : 								| GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 60, 28, 35,  3, 43, 11, 0);

	mov	ecx, r11d
	mov	eax, r11d
	jne	$LN2@DES_GetTri
	movsxd	rdx, edx
	sar	rdx, 5
	test	DWORD PTR [rbx+rdx*4+26688], r10d
	setne	cl
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25664], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25888], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+24864], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+26144], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25120], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+26400], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25376], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+26656], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25632], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25856], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+24832], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+26112], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25088], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+26368], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25344], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+26624], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25600], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25824], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+24800], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+26080], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25056], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+26336], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25312], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+26592], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25568], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25792], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+24768], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+26048], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25024], r10d
	setne	al
	or	ecx, eax

; 506  : 		tripcodeChunkArray[1] =   GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 51, 19, 59, 27, 34,  2, 4)
; 507  : 								| GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 42, 10, 50, 18, 58, 26, 3)
; 508  : 								| GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 33,  1, 41,  9, 49, 17, 2)
; 509  : 								| GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 57, 25, 32,  0, 40,  8, 1)
; 510  : 								| GET_TRIPCODE_CHAR_INDEX_LAST(context->dataBlocks, tripcodeIndex, 48, 16, 56, 24);

	test	DWORD PTR [rbx+rdx*4+26304], r10d
	mov	eax, r11d
	mov	DWORD PTR [r8], ecx
	mov	ecx, r11d
	setne	cl
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25280], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+26560], r10d
	setne	al
	or	ecx, eax
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25536], r10d
	mov	eax, r11d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25760], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+24736], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+26016], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+24992], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+26272], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25248], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+26528], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25504], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25728], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+24704], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25984], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+24960], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+26240], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25216], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+26496], r10d
	setne	al
	or	ecx, eax
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25472], r10d
	mov	eax, r11d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25696], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+24672], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25952], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+24928], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+26208], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25184], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+26464], r10d
	setne	al
	or	ecx, eax
	add	ecx, ecx
	test	DWORD PTR [rbx+rdx*4+25440], r10d
	setne	r11b
	or	ecx, r11d
	shl	ecx, 2
	mov	DWORD PTR [r8+4], ecx

; 522  : 	}
; 523  : }

	mov	rbx, QWORD PTR [rsp+8]
	mov	rdi, QWORD PTR [rsp+16]
	ret	0
$LN2@DES_GetTri:

; 511  : 	} else {
; 512  : 		tripcodeChunkArray[0] =   GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 63, 31, 38,  6, 46, 14, 4)
; 513  : 								| GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 54, 22, 62, 30, 37,  5, 3)
; 514  : 								| GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 45, 13, 53, 21, 61, 29, 2)
; 515  : 								| GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 36,  4, 44, 12, 52, 20, 1)
; 516  : 								| GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 60, 28, 35,  3, 43, 11, 0);

	movsxd	r9, edx
	sar	r9, 5
	test	DWORD PTR [rbx+r9*4+26688], r10d
	setne	cl
	add	ecx, ecx
	test	DWORD PTR [rbx+r9*4+25664], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+r9*4+25888], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+r9*4+24864], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+r9*4+26144], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+r9*4+25120], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+r9*4+26400], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+r9*4+25376], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+r9*4+26656], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+r9*4+25632], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+r9*4+25856], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+r9*4+24832], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+r9*4+26112], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+r9*4+25088], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+r9*4+26368], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+r9*4+25344], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+r9*4+26624], r10d
	setne	al

; 517  : 		tripcodeChunkArray[1] = ((tripcodeChunkArray[0] << 6) & 0x3fffffff) | GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 51, 19, 59, 27, 34,  2, 0);

	mov	edx, r11d
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+r9*4+25600], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+r9*4+25824], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+r9*4+24800], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+r9*4+26080], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+r9*4+25056], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+r9*4+26336], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+r9*4+25312], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+r9*4+26592], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+r9*4+25568], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+r9*4+25792], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+r9*4+24768], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+r9*4+26048], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+r9*4+25024], r10d
	setne	al
	or	ecx, eax
	test	DWORD PTR [rbx+r9*4+26304], r10d
	mov	eax, r11d
	setne	dl
	mov	DWORD PTR [r8], ecx
	add	edx, edx
	test	DWORD PTR [rbx+r9*4+25280], r10d
	setne	al
	or	edx, eax
	mov	eax, r11d
	add	edx, edx
	test	DWORD PTR [rbx+r9*4+26560], r10d
	setne	al
	or	edx, eax
	add	edx, edx
	test	DWORD PTR [rbx+r9*4+25536], r10d
	mov	eax, r11d
	setne	al
	or	edx, eax
	mov	eax, r11d
	add	edx, edx
	test	DWORD PTR [rbx+r9*4+25760], r10d
	setne	al
	or	edx, eax
	mov	eax, r11d
	add	edx, edx
	test	DWORD PTR [rbx+r9*4+24736], r10d
	setne	al
	and	ecx, 16777215				; 00ffffffH
	or	edx, eax
	shl	ecx, 6

; 518  : 		tripcodeChunkArray[2] = ((tripcodeChunkArray[1] << 6) & 0x3fffffff) | GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 42, 10, 50, 18, 58, 26, 0);

	mov	eax, r11d
	or	edx, ecx
	test	DWORD PTR [rbx+r9*4+26016], r10d
	mov	ecx, r11d
	setne	cl
	mov	DWORD PTR [r8+4], edx
	add	ecx, ecx
	test	DWORD PTR [rbx+r9*4+24992], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+r9*4+26272], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+r9*4+25248], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+r9*4+26528], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+r9*4+25504], r10d
	setne	al
	and	edx, 16777215				; 00ffffffH
	or	ecx, eax
	shl	edx, 6

; 519  : 		tripcodeChunkArray[3] = ((tripcodeChunkArray[2] << 6) & 0x3fffffff) | GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 33,  1, 41,  9, 49, 17, 0);

	mov	eax, r11d
	or	ecx, edx
	test	DWORD PTR [rbx+r9*4+25728], r10d
	mov	DWORD PTR [r8+8], ecx
	mov	r8d, r11d
	setne	r8b
	add	r8d, r8d
	test	DWORD PTR [rbx+r9*4+24704], r10d
	setne	al
	or	r8d, eax
	mov	eax, r11d
	add	r8d, r8d
	test	DWORD PTR [rbx+r9*4+25984], r10d
	setne	al
	or	r8d, eax
	mov	eax, r11d
	add	r8d, r8d
	test	DWORD PTR [rbx+r9*4+24960], r10d
	setne	al
	or	r8d, eax
	mov	eax, r11d
	add	r8d, r8d
	test	DWORD PTR [rbx+r9*4+26240], r10d
	setne	al
	or	r8d, eax
	mov	eax, r11d
	add	r8d, r8d
	test	DWORD PTR [rbx+r9*4+25216], r10d
	setne	al
	and	ecx, 16777215				; 00ffffffH
	or	r8d, eax
	shl	ecx, 6
	or	r8d, ecx

; 520  : 		tripcodeChunkArray[4] = ((tripcodeChunkArray[3] << 6) & 0x3fffffff) | GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 57, 25, 32,  0, 40,  8, 0);

	test	DWORD PTR [rbx+r9*4+26496], r10d
	mov	eax, r11d
	mov	edx, r11d
	setne	dl
	mov	DWORD PTR [rdi+12], r8d
	add	edx, edx
	test	DWORD PTR [rbx+r9*4+25472], r10d

; 521  : 		tripcodeChunkArray[5] = ((tripcodeChunkArray[4] << 6) & 0x3fffffff) | GET_TRIPCODE_CHAR_INDEX_LAST(context->dataBlocks, tripcodeIndex, 48, 16, 56, 24);

	mov	ecx, r11d
	setne	al
	or	edx, eax
	mov	eax, r11d
	add	edx, edx
	test	DWORD PTR [rbx+r9*4+25696], r10d
	setne	al
	or	edx, eax
	mov	eax, r11d
	add	edx, edx
	test	DWORD PTR [rbx+r9*4+24672], r10d
	setne	al
	or	edx, eax
	mov	eax, r11d
	add	edx, edx
	test	DWORD PTR [rbx+r9*4+25952], r10d
	setne	al
	or	edx, eax
	mov	eax, r11d
	add	edx, edx
	test	DWORD PTR [rbx+r9*4+24928], r10d
	setne	al
	and	r8d, 16777215				; 00ffffffH
	or	edx, eax
	shl	r8d, 6
	mov	eax, r11d
	or	edx, r8d
	test	DWORD PTR [rbx+r9*4+26208], r10d
	setne	cl
	mov	DWORD PTR [rdi+16], edx
	add	ecx, ecx
	test	DWORD PTR [rbx+r9*4+25184], r10d
	setne	al
	or	ecx, eax
	mov	eax, r11d
	add	ecx, ecx
	test	DWORD PTR [rbx+r9*4+26464], r10d
	setne	al
	or	ecx, eax
	add	ecx, ecx
	test	DWORD PTR [rbx+r9*4+25440], r10d

; 522  : 	}
; 523  : }

	mov	rbx, QWORD PTR [rsp+8]
	setne	r11b
	and	edx, 16777215				; 00ffffffH
	or	ecx, r11d
	shl	edx, 6
	shl	ecx, 2
	or	ecx, edx
	mov	DWORD PTR [rdi+20], ecx
	mov	rdi, QWORD PTR [rsp+16]
	ret	0
?DES_GetTripcodeChunks@@YAXPEAUDES_Context@@HPEAIH@Z ENDP ; DES_GetTripcodeChunks
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\github\merikens-tripcode-engine\sourcefiles\cpu10.h
;	COMDAT ?DES_GetTripcode@@YAPEAEPEAUDES_Context@@HPEAE@Z
_TEXT	SEGMENT
context$ = 8
tripcodeIndex$ = 16
tripcode$ = 24
?DES_GetTripcode@@YAPEAEPEAUDES_Context@@HPEAE@Z PROC	; DES_GetTripcode, COMDAT

; 526  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	r11, rcx

; 527  : 	// Perform the final permutation as necessary.
; 528  :   	tripcode[0] = DES_indexToCharTable[GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 63, 31, 38,  6, 46, 14, 0)];

	mov	ecx, edx
	movsxd	r9, edx
	and	ecx, 31
	sar	r9, 5
	mov	rbx, r8
	mov	r8d, 0
	mov	r10d, 1
	shl	r10d, cl
	mov	eax, r8d
	mov	edx, r8d
	test	DWORD PTR [r11+r9*4+26688], r10d
	setne	dl
	add	edx, edx
	test	DWORD PTR [r11+r9*4+25664], r10d
	setne	al
	or	edx, eax
	mov	eax, r8d
	add	edx, edx
	test	DWORD PTR [r11+r9*4+25888], r10d
	setne	al
	or	edx, eax
	mov	eax, r8d
	add	edx, edx
	test	DWORD PTR [r11+r9*4+24864], r10d
	setne	al
	or	edx, eax
	mov	eax, r8d
	add	edx, edx
	test	DWORD PTR [r11+r9*4+26144], r10d
	setne	al
	or	edx, eax
	mov	eax, r8d
	add	edx, edx
	test	DWORD PTR [r11+r9*4+25120], r10d
	setne	al
	movsxd	rcx, edx
	lea	rdx, OFFSET FLAT:DES_indexToCharTable
	or	rcx, rax
	movzx	eax, BYTE PTR [rcx+rdx]

; 529  :   	tripcode[1] = DES_indexToCharTable[GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 54, 22, 62, 30, 37,  5, 0)];

	mov	ecx, r8d
	mov	BYTE PTR [rbx], al
	test	DWORD PTR [r11+r9*4+26400], r10d
	mov	eax, r8d
	setne	cl
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+25376], r10d
	setne	al
	or	ecx, eax
	mov	eax, r8d
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+26656], r10d
	setne	al
	or	ecx, eax
	mov	eax, r8d
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+25632], r10d
	setne	al
	or	ecx, eax
	mov	eax, r8d
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+25856], r10d
	setne	al
	or	ecx, eax
	mov	eax, r8d
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+24832], r10d
	setne	al
	movsxd	rcx, ecx
	or	rcx, rax
	movzx	eax, BYTE PTR [rcx+rdx]

; 530  :   	tripcode[2] = DES_indexToCharTable[GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 45, 13, 53, 21, 61, 29, 0)];

	mov	ecx, r8d
	mov	BYTE PTR [rbx+1], al
	test	DWORD PTR [r11+r9*4+26112], r10d
	mov	eax, r8d
	setne	cl
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+25088], r10d
	setne	al
	or	ecx, eax
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+26368], r10d
	mov	eax, r8d
	setne	al
	or	ecx, eax
	mov	eax, r8d
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+25344], r10d
	setne	al
	or	ecx, eax
	mov	eax, r8d
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+26624], r10d
	setne	al
	or	ecx, eax
	mov	eax, r8d
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+25600], r10d
	setne	al
	movsxd	rcx, ecx
	or	rcx, rax
	movzx	eax, BYTE PTR [rcx+rdx]

; 531  :   	tripcode[3] = DES_indexToCharTable[GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 36,  4, 44, 12, 52, 20, 0)];

	mov	ecx, r8d
	mov	BYTE PTR [rbx+2], al
	test	DWORD PTR [r11+r9*4+25824], r10d
	mov	eax, r8d
	setne	cl
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+24800], r10d
	setne	al
	or	ecx, eax
	mov	eax, r8d
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+26080], r10d
	setne	al
	or	ecx, eax
	mov	eax, r8d
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+25056], r10d
	setne	al
	or	ecx, eax
	mov	eax, r8d
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+26336], r10d
	setne	al
	or	ecx, eax
	mov	eax, r8d
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+25312], r10d
	setne	al
	movsxd	rcx, ecx
	or	rcx, rax
	movzx	eax, BYTE PTR [rcx+rdx]

; 532  :   	tripcode[4] = DES_indexToCharTable[GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 60, 28, 35,  3, 43, 11, 0)];

	mov	ecx, r8d
	mov	BYTE PTR [rbx+3], al
	test	DWORD PTR [r11+r9*4+26592], r10d
	mov	eax, r8d
	setne	cl
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+25568], r10d
	setne	al
	or	ecx, eax
	mov	eax, r8d
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+25792], r10d
	setne	al
	or	ecx, eax
	mov	eax, r8d
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+24768], r10d
	setne	al
	or	ecx, eax
	mov	eax, r8d
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+26048], r10d
	setne	al
	or	ecx, eax
	mov	eax, r8d
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+25024], r10d
	setne	al
	movsxd	rcx, ecx
	or	rcx, rax
	movzx	eax, BYTE PTR [rcx+rdx]

; 533  :   	tripcode[5] = DES_indexToCharTable[GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 51, 19, 59, 27, 34,  2, 0)];

	mov	ecx, r8d
	mov	BYTE PTR [rbx+4], al
	test	DWORD PTR [r11+r9*4+26304], r10d
	mov	eax, r8d
	setne	cl
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+25280], r10d
	setne	al
	or	ecx, eax
	mov	eax, r8d
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+26560], r10d
	setne	al
	or	ecx, eax
	mov	eax, r8d
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+25536], r10d
	setne	al
	or	ecx, eax
	mov	eax, r8d
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+25760], r10d
	setne	al
	or	ecx, eax
	mov	eax, r8d
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+24736], r10d
	setne	al
	movsxd	rcx, ecx
	or	rcx, rax
	movzx	eax, BYTE PTR [rcx+rdx]

; 534  :   	tripcode[6] = DES_indexToCharTable[GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 42, 10, 50, 18, 58, 26, 0)];

	mov	ecx, r8d
	mov	BYTE PTR [rbx+5], al
	test	DWORD PTR [r11+r9*4+26016], r10d
	mov	eax, r8d
	setne	cl
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+24992], r10d
	setne	al
	or	ecx, eax
	mov	eax, r8d
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+26272], r10d
	setne	al
	or	ecx, eax
	mov	eax, r8d
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+25248], r10d
	setne	al
	or	ecx, eax
	mov	eax, r8d
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+26528], r10d
	setne	al
	or	ecx, eax
	mov	eax, r8d
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+25504], r10d
	setne	al
	movsxd	rcx, ecx
	or	rcx, rax
	movzx	eax, BYTE PTR [rcx+rdx]

; 535  :   	tripcode[7] = DES_indexToCharTable[GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 33,  1, 41,  9, 49, 17, 0)];

	mov	ecx, r8d
	mov	BYTE PTR [rbx+6], al
	test	DWORD PTR [r11+r9*4+25728], r10d
	mov	eax, r8d
	setne	cl
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+24704], r10d
	setne	al
	or	ecx, eax
	mov	eax, r8d
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+25984], r10d
	setne	al
	or	ecx, eax
	mov	eax, r8d
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+24960], r10d
	setne	al
	or	ecx, eax
	mov	eax, r8d
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+26240], r10d
	setne	al
	or	ecx, eax
	mov	eax, r8d
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+25216], r10d
	setne	al
	movsxd	rcx, ecx
	or	rcx, rax
	movzx	eax, BYTE PTR [rcx+rdx]

; 536  :   	tripcode[8] = DES_indexToCharTable[GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 57, 25, 32,  0, 40,  8, 0)];

	mov	ecx, r8d
	mov	BYTE PTR [rbx+7], al
	test	DWORD PTR [r11+r9*4+26496], r10d
	mov	eax, r8d
	setne	cl
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+25472], r10d
	setne	al
	or	ecx, eax
	mov	eax, r8d
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+25696], r10d
	setne	al
	or	ecx, eax
	mov	eax, r8d
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+24672], r10d
	setne	al
	or	ecx, eax
	mov	eax, r8d
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+25952], r10d
	setne	al
	or	ecx, eax
	mov	eax, r8d
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+24928], r10d
	setne	al
	movsxd	rcx, ecx
	or	rcx, rax
	movzx	eax, BYTE PTR [rcx+rdx]

; 537  : 	tripcode[9] = DES_indexToCharTable[GET_TRIPCODE_CHAR_INDEX_LAST(context->dataBlocks, tripcodeIndex, 48, 16, 56, 24)];

	mov	ecx, r8d
	mov	BYTE PTR [rbx+8], al
	test	DWORD PTR [r11+r9*4+26208], r10d
	mov	eax, r8d
	setne	cl
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+25184], r10d
	setne	al
	or	ecx, eax
	mov	eax, r8d
	add	ecx, ecx
	test	DWORD PTR [r11+r9*4+26464], r10d
	setne	al
	or	ecx, eax
	test	DWORD PTR [r11+r9*4+25440], r10d

; 538  :  	tripcode[10] = '\0';

	mov	BYTE PTR [rbx+10], 0
	lea	eax, DWORD PTR [rcx+rcx]
	setne	r8b
	or	eax, r8d
	shl	eax, 2
	cdqe
	movzx	eax, BYTE PTR [rax+rdx]
	mov	BYTE PTR [rbx+9], al

; 539  : 
; 540  : 	return tripcode;

	mov	rax, rbx

; 541  : }

	mov	rbx, QWORD PTR [rsp+8]
	ret	0
?DES_GetTripcode@@YAPEAEPEAUDES_Context@@HPEAE@Z ENDP	; DES_GetTripcode
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\github\merikens-tripcode-engine\sourcefiles\cpu10.h
; File z:\github\merikens-tripcode-engine\sourcefiles\main.cpp
; File z:\github\merikens-tripcode-engine\sourcefiles\cpu10.h
; File z:\github\merikens-tripcode-engine\sourcefiles\main.cpp
; File z:\github\merikens-tripcode-engine\sourcefiles\cpu10.h
; File z:\github\merikens-tripcode-engine\sourcefiles\main.cpp
; File z:\github\merikens-tripcode-engine\sourcefiles\cpu10.h
; File z:\github\merikens-tripcode-engine\sourcefiles\main.cpp
; File z:\github\merikens-tripcode-engine\sourcefiles\cpu10.h
;	COMDAT ?SearchForTripcodes@@YAIPEAUDES_Context@@@Z
_TEXT	SEGMENT
randomValue$1 = 32
tv11590 = 40
randomValue$2 = 48
tripcodeIndex$1$ = 52
numGeneratedTripcodes$1$ = 56
randomValue$3 = 60
indexKey4$1$ = 64
indexKey5$1$ = 68
randomValue$4 = 72
tableForKey6$1$ = 80
tableForKey5$1$ = 88
$T5 = 96
$T6 = 104
tableForKey4$1$ = 112
tv11573 = 120
tv11576 = 128
tv11591 = 136
generatedTripcodeChunkArray$ = 144
key$ = 176
tripcode$ = 192
__$ArrayPad$ = 208
context$ = 272
?SearchForTripcodes@@YAIPEAUDES_Context@@@Z PROC	; SearchForTripcodes, COMDAT

; 582  : {

	mov	r11, rsp
	push	rbp
	push	rbx
	push	r13
	push	r15
	lea	rbp, QWORD PTR [r11-95]
	sub	rsp, 232				; 000000e8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rbp-169], rax

; 591  : 	tripcode[lenTripcode] = '\0';

	movsxd	rax, DWORD PTR ?lenTripcode@@3HA	; lenTripcode
	xor	r13d, r13d
	mov	r15, rcx
	mov	ebx, r13d
	cmp	rax, 13
	jae	$LN794@SearchForT
	mov	QWORD PTR [r11+16], rsi
	mov	QWORD PTR [r11+24], rdi
	mov	QWORD PTR [r11+32], r12
; File z:\github\merikens-tripcode-engine\sourcefiles\main.cpp

; 229  : 	rand_s(&randomValue);

	lea	rcx, QWORD PTR randomValue$2[rbp-169]
; File z:\github\merikens-tripcode-engine\sourcefiles\cpu10.h

; 591  : 	tripcode[lenTripcode] = '\0';

	mov	BYTE PTR tripcode$[rbp+rax-169], bl
	mov	QWORD PTR [r11-40], r14

; 592  : 	key     [lenTripcode] = '\0';

	mov	BYTE PTR key$[rbp+rax-169], bl
; File z:\github\merikens-tripcode-engine\sourcefiles\main.cpp

; 229  : 	rand_s(&randomValue);

	call	rand_s
	lea	rcx, QWORD PTR randomValue$3[rbp-169]
	call	rand_s
	lea	rcx, QWORD PTR randomValue$4[rbp-169]
	call	rand_s
	lea	rcx, QWORD PTR randomValue$1[rsp]
	call	rand_s
	npad	7
$LL393@SearchForT:
; File z:\github\merikens-tripcode-engine\sourcefiles\cpu10.h

; 600  : 		SetCharactersInTripcodeKey(key, 4);

	lea	rcx, QWORD PTR key$[rbp-169]
	mov	edx, 4
	call	?SetCharactersInTripcodeKey@@YAXPEAEH@Z	; SetCharactersInTripcodeKey

; 601  : 		for (int32_t i = 4; i < lenTripcode; ++i)

	mov	eax, DWORD PTR ?lenTripcode@@3HA	; lenTripcode
	cmp	eax, 4
	jle	SHORT $LN392@SearchForT

; 602  : 			key[i] = 'A';

	add	eax, -4
	lea	rdi, QWORD PTR key$[rbp-165]
	movsxd	rcx, eax
	mov	eax, 65					; 00000041H
	rep stosb
$LN392@SearchForT:

; 603  : 	} while (!IsValidKey(key));

	lea	rcx, QWORD PTR key$[rbp-169]
	call	?IsValidKey@@YAHPEAE@Z			; IsValidKey
	test	eax, eax
	je	SHORT $LL393@SearchForT

; 604  : 
; 605  : 	DES_SetSalt(context,
; 606  : 		            DES_charToIndexTable[CONVERT_CHAR_FOR_SALT(key[1])]
; 607  : 		        | (DES_charToIndexTable[CONVERT_CHAR_FOR_SALT(key[2])] << 6));	

	movzx	eax, BYTE PTR key$[rbp-167]
	lea	rdi, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR ?charTableForSeed@@3PAEA[rax+rdi]
	movsx	edx, BYTE PTR DES_charToIndexTable[rax+rdi]
	movzx	eax, BYTE PTR key$[rbp-168]
	movzx	ecx, BYTE PTR ?charTableForSeed@@3PAEA[rax+rdi]
	shl	edx, 6
	movsx	eax, BYTE PTR DES_charToIndexTable[rcx+rdi]
	mov	rcx, r15
	or	edx, eax
	call	?DES_SetSalt@@YAXPEAUDES_Context@@H@Z	; DES_SetSalt

; 608  : 
; 609  : 	CLEAR_KEYS(0);

	lea	rax, QWORD PTR [r15+27136]
	mov	ecx, 3
	npad	1
$LL769@SearchForT:
	mov	QWORD PTR [rax], r13
	mov	QWORD PTR [rax+8], r13
	mov	QWORD PTR [rax+16], r13
	add	rax, 64					; 00000040H
	mov	QWORD PTR [rax-40], r13
	mov	QWORD PTR [rax-32], r13
	mov	QWORD PTR [rax-24], r13
	mov	QWORD PTR [rax-16], r13
	mov	QWORD PTR [rax-8], r13
	dec	rcx
	jne	SHORT $LL769@SearchForT
	mov	QWORD PTR [rax], r13
	mov	QWORD PTR [rax+8], r13
	mov	QWORD PTR [rax+16], r13
	mov	QWORD PTR [rax+24], r13

; 610  : 	SET_ALL_BITS_FOR_KEY( 0, 0, 0);

	movzx	eax, BYTE PTR key$[rbp-169]
	test	al, 1
	je	SHORT $LN380@SearchForT
	mov	QWORD PTR [r15+27136], -1
	mov	QWORD PTR [r15+27144], -1
	mov	QWORD PTR [r15+27152], -1
	mov	QWORD PTR [r15+27160], -1
$LN380@SearchForT:

; 611  : 	SET_ALL_BITS_FOR_KEY( 1, 0, 1);

	test	al, 2
	je	SHORT $LN376@SearchForT
	mov	QWORD PTR [r15+27168], -1
	mov	QWORD PTR [r15+27176], -1
	mov	QWORD PTR [r15+27184], -1
	mov	QWORD PTR [r15+27192], -1
$LN376@SearchForT:

; 612  : 	SET_ALL_BITS_FOR_KEY( 2, 0, 2);

	test	al, 4
	je	SHORT $LN372@SearchForT
	mov	QWORD PTR [r15+27200], -1
	mov	QWORD PTR [r15+27208], -1
	mov	QWORD PTR [r15+27216], -1
	mov	QWORD PTR [r15+27224], -1
$LN372@SearchForT:

; 613  : 	SET_ALL_BITS_FOR_KEY( 3, 0, 3);

	test	al, 8
	je	SHORT $LN368@SearchForT
	mov	QWORD PTR [r15+27232], -1
	mov	QWORD PTR [r15+27240], -1
	mov	QWORD PTR [r15+27248], -1
	mov	QWORD PTR [r15+27256], -1
$LN368@SearchForT:

; 614  : 	SET_ALL_BITS_FOR_KEY( 4, 0, 4);

	test	al, 16
	je	SHORT $LN364@SearchForT
	mov	QWORD PTR [r15+27264], -1
	mov	QWORD PTR [r15+27272], -1
	mov	QWORD PTR [r15+27280], -1
	mov	QWORD PTR [r15+27288], -1
$LN364@SearchForT:

; 615  : 	SET_ALL_BITS_FOR_KEY( 5, 0, 5);

	test	al, 32					; 00000020H
	je	SHORT $LN360@SearchForT
	mov	QWORD PTR [r15+27296], -1
	mov	QWORD PTR [r15+27304], -1
	mov	QWORD PTR [r15+27312], -1
	mov	QWORD PTR [r15+27320], -1
$LN360@SearchForT:

; 616  : 	SET_ALL_BITS_FOR_KEY( 6, 0, 6);

	test	al, 64					; 00000040H
	je	SHORT $LN356@SearchForT
	mov	QWORD PTR [r15+27328], -1
	mov	QWORD PTR [r15+27336], -1
	mov	QWORD PTR [r15+27344], -1
	mov	QWORD PTR [r15+27352], -1
$LN356@SearchForT:

; 617  : 
; 618  : 	CLEAR_KEYS(1);

	lea	rax, QWORD PTR [r15+27360]
	mov	ecx, 3
	npad	9
$LL768@SearchForT:
	mov	QWORD PTR [rax], r13
	mov	QWORD PTR [rax+8], r13
	mov	QWORD PTR [rax+16], r13
	add	rax, 64					; 00000040H
	mov	QWORD PTR [rax-40], r13
	mov	QWORD PTR [rax-32], r13
	mov	QWORD PTR [rax-24], r13
	mov	QWORD PTR [rax-16], r13
	mov	QWORD PTR [rax-8], r13
	dec	rcx
	jne	SHORT $LL768@SearchForT
	mov	QWORD PTR [rax], r13
	mov	QWORD PTR [rax+8], r13
	mov	QWORD PTR [rax+16], r13
	mov	QWORD PTR [rax+24], r13

; 619  : 	SET_ALL_BITS_FOR_KEY( 7, 1, 0);

	movzx	eax, BYTE PTR key$[rbp-168]
	test	al, 1
	je	SHORT $LN346@SearchForT
	mov	QWORD PTR [r15+27360], -1
	mov	QWORD PTR [r15+27368], -1
	mov	QWORD PTR [r15+27376], -1
	mov	QWORD PTR [r15+27384], -1
$LN346@SearchForT:

; 620  : 	SET_ALL_BITS_FOR_KEY( 8, 1, 1);

	test	al, 2
	je	SHORT $LN342@SearchForT
	mov	QWORD PTR [r15+27392], -1
	mov	QWORD PTR [r15+27400], -1
	mov	QWORD PTR [r15+27408], -1
	mov	QWORD PTR [r15+27416], -1
$LN342@SearchForT:

; 621  : 	SET_ALL_BITS_FOR_KEY( 9, 1, 2);

	test	al, 4
	je	SHORT $LN338@SearchForT
	mov	QWORD PTR [r15+27424], -1
	mov	QWORD PTR [r15+27432], -1
	mov	QWORD PTR [r15+27440], -1
	mov	QWORD PTR [r15+27448], -1
$LN338@SearchForT:

; 622  : 	SET_ALL_BITS_FOR_KEY(10, 1, 3);

	test	al, 8
	je	SHORT $LN334@SearchForT
	mov	QWORD PTR [r15+27456], -1
	mov	QWORD PTR [r15+27464], -1
	mov	QWORD PTR [r15+27472], -1
	mov	QWORD PTR [r15+27480], -1
$LN334@SearchForT:

; 623  : 	SET_ALL_BITS_FOR_KEY(11, 1, 4);

	test	al, 16
	je	SHORT $LN330@SearchForT
	mov	QWORD PTR [r15+27488], -1
	mov	QWORD PTR [r15+27496], -1
	mov	QWORD PTR [r15+27504], -1
	mov	QWORD PTR [r15+27512], -1
$LN330@SearchForT:

; 624  : 	SET_ALL_BITS_FOR_KEY(12, 1, 5);

	test	al, 32					; 00000020H
	je	SHORT $LN326@SearchForT
	mov	QWORD PTR [r15+27520], -1
	mov	QWORD PTR [r15+27528], -1
	mov	QWORD PTR [r15+27536], -1
	mov	QWORD PTR [r15+27544], -1
$LN326@SearchForT:

; 625  : 	SET_ALL_BITS_FOR_KEY(13, 1, 6);

	test	al, 64					; 00000040H
	je	SHORT $LN322@SearchForT
	mov	QWORD PTR [r15+27552], -1
	mov	QWORD PTR [r15+27560], -1
	mov	QWORD PTR [r15+27568], -1
	mov	QWORD PTR [r15+27576], -1
$LN322@SearchForT:

; 626  : 
; 627  : 	CLEAR_KEYS(2);

	lea	rax, QWORD PTR [r15+27584]
	mov	ecx, 3
	npad	9
$LL767@SearchForT:
	mov	QWORD PTR [rax], r13
	mov	QWORD PTR [rax+8], r13
	mov	QWORD PTR [rax+16], r13
	add	rax, 64					; 00000040H
	mov	QWORD PTR [rax-40], r13
	mov	QWORD PTR [rax-32], r13
	mov	QWORD PTR [rax-24], r13
	mov	QWORD PTR [rax-16], r13
	mov	QWORD PTR [rax-8], r13
	dec	rcx
	jne	SHORT $LL767@SearchForT
	mov	QWORD PTR [rax], r13
	mov	QWORD PTR [rax+8], r13
	mov	QWORD PTR [rax+16], r13
	mov	QWORD PTR [rax+24], r13

; 628  : 	SET_ALL_BITS_FOR_KEY(14, 2, 0);

	movzx	eax, BYTE PTR key$[rbp-167]
	test	al, 1
	je	SHORT $LN312@SearchForT
	mov	QWORD PTR [r15+27584], -1
	mov	QWORD PTR [r15+27592], -1
	mov	QWORD PTR [r15+27600], -1
	mov	QWORD PTR [r15+27608], -1
$LN312@SearchForT:

; 629  : 	SET_ALL_BITS_FOR_KEY(15, 2, 1);

	test	al, 2
	je	SHORT $LN308@SearchForT
	mov	QWORD PTR [r15+27616], -1
	mov	QWORD PTR [r15+27624], -1
	mov	QWORD PTR [r15+27632], -1
	mov	QWORD PTR [r15+27640], -1
$LN308@SearchForT:

; 630  : 	SET_ALL_BITS_FOR_KEY(16, 2, 2);

	test	al, 4
	je	SHORT $LN304@SearchForT
	mov	QWORD PTR [r15+27648], -1
	mov	QWORD PTR [r15+27656], -1
	mov	QWORD PTR [r15+27664], -1
	mov	QWORD PTR [r15+27672], -1
$LN304@SearchForT:

; 631  : 	SET_ALL_BITS_FOR_KEY(17, 2, 3);

	test	al, 8
	je	SHORT $LN300@SearchForT
	mov	QWORD PTR [r15+27680], -1
	mov	QWORD PTR [r15+27688], -1
	mov	QWORD PTR [r15+27696], -1
	mov	QWORD PTR [r15+27704], -1
$LN300@SearchForT:

; 632  : 	SET_ALL_BITS_FOR_KEY(18, 2, 4);

	test	al, 16
	je	SHORT $LN296@SearchForT
	mov	QWORD PTR [r15+27712], -1
	mov	QWORD PTR [r15+27720], -1
	mov	QWORD PTR [r15+27728], -1
	mov	QWORD PTR [r15+27736], -1
$LN296@SearchForT:

; 633  : 	SET_ALL_BITS_FOR_KEY(19, 2, 5);

	test	al, 32					; 00000020H
	je	SHORT $LN292@SearchForT
	mov	QWORD PTR [r15+27744], -1
	mov	QWORD PTR [r15+27752], -1
	mov	QWORD PTR [r15+27760], -1
	mov	QWORD PTR [r15+27768], -1
$LN292@SearchForT:

; 634  : 	SET_ALL_BITS_FOR_KEY(20, 2, 6);

	test	al, 64					; 00000040H
	je	SHORT $LN288@SearchForT
	mov	QWORD PTR [r15+27776], -1
	mov	QWORD PTR [r15+27784], -1
	mov	QWORD PTR [r15+27792], -1
	mov	QWORD PTR [r15+27800], -1
$LN288@SearchForT:

; 635  : 
; 636  : 	CLEAR_KEYS(3);

	lea	rax, QWORD PTR [r15+27808]
	mov	ecx, 3
	npad	9
$LL766@SearchForT:
	mov	QWORD PTR [rax], r13
	mov	QWORD PTR [rax+8], r13
	mov	QWORD PTR [rax+16], r13
	add	rax, 64					; 00000040H
	mov	QWORD PTR [rax-40], r13
	mov	QWORD PTR [rax-32], r13
	mov	QWORD PTR [rax-24], r13
	mov	QWORD PTR [rax-16], r13
	mov	QWORD PTR [rax-8], r13
	dec	rcx
	jne	SHORT $LL766@SearchForT
	mov	QWORD PTR [rax], r13
	mov	QWORD PTR [rax+8], r13
	mov	QWORD PTR [rax+16], r13
	mov	QWORD PTR [rax+24], r13

; 637  : 	SET_ALL_BITS_FOR_KEY(21, 3, 0);

	movzx	eax, BYTE PTR key$[rbp-166]
	test	al, 1
	je	SHORT $LN278@SearchForT
	mov	QWORD PTR [r15+27808], -1
	mov	QWORD PTR [r15+27816], -1
	mov	QWORD PTR [r15+27824], -1
	mov	QWORD PTR [r15+27832], -1
$LN278@SearchForT:

; 638  : 	SET_ALL_BITS_FOR_KEY(22, 3, 1);

	test	al, 2
	je	SHORT $LN274@SearchForT
	mov	QWORD PTR [r15+27840], -1
	mov	QWORD PTR [r15+27848], -1
	mov	QWORD PTR [r15+27856], -1
	mov	QWORD PTR [r15+27864], -1
$LN274@SearchForT:

; 639  : 	SET_ALL_BITS_FOR_KEY(23, 3, 2);

	test	al, 4
	je	SHORT $LN270@SearchForT
	mov	QWORD PTR [r15+27872], -1
	mov	QWORD PTR [r15+27880], -1
	mov	QWORD PTR [r15+27888], -1
	mov	QWORD PTR [r15+27896], -1
$LN270@SearchForT:

; 640  : 	SET_ALL_BITS_FOR_KEY(24, 3, 3);

	test	al, 8
	je	SHORT $LN266@SearchForT
	mov	QWORD PTR [r15+27904], -1
	mov	QWORD PTR [r15+27912], -1
	mov	QWORD PTR [r15+27920], -1
	mov	QWORD PTR [r15+27928], -1
$LN266@SearchForT:

; 641  : 	SET_ALL_BITS_FOR_KEY(25, 3, 4);

	test	al, 16
	je	SHORT $LN262@SearchForT
	mov	QWORD PTR [r15+27936], -1
	mov	QWORD PTR [r15+27944], -1
	mov	QWORD PTR [r15+27952], -1
	mov	QWORD PTR [r15+27960], -1
$LN262@SearchForT:

; 642  : 	SET_ALL_BITS_FOR_KEY(26, 3, 5);

	test	al, 32					; 00000020H
	je	SHORT $LN258@SearchForT
	mov	QWORD PTR [r15+27968], -1
	mov	QWORD PTR [r15+27976], -1
	mov	QWORD PTR [r15+27984], -1
	mov	QWORD PTR [r15+27992], -1
$LN258@SearchForT:

; 643  : 	SET_ALL_BITS_FOR_KEY(27, 3, 6);

	test	al, 64					; 00000040H
	je	SHORT $LN254@SearchForT
	mov	QWORD PTR [r15+28000], -1
	mov	QWORD PTR [r15+28008], -1
	mov	QWORD PTR [r15+28016], -1
	mov	QWORD PTR [r15+28024], -1
$LN254@SearchForT:

; 644  : 
; 645  : 	BOOL isSecondByte = FALSE;

	mov	eax, r13d

; 646  : 	for (int32_t i = 0; i < 4; ++i) {

	mov	rdx, r13
	mov	edi, 2147483535				; 7fffff8fH
$LL251@SearchForT:

; 647  : 		if (!isSecondByte) {

	test	eax, eax
	jne	SHORT $LN248@SearchForT

; 648  : 			isSecondByte = IS_FIRST_BYTE_SJIS_FULL(key[i]);

	movzx	ecx, BYTE PTR key$[rbp+rdx-169]
	lea	eax, DWORD PTR [rcx+127]
	cmp	al, 30
	ja	SHORT $LN753@SearchForT
	bt	edi, eax
	jb	SHORT $LN402@SearchForT
$LN753@SearchForT:
	add	cl, 32					; 00000020H
	cmp	cl, 10
	ja	SHORT $LN248@SearchForT
$LN402@SearchForT:
	mov	eax, 1
	jmp	SHORT $LN250@SearchForT
$LN248@SearchForT:

; 649  : 		} else {
; 650  : 			isSecondByte = FALSE;

	mov	eax, r13d
$LN250@SearchForT:

; 646  : 	for (int32_t i = 0; i < 4; ++i) {

	inc	rdx
	cmp	rdx, 4
	jl	SHORT $LL251@SearchForT

; 651  : 		}
; 652  : 	}
; 653  : 	BOOL isKey4SecondByte = isSecondByte;
; 654  : 	tableForKey4 = (isKey4SecondByte) ? context->keyCharTable_SecondByte : context->keyCharTable_FirstByte;	

	lea	rdx, QWORD PTR [r15+29456]
	test	eax, eax
	jne	SHORT $LN782@SearchForT
	lea	rdx, QWORD PTR [r15+28944]
$LN782@SearchForT:
	movzx	r11d, BYTE PTR randomValue$2[rbp-169]

; 666  : 
; 667  : 		BOOL isKey5SecondByte = !isKey4SecondByte && IS_FIRST_BYTE_SJIS_FULL(key[4]);

	movsxd	r12, eax
	movzx	eax, BYTE PTR randomValue$3[rbp-169]
	mov	rcx, r13
	mov	QWORD PTR tableForKey4$1$[rbp-169], rdx
	mov	DWORD PTR indexKey4$1$[rbp-169], r13d
	mov	QWORD PTR tv11573[rbp-169], rax
	mov	QWORD PTR tv11576[rbp-169], r12
	lea	r8, QWORD PTR [r15+28032]
	mov	QWORD PTR $T5[rbp-169], rcx
	lea	rdi, QWORD PTR [r15+28256]
	lea	r9, QWORD PTR [r15+28480]
	lea	rsi, QWORD PTR [r15+28704]
	lea	r10, QWORD PTR [r15+28512]
	npad	2
$LL246@SearchForT:

; 657  : 		key[4] = tableForKey4[indexKey4];
; 658  : 		CLEAR_KEYS(4);

	movzx	ecx, BYTE PTR [rcx+rdx]
	mov	rax, r8
	mov	edx, 3
	mov	BYTE PTR key$[rbp-165], cl
	npad	1
$LL765@SearchForT:
	mov	QWORD PTR [rax], r13
	mov	QWORD PTR [rax+8], r13
	mov	QWORD PTR [rax+16], r13
	lea	rax, QWORD PTR [rax+64]
	mov	QWORD PTR [rax-40], r13
	mov	QWORD PTR [rax-32], r13
	mov	QWORD PTR [rax-24], r13
	mov	QWORD PTR [rax-16], r13
	mov	QWORD PTR [rax-8], r13
	dec	rdx
	jne	SHORT $LL765@SearchForT
	mov	QWORD PTR [rax], r13
	mov	QWORD PTR [rax+8], r13
	mov	QWORD PTR [rax+16], r13
	mov	QWORD PTR [rax+24], r13

; 659  : 		SET_ALL_BITS_FOR_KEY(28, 4, 0);

	test	cl, 1
	je	SHORT $LN236@SearchForT
	mov	QWORD PTR [r8], -1
	mov	QWORD PTR [r8+8], -1
	mov	QWORD PTR [r8+16], -1
	mov	QWORD PTR [r8+24], -1
$LN236@SearchForT:

; 660  : 		SET_ALL_BITS_FOR_KEY(29, 4, 1);

	test	cl, 2
	je	SHORT $LN232@SearchForT
	mov	QWORD PTR [r15+28064], -1
	mov	QWORD PTR [r15+28072], -1
	mov	QWORD PTR [r15+28080], -1
	mov	QWORD PTR [r15+28088], -1
$LN232@SearchForT:

; 661  : 		SET_ALL_BITS_FOR_KEY(30, 4, 2);

	test	cl, 4
	je	SHORT $LN228@SearchForT
	mov	QWORD PTR [r15+28096], -1
	mov	QWORD PTR [r15+28104], -1
	mov	QWORD PTR [r15+28112], -1
	mov	QWORD PTR [r15+28120], -1
$LN228@SearchForT:

; 662  : 		SET_ALL_BITS_FOR_KEY(31, 4, 3);

	test	cl, 8
	je	SHORT $LN224@SearchForT
	mov	QWORD PTR [r15+28128], -1
	mov	QWORD PTR [r15+28136], -1
	mov	QWORD PTR [r15+28144], -1
	mov	QWORD PTR [r15+28152], -1
$LN224@SearchForT:

; 663  : 		SET_ALL_BITS_FOR_KEY(32, 4, 4);

	test	cl, 16
	je	SHORT $LN220@SearchForT
	mov	QWORD PTR [r15+28160], -1
	mov	QWORD PTR [r15+28168], -1
	mov	QWORD PTR [r15+28176], -1
	mov	QWORD PTR [r15+28184], -1
$LN220@SearchForT:

; 664  : 		SET_ALL_BITS_FOR_KEY(33, 4, 5);

	test	cl, 32					; 00000020H
	je	SHORT $LN216@SearchForT
	mov	QWORD PTR [r15+28192], -1
	mov	QWORD PTR [r15+28200], -1
	mov	QWORD PTR [r15+28208], -1
	mov	QWORD PTR [r15+28216], -1
$LN216@SearchForT:

; 665  : 		SET_ALL_BITS_FOR_KEY(34, 4, 6);

	test	cl, 64					; 00000040H
	je	SHORT $LN212@SearchForT
	mov	QWORD PTR [r15+28224], -1
	mov	QWORD PTR [r15+28232], -1
	mov	QWORD PTR [r15+28240], -1
	mov	QWORD PTR [r15+28248], -1
$LN212@SearchForT:

; 666  : 
; 667  : 		BOOL isKey5SecondByte = !isKey4SecondByte && IS_FIRST_BYTE_SJIS_FULL(key[4]);

	test	r12, r12
	jne	SHORT $LN411@SearchForT
	lea	eax, DWORD PTR [rcx+127]
	cmp	al, 3
	jbe	SHORT $LN409@SearchForT
	lea	eax, DWORD PTR [rcx+120]
	cmp	al, 23
	jbe	SHORT $LN409@SearchForT
	add	cl, 32					; 00000020H
	cmp	cl, 10
	ja	SHORT $LN411@SearchForT
$LN409@SearchForT:
	mov	eax, 1

; 668  : 		tableForKey5 = (isKey5SecondByte) ? context->keyCharTable_SecondByte : context->keyCharTable_FirstByte;	

	lea	rdx, QWORD PTR [r15+29456]
	jmp	SHORT $LN783@SearchForT
$LN411@SearchForT:

; 666  : 
; 667  : 		BOOL isKey5SecondByte = !isKey4SecondByte && IS_FIRST_BYTE_SJIS_FULL(key[4]);

	mov	eax, r13d

; 668  : 		tableForKey5 = (isKey5SecondByte) ? context->keyCharTable_SecondByte : context->keyCharTable_FirstByte;	

	lea	rdx, QWORD PTR [r15+28944]
$LN783@SearchForT:

; 669  : 
; 670  : 		for (indexKey5 = 0; indexKey5 <= CPU_DES_MAX_INDEX_FOR_KEYS; ++indexKey5) {

	mov	rcx, r13

; 682  : 
; 683  : 			isKey6SecondByte = !isKey5SecondByte && IS_FIRST_BYTE_SJIS_FULL(key[5]);

	movsxd	r8, eax
	mov	QWORD PTR tableForKey5$1$[rbp-169], rdx
	mov	QWORD PTR $T6[rbp-169], rcx
	mov	QWORD PTR tv11591[rbp-169], r8
	mov	DWORD PTR indexKey5$1$[rbp-169], r13d
	npad	6
$LL209@SearchForT:

; 671  : 			BOOL isKey6SecondByte;
; 672  : #if TRUE
; 673  : 			key[5] = tableForKey5[indexKey5];
; 674  : 			CLEAR_KEYS(5);

	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	rax, rdi
	mov	edx, 3
	mov	BYTE PTR key$[rbp-164], cl
	npad	1
$LL764@SearchForT:
	mov	QWORD PTR [rax], r13
	mov	QWORD PTR [rax+8], r13
	mov	QWORD PTR [rax+16], r13
	lea	rax, QWORD PTR [rax+64]
	mov	QWORD PTR [rax-40], r13
	mov	QWORD PTR [rax-32], r13
	mov	QWORD PTR [rax-24], r13
	mov	QWORD PTR [rax-16], r13
	mov	QWORD PTR [rax-8], r13
	dec	rdx
	jne	SHORT $LL764@SearchForT
	mov	QWORD PTR [rax], r13
	mov	QWORD PTR [rax+8], r13
	mov	QWORD PTR [rax+16], r13
	mov	QWORD PTR [rax+24], r13

; 675  : 			SET_ALL_BITS_FOR_KEY(35, 5, 0);

	test	cl, 1
	je	SHORT $LN199@SearchForT
	mov	QWORD PTR [rdi], -1
	mov	QWORD PTR [rdi+8], -1
	mov	QWORD PTR [rdi+16], -1
	mov	QWORD PTR [rdi+24], -1
$LN199@SearchForT:

; 676  : 			SET_ALL_BITS_FOR_KEY(36, 5, 1);

	test	cl, 2
	je	SHORT $LN195@SearchForT
	mov	QWORD PTR [r15+28288], -1
	mov	QWORD PTR [r15+28296], -1
	mov	QWORD PTR [r15+28304], -1
	mov	QWORD PTR [r15+28312], -1
$LN195@SearchForT:

; 677  : 			SET_ALL_BITS_FOR_KEY(37, 5, 2);

	test	cl, 4
	je	SHORT $LN191@SearchForT
	mov	QWORD PTR [r15+28320], -1
	mov	QWORD PTR [r15+28328], -1
	mov	QWORD PTR [r15+28336], -1
	mov	QWORD PTR [r15+28344], -1
$LN191@SearchForT:

; 678  : 			SET_ALL_BITS_FOR_KEY(38, 5, 3);

	test	cl, 8
	je	SHORT $LN187@SearchForT
	mov	QWORD PTR [r15+28352], -1
	mov	QWORD PTR [r15+28360], -1
	mov	QWORD PTR [r15+28368], -1
	mov	QWORD PTR [r15+28376], -1
$LN187@SearchForT:

; 679  : 			SET_ALL_BITS_FOR_KEY(39, 5, 4);

	test	cl, 16
	je	SHORT $LN183@SearchForT
	mov	QWORD PTR [r15+28384], -1
	mov	QWORD PTR [r15+28392], -1
	mov	QWORD PTR [r15+28400], -1
	mov	QWORD PTR [r15+28408], -1
$LN183@SearchForT:

; 680  : 			SET_ALL_BITS_FOR_KEY(40, 5, 5);

	test	cl, 32					; 00000020H
	je	SHORT $LN179@SearchForT
	mov	QWORD PTR [r15+28416], -1
	mov	QWORD PTR [r15+28424], -1
	mov	QWORD PTR [r15+28432], -1
	mov	QWORD PTR [r15+28440], -1
$LN179@SearchForT:

; 681  : 			SET_ALL_BITS_FOR_KEY(41, 5, 6);

	test	cl, 64					; 00000040H
	je	SHORT $LN175@SearchForT
	mov	QWORD PTR [r15+28448], -1
	mov	QWORD PTR [r15+28456], -1
	mov	QWORD PTR [r15+28464], -1
	mov	QWORD PTR [r15+28472], -1
$LN175@SearchForT:

; 682  : 
; 683  : 			isKey6SecondByte = !isKey5SecondByte && IS_FIRST_BYTE_SJIS_FULL(key[5]);

	test	r8, r8
	jne	SHORT $LN419@SearchForT
	lea	eax, DWORD PTR [rcx+127]
	cmp	al, 3
	jbe	SHORT $LN417@SearchForT
	lea	eax, DWORD PTR [rcx+120]
	cmp	al, 23
	jbe	SHORT $LN417@SearchForT
	add	cl, 32					; 00000020H
	cmp	cl, 10
	ja	SHORT $LN419@SearchForT
$LN417@SearchForT:
	mov	edx, 1

; 684  : 			tableForKey6 = (isKey6SecondByte) ? context->keyCharTable_SecondByte : context->keyCharTable_FirstByte;	

	lea	rdi, QWORD PTR [r15+29456]
	jmp	SHORT $LN784@SearchForT
$LN419@SearchForT:

; 682  : 
; 683  : 			isKey6SecondByte = !isKey5SecondByte && IS_FIRST_BYTE_SJIS_FULL(key[5]);

	mov	edx, r13d

; 684  : 			tableForKey6 = (isKey6SecondByte) ? context->keyCharTable_SecondByte : context->keyCharTable_FirstByte;	

	lea	rdi, QWORD PTR [r15+28944]
$LN784@SearchForT:
	mov	QWORD PTR tableForKey6$1$[rbp-169], rdi

; 685  : 
; 686  : 			CLEAR_KEYS(6);

	mov	rax, r9
	mov	ecx, 3
$LL763@SearchForT:
	mov	QWORD PTR [rax], r13
	mov	QWORD PTR [rax+8], r13
	mov	QWORD PTR [rax+16], r13
	lea	rax, QWORD PTR [rax+64]
	mov	QWORD PTR [rax-40], r13
	mov	QWORD PTR [rax-32], r13
	mov	QWORD PTR [rax-24], r13
	mov	QWORD PTR [rax-16], r13
	mov	QWORD PTR [rax-8], r13
	dec	rcx
	jne	SHORT $LL763@SearchForT
	mov	QWORD PTR [rax], r13
	mov	QWORD PTR [rax+8], r13
	mov	QWORD PTR [rax+16], r13
	mov	QWORD PTR [rax+24], r13

; 687  : 			CLEAR_KEYS(7);

	mov	ecx, 3
	mov	rax, rsi
	npad	1
$LL762@SearchForT:
	mov	QWORD PTR [rax], r13
	mov	QWORD PTR [rax+8], r13
	mov	QWORD PTR [rax+16], r13
	lea	rax, QWORD PTR [rax+64]
	mov	QWORD PTR [rax-40], r13
	mov	QWORD PTR [rax-32], r13
	mov	QWORD PTR [rax-24], r13
	mov	QWORD PTR [rax-16], r13
	mov	QWORD PTR [rax-8], r13
	dec	rcx
	jne	SHORT $LL762@SearchForT
	mov	r14, QWORD PTR tv11573[rbp-169]
	mov	QWORD PTR [rax], r13
	mov	QWORD PTR [rax+8], r13

; 713  : 				tableForKey7 = (!isKey6SecondByte && IS_FIRST_BYTE_SJIS_FULL(key[6])) ? (context->keyCharTable_SecondByte) : (context->keyCharTable_FirstByte);	

	movsxd	rsi, edx
	mov	QWORD PTR [rax+16], r13
	mov	rcx, r10
	mov	QWORD PTR [rax+24], r13
	mov	QWORD PTR tv11590[rsp], rsi
	mov	r9, r13

; 714  : 				if (key[6] & ((0x1 << 0))) context->keys[42].VECTOR_ELEMENTS[tripcodeIndexUpper] = 0xffffffff;

	lea	r10, QWORD PTR [rdi+r11]
	npad	3
$LL160@SearchForT:

; 712  : 				key[6] = tableForKey6[(int32_t)randomByteKey6 + tripcodeIndexUpper];

	movzx	edx, BYTE PTR [r10+r9]
	mov	BYTE PTR key$[rbp-163], dl

; 713  : 				tableForKey7 = (!isKey6SecondByte && IS_FIRST_BYTE_SJIS_FULL(key[6])) ? (context->keyCharTable_SecondByte) : (context->keyCharTable_FirstByte);	

	test	rsi, rsi
	jne	SHORT $LN427@SearchForT
	lea	eax, DWORD PTR [rdx+127]
	cmp	al, 3
	jbe	SHORT $LN425@SearchForT
	lea	eax, DWORD PTR [rdx+120]
	cmp	al, 23
	jbe	SHORT $LN425@SearchForT
	lea	eax, DWORD PTR [rdx+32]
	cmp	al, 10
	ja	SHORT $LN427@SearchForT
$LN425@SearchForT:
	lea	rdi, QWORD PTR [r15+29456]
	jmp	SHORT $LN428@SearchForT
$LN427@SearchForT:
	lea	rdi, QWORD PTR [r15+28944]
$LN428@SearchForT:

; 714  : 				if (key[6] & ((0x1 << 0))) context->keys[42].VECTOR_ELEMENTS[tripcodeIndexUpper] = 0xffffffff;

	test	dl, 1
	je	SHORT $LN157@SearchForT
	mov	DWORD PTR [rcx-32], -1			; ffffffffH
$LN157@SearchForT:

; 715  : 				if (key[6] & ((0x1 << 1))) context->keys[43].VECTOR_ELEMENTS[tripcodeIndexUpper] = 0xffffffff;

	test	dl, 2
	je	SHORT $LN156@SearchForT
	mov	DWORD PTR [rcx], -1			; ffffffffH
$LN156@SearchForT:

; 716  : 				if (key[6] & ((0x1 << 2))) context->keys[44].VECTOR_ELEMENTS[tripcodeIndexUpper] = 0xffffffff;

	test	dl, 4
	je	SHORT $LN155@SearchForT
	mov	DWORD PTR [rcx+32], -1			; ffffffffH
$LN155@SearchForT:

; 717  : 				if (key[6] & ((0x1 << 3))) context->keys[45].VECTOR_ELEMENTS[tripcodeIndexUpper] = 0xffffffff;

	test	dl, 8
	je	SHORT $LN154@SearchForT
	mov	DWORD PTR [rcx+64], -1			; ffffffffH
$LN154@SearchForT:

; 718  : 				if (key[6] & ((0x1 << 4))) context->keys[46].VECTOR_ELEMENTS[tripcodeIndexUpper] = 0xffffffff;

	test	dl, 16
	je	SHORT $LN153@SearchForT
	mov	DWORD PTR [rcx+96], -1			; ffffffffH
$LN153@SearchForT:

; 719  : 				if (key[6] & ((0x1 << 5))) context->keys[47].VECTOR_ELEMENTS[tripcodeIndexUpper] = 0xffffffff;

	test	dl, 32					; 00000020H
	je	SHORT $LN152@SearchForT
	mov	DWORD PTR [rcx+128], -1			; ffffffffH
$LN152@SearchForT:

; 720  : 				if (key[6] & ((0x1 << 6))) context->keys[48].VECTOR_ELEMENTS[tripcodeIndexUpper] = 0xffffffff;

	test	dl, 64					; 00000040H
	je	SHORT $LN151@SearchForT
	mov	DWORD PTR [rcx+160], -1			; ffffffffH
$LN151@SearchForT:

; 721  : 
; 722  : #pragma unroll
; 723  : 				for (int32_t tripcodeIndexLower = 0; tripcodeIndexLower < 32; ++tripcodeIndexLower) {

	mov	eax, 1
	add	rdi, r14
	lea	r8d, QWORD PTR [rax+31]
	npad	9
$LL150@SearchForT:

; 724  : 					key[7] = tableForKey7[(int32_t)randomByteKey7 + tripcodeIndexLower];

	movzx	edx, BYTE PTR [rdi]
	mov	BYTE PTR key$[rbp-162], dl

; 725  : 					if (key[7] & ((0x1 << 0))) context->keys[49].VECTOR_ELEMENTS[tripcodeIndexUpper] |= (0x1 << tripcodeIndexLower);

	test	dl, 1
	je	SHORT $LN147@SearchForT
	or	DWORD PTR [rcx+192], eax
$LN147@SearchForT:

; 726  : 					if (key[7] & ((0x1 << 1))) context->keys[50].VECTOR_ELEMENTS[tripcodeIndexUpper] |= (0x1 << tripcodeIndexLower);

	test	dl, 2
	je	SHORT $LN146@SearchForT
	or	DWORD PTR [rcx+224], eax
$LN146@SearchForT:

; 727  : 					if (key[7] & ((0x1 << 2))) context->keys[51].VECTOR_ELEMENTS[tripcodeIndexUpper] |= (0x1 << tripcodeIndexLower);

	test	dl, 4
	je	SHORT $LN145@SearchForT
	or	DWORD PTR [rcx+256], eax
$LN145@SearchForT:

; 728  : 					if (key[7] & ((0x1 << 3))) context->keys[52].VECTOR_ELEMENTS[tripcodeIndexUpper] |= (0x1 << tripcodeIndexLower);

	test	dl, 8
	je	SHORT $LN144@SearchForT
	or	DWORD PTR [rcx+288], eax
$LN144@SearchForT:

; 729  : 					if (key[7] & ((0x1 << 4))) context->keys[53].VECTOR_ELEMENTS[tripcodeIndexUpper] |= (0x1 << tripcodeIndexLower);

	test	dl, 16
	je	SHORT $LN143@SearchForT
	or	DWORD PTR [rcx+320], eax
$LN143@SearchForT:

; 730  : 					if (key[7] & ((0x1 << 5))) context->keys[54].VECTOR_ELEMENTS[tripcodeIndexUpper] |= (0x1 << tripcodeIndexLower);

	test	dl, 32					; 00000020H
	je	SHORT $LN142@SearchForT
	or	DWORD PTR [rcx+352], eax
$LN142@SearchForT:

; 731  : 					if (key[7] & ((0x1 << 6))) context->keys[55].VECTOR_ELEMENTS[tripcodeIndexUpper] |= (0x1 << tripcodeIndexLower);

	test	dl, 64					; 00000040H
	je	SHORT $LN149@SearchForT
	or	DWORD PTR [rcx+384], eax
$LN149@SearchForT:

; 721  : 
; 722  : #pragma unroll
; 723  : 				for (int32_t tripcodeIndexLower = 0; tripcodeIndexLower < 32; ++tripcodeIndexLower) {

	rol	eax, 1
	inc	rdi
	dec	r8
	jne	SHORT $LL150@SearchForT

; 688  : 
; 689  : #if FALSE
; 690  : 			for (tripcodeIndex = 0; tripcodeIndex < BITSLICE_DES_DEPTH; ++tripcodeIndex) {
; 691  : 				key[6] = tableForKey6[(int32_t)randomByteKey6 + (tripcodeIndex >> 5)];
; 692  : 				tableForKey7 = (!isKey6SecondByte && IS_FIRST_BYTE_SJIS_FULL(key[6])) ? (context->keyCharTable_SecondByte) : (context->keyCharTable_FirstByte);	
; 693  : 				SET_BIT_FOR_KEY(42, 6, 0);
; 694  : 				SET_BIT_FOR_KEY(43, 6, 1);
; 695  : 				SET_BIT_FOR_KEY(44, 6, 2);
; 696  : 				SET_BIT_FOR_KEY(45, 6, 3);
; 697  : 				SET_BIT_FOR_KEY(46, 6, 4);
; 698  : 				SET_BIT_FOR_KEY(47, 6, 5);
; 699  : 				SET_BIT_FOR_KEY(48, 6, 6);
; 700  : 
; 701  : 				key[7] = tableForKey7[(int32_t)randomByteKey7 + (tripcodeIndex & 0x1f)];
; 702  : 				SET_BIT_FOR_KEY(49, 7, 0);
; 703  : 				SET_BIT_FOR_KEY(50, 7, 1);
; 704  : 				SET_BIT_FOR_KEY(51, 7, 2);
; 705  : 				SET_BIT_FOR_KEY(52, 7, 3);
; 706  : 				SET_BIT_FOR_KEY(53, 7, 4);
; 707  : 				SET_BIT_FOR_KEY(54, 7, 5);
; 708  : 				SET_BIT_FOR_KEY(55, 7, 6);
; 709  : 			}
; 710  : #else
; 711  : 			for (int32_t tripcodeIndexUpper = 0; tripcodeIndexUpper < (BITSLICE_DES_DEPTH >> 5); ++tripcodeIndexUpper) {

	inc	r9
	add	rcx, 4
	cmp	r9, 8
	jl	$LL160@SearchForT

; 732  : 				}
; 733  : 			}
; 734  : #endif
; 735  : #endif
; 736  : 
; 737  : 		 	DES_Crypt(context);

	mov	rcx, r15
	call	?DES_Crypt@@YAXPEAUDES_Context@@@Z	; DES_Crypt

; 738  : 			numGeneratedTripcodes += BITSLICE_DES_DEPTH;
; 739  : 
; 740  : 			// continue;
; 741  : 
; 742  : 			for (tripcodeIndex = 0; tripcodeIndex < BITSLICE_DES_DEPTH; ++tripcodeIndex) {

	mov	r12, QWORD PTR ?tripcodeChunkArray@@3PEAIEA ; tripcodeChunkArray
	mov	r14d, DWORD PTR randomValue$1[rsp]
	add	ebx, 256				; 00000100H
	xor	eax, eax
	lea	r13d, QWORD PTR [rax+1]
	mov	DWORD PTR numGeneratedTripcodes$1$[rbp-169], ebx
	mov	DWORD PTR tripcodeIndex$1$[rbp-169], eax
	npad	12
$LL140@SearchForT:

; 743  : 				// if (tripcodeIndex == 0) printf("tripcode[] = \"%s\"\n", DES_GetTripcode(context, tripcodeIndex, tripcode));
; 744  : 
; 745  : 				// printf("[0x%08x, 0x%08x]\n", tripcodeChunkArray[0], generatedTripcodeChunkArray[0]);
; 746  : 				
; 747  : 				BOOL found = FALSE;

	xor	ebx, ebx

; 748  : 				if (searchMode == SEARCH_MODE_FORWARD_MATCHING && numTripcodeChunk == 1) {

	cmp	DWORD PTR ?searchMode@@3HA, ebx		; searchMode
	jne	$LN137@SearchForT
	cmp	DWORD PTR ?numTripcodeChunk@@3IA, 1	; numTripcodeChunk
	jne	$LN747@SearchForT

; 749  : 					if (GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 63, 31, 38,  6, 46, 14, 0) != ((tripcodeChunkArray[0] >> (6 * 4)) & 0x3f))

	mov	edi, DWORD PTR [r12]
	mov	edx, eax
	mov	eax, ebx
	shr	rdx, 5
	mov	ecx, ebx
	test	DWORD PTR [r15+rdx*4+26688], r13d
	setne	cl
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+25664], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+25888], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+24864], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+26144], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+25120], r13d
	setne	al
	or	ecx, eax
	mov	eax, edi
	shr	eax, 24
	and	eax, 63					; 0000003fH
	cmp	ecx, eax
	jne	$LN748@SearchForT

; 750  : 						goto skip_final_permutation;
; 751  : 					if (GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 54, 22, 62, 30, 37,  5, 0) != ((tripcodeChunkArray[0] >> (6 * 3)) & 0x3f))

	test	DWORD PTR [r15+rdx*4+26400], r13d
	mov	eax, ebx
	mov	ecx, ebx
	setne	cl
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+25376], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+26656], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+25632], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+25856], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+24832], r13d
	setne	al
	or	ecx, eax
	mov	eax, edi
	shr	eax, 18
	and	eax, 63					; 0000003fH
	cmp	ecx, eax
	jne	$LN748@SearchForT

; 752  : 						goto skip_final_permutation;
; 753  : 					if (GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 45, 13, 53, 21, 61, 29, 0) != ((tripcodeChunkArray[0] >> (6 * 2)) & 0x3f))

	test	DWORD PTR [r15+rdx*4+26112], r13d
	mov	eax, ebx
	mov	ecx, ebx
	setne	cl
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+25088], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+26368], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+25344], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+26624], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+25600], r13d
	setne	al
	or	ecx, eax
	mov	eax, edi
	shr	eax, 12
	and	eax, 63					; 0000003fH
	cmp	ecx, eax
	jne	$LN748@SearchForT

; 754  : 						goto skip_final_permutation;
; 755  : 					if (GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 36,  4, 44, 12, 52, 20, 0) != ((tripcodeChunkArray[0] >> (6 * 1)) & 0x3f))

	test	DWORD PTR [r15+rdx*4+25824], r13d
	mov	eax, ebx
	mov	ecx, ebx
	setne	cl
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+24800], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+26080], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+25056], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+26336], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+25312], r13d
	setne	al
	or	ecx, eax
	mov	eax, edi
	shr	eax, 6
	and	eax, 63					; 0000003fH
	cmp	ecx, eax
	jne	$LN748@SearchForT

; 756  : 						goto skip_final_permutation;
; 757  : 					if (GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 60, 28, 35,  3, 43, 11, 0) != ((tripcodeChunkArray[0] >> (6 * 0)) & 0x3f))

	test	DWORD PTR [r15+rdx*4+26592], r13d
	mov	eax, ebx
	mov	ecx, ebx
	setne	cl
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+25568], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+25792], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+24768], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+26048], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+25024], r13d
	setne	al
	or	ecx, eax
$LN791@SearchForT:
	and	edi, 63					; 0000003fH
	cmp	ecx, edi
	jne	$LN748@SearchForT
$LN97@SearchForT:

; 758  : 						goto skip_final_permutation;
; 759  : 					found = TRUE;

	mov	ebx, 1
	jmp	$LN28@SearchForT
$LN747@SearchForT:

; 773  : 
; 774  : 				} else if (searchMode == SEARCH_MODE_FORWARD_MATCHING) {
; 775  : 					generatedTripcodeChunkArray[0] = 0x00000000;
; 776  : 
; 777  : 					uint32_t tripcodeCharIndex = GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 63, 31, 38,  6, 46, 14, 0);

	mov	ecx, eax
	mov	edx, ebx
	mov	eax, ebx
	shr	rcx, 5
	mov	DWORD PTR generatedTripcodeChunkArray$[rbp-169], ebx
	test	DWORD PTR [r15+rcx*4+26688], r13d
	setne	dl
	add	edx, edx
	test	DWORD PTR [r15+rcx*4+25664], r13d
	setne	al
	or	edx, eax
	mov	eax, ebx
	add	edx, edx
	test	DWORD PTR [r15+rcx*4+25888], r13d
	setne	al
	or	edx, eax
	mov	eax, ebx
	add	edx, edx
	test	DWORD PTR [r15+rcx*4+24864], r13d
	setne	al
	or	edx, eax
	mov	eax, ebx
	add	edx, edx
	test	DWORD PTR [r15+rcx*4+26144], r13d
	setne	al
	or	edx, eax
	mov	eax, ebx
	add	edx, edx
	test	DWORD PTR [r15+rcx*4+25120], r13d
	setne	al
	or	edx, eax

; 778  : 					if (!context->tripcodeChunkBitmap[4][tripcodeCharIndex])

	cmp	BYTE PTR [rdx+r15+30224], bl
	je	$LN748@SearchForT

; 779  : 						goto skip_final_permutation;
; 780  : 					generatedTripcodeChunkArray[0] |= tripcodeCharIndex << (6 * 4);

	shl	edx, 24

; 781  : 
; 782  : 					tripcodeCharIndex = GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 54, 22, 62, 30, 37,  5, 0);

	test	DWORD PTR [r15+rcx*4+26400], r13d
	mov	edi, ebx
	setne	dil
	mov	eax, ebx
	mov	DWORD PTR generatedTripcodeChunkArray$[rbp-169], edx
	add	edi, edi
	test	DWORD PTR [r15+rcx*4+25376], r13d
	setne	al
	or	edi, eax
	mov	eax, ebx
	add	edi, edi
	test	DWORD PTR [r15+rcx*4+26656], r13d
	setne	al
	or	edi, eax
	mov	eax, ebx
	add	edi, edi
	test	DWORD PTR [r15+rcx*4+25632], r13d
	setne	al
	or	edi, eax
	mov	eax, ebx
	add	edi, edi
	test	DWORD PTR [r15+rcx*4+25856], r13d
	setne	al
	or	edi, eax
	mov	eax, ebx
	add	edi, edi
	test	DWORD PTR [r15+rcx*4+24832], r13d
	setne	al
	or	edi, eax

; 783  : 					if (!context->tripcodeChunkBitmap[3][tripcodeCharIndex])

	cmp	BYTE PTR [rdi+r15+30160], bl
	je	$LN748@SearchForT

; 784  : 						goto skip_final_permutation;
; 785  : 					generatedTripcodeChunkArray[0] |= tripcodeCharIndex << (6 * 3);

	shl	edi, 18

; 786  : 
; 787  : 					tripcodeCharIndex = GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 45, 13, 53, 21, 61, 29, 0);

	mov	eax, ebx
	or	edx, edi
	test	DWORD PTR [r15+rcx*4+26112], r13d
	mov	edi, ebx
	setne	dil
	mov	DWORD PTR generatedTripcodeChunkArray$[rbp-169], edx
	add	edi, edi
	test	DWORD PTR [r15+rcx*4+25088], r13d
	setne	al
	or	edi, eax
	mov	eax, ebx
	add	edi, edi
	test	DWORD PTR [r15+rcx*4+26368], r13d
	setne	al
	or	edi, eax
	mov	eax, ebx
	add	edi, edi
	test	DWORD PTR [r15+rcx*4+25344], r13d
	setne	al
	or	edi, eax
	mov	eax, ebx
	add	edi, edi
	test	DWORD PTR [r15+rcx*4+26624], r13d
	setne	al
	or	edi, eax
	mov	eax, ebx
	add	edi, edi
	test	DWORD PTR [r15+rcx*4+25600], r13d
	setne	al
	or	edi, eax

; 788  : 					if (!context->tripcodeChunkBitmap[2][tripcodeCharIndex])

	cmp	BYTE PTR [rdi+r15+30096], bl
	je	$LN748@SearchForT

; 789  : 						goto skip_final_permutation;
; 790  : 					generatedTripcodeChunkArray[0] |= tripcodeCharIndex << (6 * 2);

	shl	edi, 12

; 791  : 
; 792  : 					tripcodeCharIndex = GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 36,  4, 44, 12, 52, 20, 0);

	mov	eax, ebx
	or	edx, edi
	test	DWORD PTR [r15+rcx*4+25824], r13d
	mov	edi, ebx
	setne	dil
	mov	DWORD PTR generatedTripcodeChunkArray$[rbp-169], edx
	add	edi, edi
	test	DWORD PTR [r15+rcx*4+24800], r13d
	setne	al
	or	edi, eax
	mov	eax, ebx
	add	edi, edi
	test	DWORD PTR [r15+rcx*4+26080], r13d
	setne	al
	or	edi, eax
	mov	eax, ebx
	add	edi, edi
	test	DWORD PTR [r15+rcx*4+25056], r13d
	setne	al
	or	edi, eax
	mov	eax, ebx
	add	edi, edi
	test	DWORD PTR [r15+rcx*4+26336], r13d
	setne	al
	or	edi, eax
	mov	eax, ebx
	add	edi, edi
	test	DWORD PTR [r15+rcx*4+25312], r13d
	setne	al
	or	edi, eax

; 793  : 					if (!context->tripcodeChunkBitmap[1][tripcodeCharIndex])

	cmp	BYTE PTR [rdi+r15+30032], bl
	je	$LN748@SearchForT

; 794  : 						goto skip_final_permutation;
; 795  : 					generatedTripcodeChunkArray[0] |= tripcodeCharIndex << (6 * 1);

	shl	edi, 6

; 796  : 
; 797  : 					tripcodeCharIndex = GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 60, 28, 35,  3, 43, 11, 0);

	mov	eax, ebx
	or	edx, edi
	test	DWORD PTR [r15+rcx*4+26592], r13d
	mov	edi, ebx
	setne	dil
	mov	DWORD PTR generatedTripcodeChunkArray$[rbp-169], edx
	add	edi, edi
	test	DWORD PTR [r15+rcx*4+25568], r13d
	setne	al
	or	edi, eax
	mov	eax, ebx
	add	edi, edi
	test	DWORD PTR [r15+rcx*4+25792], r13d
	setne	al
	or	edi, eax
	mov	eax, ebx
	add	edi, edi
	test	DWORD PTR [r15+rcx*4+24768], r13d
	setne	al
	or	edi, eax
	mov	eax, ebx
	add	edi, edi
	test	DWORD PTR [r15+rcx*4+26048], r13d
	setne	al
	or	edi, eax
	mov	eax, ebx
	add	edi, edi
	test	DWORD PTR [r15+rcx*4+25024], r13d
	setne	al
	or	edi, eax

; 798  : 					if (!context->tripcodeChunkBitmap[0][tripcodeCharIndex])

	cmp	BYTE PTR [rdi+r15+29968], bl
	je	$LN748@SearchForT

; 799  : 						goto skip_final_permutation;
; 800  : 					generatedTripcodeChunkArray[0] |= tripcodeCharIndex << (6 * 0);

	or	edx, edi

; 801  : 
; 802  : 					QUICK_SEARCH_FOR_TRIPCODE_CHUNK(0)

	lea	rdi, OFFSET FLAT:__ImageBase
	mov	eax, edx
	mov	DWORD PTR generatedTripcodeChunkArray$[rbp-169], edx
	shr	rax, 18
	cmp	BYTE PTR ?smallChunkBitmap@@3PAEA[rax+rdi], bl
	jne	$LN748@SearchForT
	mov	edi, DWORD PTR ?numTripcodeChunk@@3IA	; numTripcodeChunk
	xor	r8d, r8d
	dec	edi
	js	$LN748@SearchForT
	npad	1
$LL101@SearchForT:
	lea	ecx, DWORD PTR [rdi+r8]
	sar	ecx, 1
	movsxd	rax, ecx
	mov	r9d, DWORD PTR [r12+rax*4]
	cmp	edx, r9d
	jbe	SHORT $LN785@SearchForT
	lea	r8d, DWORD PTR [rcx+1]
	jmp	SHORT $LN96@SearchForT
$LN785@SearchForT:
	jae	$LN97@SearchForT
	lea	edi, DWORD PTR [rcx-1]
$LN96@SearchForT:
	cmp	r8d, edi
	jle	SHORT $LL101@SearchForT

; 601  : 		for (int32_t i = 4; i < lenTripcode; ++i)

	jmp	$LN748@SearchForT
$LN137@SearchForT:

; 760  : 					
; 761  : 				} else if (searchMode == SEARCH_MODE_BACKWARD_MATCHING && numTripcodeChunk == 1) {

	cmp	DWORD PTR ?searchMode@@3HA, 1		; searchMode
	jne	$LN94@SearchForT
	cmp	DWORD PTR ?numTripcodeChunk@@3IA, 1	; numTripcodeChunk
	jne	$LN749@SearchForT

; 762  : 					if (GET_TRIPCODE_CHAR_INDEX     (context->dataBlocks, tripcodeIndex, 51, 19, 59, 27, 34,  2, 0) != ((tripcodeChunkArray[0] >> (6 * 4)) & 0x3f))

	mov	edi, DWORD PTR [r12]
	mov	edx, eax
	mov	eax, ebx
	shr	rdx, 5
	mov	ecx, ebx
	test	DWORD PTR [r15+rdx*4+26304], r13d
	setne	cl
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+25280], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+26560], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+25536], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+25760], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+24736], r13d
	setne	al
	or	ecx, eax
	mov	eax, edi
	shr	eax, 24
	and	eax, 63					; 0000003fH
	cmp	ecx, eax
	jne	$LN748@SearchForT

; 763  : 						goto skip_final_permutation;
; 764  : 					if (GET_TRIPCODE_CHAR_INDEX     (context->dataBlocks, tripcodeIndex, 42, 10, 50, 18, 58, 26, 0) != ((tripcodeChunkArray[0] >> (6 * 3)) & 0x3f))

	test	DWORD PTR [r15+rdx*4+26016], r13d
	mov	eax, ebx
	mov	ecx, ebx
	setne	cl
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+24992], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+26272], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+25248], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+26528], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+25504], r13d
	setne	al
	or	ecx, eax
	mov	eax, edi
	shr	eax, 18
	and	eax, 63					; 0000003fH
	cmp	ecx, eax
	jne	$LN748@SearchForT

; 765  : 						goto skip_final_permutation;
; 766  : 					if (GET_TRIPCODE_CHAR_INDEX     (context->dataBlocks, tripcodeIndex, 33,  1, 41,  9, 49, 17, 0) != ((tripcodeChunkArray[0] >> (6 * 2)) & 0x3f))

	test	DWORD PTR [r15+rdx*4+25728], r13d
	mov	eax, ebx
	mov	ecx, ebx
	setne	cl
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+24704], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+25984], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+24960], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+26240], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+25216], r13d
	setne	al
	or	ecx, eax
	mov	eax, edi
	shr	eax, 12
	and	eax, 63					; 0000003fH
	cmp	ecx, eax
	jne	$LN748@SearchForT

; 767  : 						goto skip_final_permutation;
; 768  : 					if (GET_TRIPCODE_CHAR_INDEX     (context->dataBlocks, tripcodeIndex, 57, 25, 32,  0, 40,  8, 0) != ((tripcodeChunkArray[0] >> (6 * 1)) & 0x3f))

	test	DWORD PTR [r15+rdx*4+26496], r13d
	mov	eax, ebx
	mov	ecx, ebx
	setne	cl
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+25472], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+25696], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+24672], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+25952], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+24928], r13d
	setne	al
	or	ecx, eax
	mov	eax, edi
	shr	eax, 6
	and	eax, 63					; 0000003fH
	cmp	ecx, eax
	jne	$LN748@SearchForT

; 769  : 						goto skip_final_permutation;
; 770  : 					if (GET_TRIPCODE_CHAR_INDEX_LAST(context->dataBlocks, tripcodeIndex, 48, 16, 56, 24) != ((tripcodeChunkArray[0] >> (6 * 0)) & 0x3f))

	test	DWORD PTR [r15+rdx*4+26208], r13d
	mov	eax, ebx
	mov	ecx, ebx
	setne	cl
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+25184], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+26464], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdx*4+25440], r13d
	setne	al
	or	ecx, eax
	shl	ecx, 2

; 771  : 						goto skip_final_permutation;
; 772  : 					found = TRUE;

	jmp	$LN791@SearchForT
$LN749@SearchForT:

; 803  : 
; 804  : 				} else if (searchMode == SEARCH_MODE_BACKWARD_MATCHING) {
; 805  : 					generatedTripcodeChunkArray[0] = 0x00000000;
; 806  : 
; 807  : 					uint32_t tripcodeCharIndex = GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 51, 19, 59, 27, 34,  2, 0);

	mov	edi, eax
	mov	edx, ebx
	mov	eax, ebx
	shr	rdi, 5
	mov	DWORD PTR generatedTripcodeChunkArray$[rbp-169], ebx
	test	DWORD PTR [r15+rdi*4+26304], r13d
	setne	dl
	add	edx, edx
	test	DWORD PTR [r15+rdi*4+25280], r13d
	setne	al
	or	edx, eax
	mov	eax, ebx
	add	edx, edx
	test	DWORD PTR [r15+rdi*4+26560], r13d
	setne	al
	or	edx, eax
	mov	eax, ebx
	add	edx, edx
	test	DWORD PTR [r15+rdi*4+25536], r13d
	setne	al
	or	edx, eax
	mov	eax, ebx
	add	edx, edx
	test	DWORD PTR [r15+rdi*4+25760], r13d
	setne	al
	or	edx, eax
	mov	eax, ebx
	add	edx, edx
	test	DWORD PTR [r15+rdi*4+24736], r13d
	setne	al
	or	edx, eax

; 808  : 					if (!context->tripcodeChunkBitmap[4][tripcodeCharIndex])

	cmp	BYTE PTR [rdx+r15+30224], bl
	je	$LN748@SearchForT

; 809  : 						goto skip_final_permutation;
; 810  : 					generatedTripcodeChunkArray[0] |= tripcodeCharIndex << (6 * 4);

	shl	edx, 24

; 811  : 
; 812  : 					tripcodeCharIndex = GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 42, 10, 50, 18, 58, 26, 0);

	test	DWORD PTR [r15+rdi*4+26016], r13d
	mov	ecx, ebx
	setne	cl
	mov	eax, ebx
	mov	DWORD PTR generatedTripcodeChunkArray$[rbp-169], edx
	add	ecx, ecx
	test	DWORD PTR [r15+rdi*4+24992], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdi*4+26272], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdi*4+25248], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdi*4+26528], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdi*4+25504], r13d
	setne	al
	or	ecx, eax

; 813  : 					if (!context->tripcodeChunkBitmap[3][tripcodeCharIndex])

	cmp	BYTE PTR [rcx+r15+30160], bl
	je	$LN748@SearchForT

; 814  : 						goto skip_final_permutation;
; 815  : 					generatedTripcodeChunkArray[0] |= tripcodeCharIndex << (6 * 3);

	shl	ecx, 18

; 816  : 
; 817  : 					tripcodeCharIndex = GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 33,  1, 41,  9, 49, 17, 0);

	mov	eax, ebx
	or	edx, ecx
	test	DWORD PTR [r15+rdi*4+25728], r13d
	mov	ecx, ebx
	setne	cl
	mov	DWORD PTR generatedTripcodeChunkArray$[rbp-169], edx
	add	ecx, ecx
	test	DWORD PTR [r15+rdi*4+24704], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdi*4+25984], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdi*4+24960], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdi*4+26240], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdi*4+25216], r13d
	setne	al
	or	ecx, eax

; 818  : 					if (!context->tripcodeChunkBitmap[2][tripcodeCharIndex])

	cmp	BYTE PTR [rcx+r15+30096], bl
	je	$LN748@SearchForT

; 819  : 						goto skip_final_permutation;
; 820  : 					generatedTripcodeChunkArray[0] |= tripcodeCharIndex << (6 * 2);

	shl	ecx, 12

; 821  : 
; 822  : 					tripcodeCharIndex = GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 57, 25, 32,  0, 40,  8, 0);

	mov	eax, ebx
	or	edx, ecx
	test	DWORD PTR [r15+rdi*4+26496], r13d
	mov	ecx, ebx
	setne	cl
	mov	DWORD PTR generatedTripcodeChunkArray$[rbp-169], edx
	add	ecx, ecx
	test	DWORD PTR [r15+rdi*4+25472], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdi*4+25696], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdi*4+24672], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdi*4+25952], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdi*4+24928], r13d
	setne	al
	or	ecx, eax

; 823  : 					if (!context->tripcodeChunkBitmap[1][tripcodeCharIndex])

	cmp	BYTE PTR [rcx+r15+30032], bl
	je	$LN748@SearchForT

; 824  : 						goto skip_final_permutation;
; 825  : 					generatedTripcodeChunkArray[0] |= tripcodeCharIndex << (6 * 1);

	shl	ecx, 6

; 826  : 
; 827  : 					tripcodeCharIndex = GET_TRIPCODE_CHAR_INDEX_LAST(context->dataBlocks, tripcodeIndex, 48, 16, 56, 24);

	mov	eax, ebx
	or	edx, ecx
	test	DWORD PTR [r15+rdi*4+26208], r13d
	mov	ecx, ebx
	setne	cl
	mov	DWORD PTR generatedTripcodeChunkArray$[rbp-169], edx
	add	ecx, ecx
	test	DWORD PTR [r15+rdi*4+25184], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdi*4+26464], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+rdi*4+25440], r13d
	setne	al
	or	ecx, eax
	shl	ecx, 2

; 828  : 					if (!context->tripcodeChunkBitmap[0][tripcodeCharIndex])

	cmp	BYTE PTR [rcx+r15+29968], bl
	je	$LN748@SearchForT

; 829  : 						goto skip_final_permutation;
; 830  : 					generatedTripcodeChunkArray[0] |= tripcodeCharIndex << (6 * 0);

	or	edx, ecx

; 831  : 
; 832  : 					QUICK_SEARCH_FOR_TRIPCODE_CHUNK(0)

	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, edx
	mov	DWORD PTR generatedTripcodeChunkArray$[rbp-169], edx
	shr	rax, 18
	cmp	BYTE PTR ?smallChunkBitmap@@3PAEA[rax+rcx], bl
	jne	$LN748@SearchForT
	mov	edi, DWORD PTR ?numTripcodeChunk@@3IA	; numTripcodeChunk
	xor	r8d, r8d
	dec	edi
	js	$LN748@SearchForT
	npad	9
$LL82@SearchForT:
	lea	ecx, DWORD PTR [rdi+r8]
	sar	ecx, 1
	movsxd	rax, ecx
	mov	r9d, DWORD PTR [r12+rax*4]
	cmp	edx, r9d
	jbe	SHORT $LN786@SearchForT
	lea	r8d, DWORD PTR [rcx+1]
	jmp	SHORT $LN77@SearchForT
$LN786@SearchForT:
	jae	$LN97@SearchForT
	lea	edi, DWORD PTR [rcx-1]
$LN77@SearchForT:
	cmp	r8d, edi
	jle	SHORT $LL82@SearchForT

; 601  : 		for (int32_t i = 4; i < lenTripcode; ++i)

	jmp	$LN748@SearchForT
$LN94@SearchForT:

; 833  : 
; 834  : 				} else if (searchMode == SEARCH_MODE_FORWARD_AND_BACKWARD_MATCHING) {

	cmp	DWORD PTR ?searchMode@@3HA, 2		; searchMode
	jne	$LN75@SearchForT

; 835  : 					generatedTripcodeChunkArray[0] = 0x00000000;
; 836  : 
; 837  : 					uint32_t tripcodeCharIndex = GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 63, 31, 38,  6, 46, 14, 0);

	mov	r10d, eax
	mov	edx, ebx
	mov	eax, ebx
	shr	r10, 5
	test	DWORD PTR [r15+r10*4+26688], r13d
	setne	dl
	add	edx, edx
	test	DWORD PTR [r15+r10*4+25664], r13d
	setne	al
	or	edx, eax
	mov	eax, ebx
	add	edx, edx
	test	DWORD PTR [r15+r10*4+25888], r13d
	setne	al
	or	edx, eax
	mov	eax, ebx
	add	edx, edx
	test	DWORD PTR [r15+r10*4+24864], r13d
	setne	al
	or	edx, eax
	mov	eax, ebx
	add	edx, edx
	test	DWORD PTR [r15+r10*4+26144], r13d
	setne	al
	or	edx, eax
	mov	eax, ebx
	add	edx, edx
	test	DWORD PTR [r15+r10*4+25120], r13d
	setne	al
	or	edx, eax

; 838  : 					if (!context->tripcodeChunkBitmap[4][tripcodeCharIndex])

	cmp	BYTE PTR [rdx+r15+30224], bl
	je	$LN780@SearchForT

; 839  : 						goto second_part;
; 840  : 					generatedTripcodeChunkArray[0] |= tripcodeCharIndex << (6 * 4);

	shl	edx, 24

; 841  : 
; 842  : 					tripcodeCharIndex = GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 54, 22, 62, 30, 37,  5, 0);

	test	DWORD PTR [r15+r10*4+26400], r13d
	mov	ecx, ebx
	setne	cl
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+r10*4+25376], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+r10*4+26656], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+r10*4+25632], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+r10*4+25856], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+r10*4+24832], r13d
	setne	al
	or	ecx, eax

; 843  : 					if (!context->tripcodeChunkBitmap[3][tripcodeCharIndex])

	cmp	BYTE PTR [rcx+r15+30160], bl
	je	$LN780@SearchForT

; 844  : 						goto second_part;
; 845  : 					generatedTripcodeChunkArray[0] |= tripcodeCharIndex << (6 * 3);

	shl	ecx, 18

; 846  : 
; 847  : 					tripcodeCharIndex = GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 45, 13, 53, 21, 61, 29, 0);

	mov	eax, ebx
	or	edx, ecx
	test	DWORD PTR [r15+r10*4+26112], r13d
	mov	ecx, ebx
	setne	cl
	add	ecx, ecx
	test	DWORD PTR [r15+r10*4+25088], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+r10*4+26368], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+r10*4+25344], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+r10*4+26624], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+r10*4+25600], r13d
	setne	al
	or	ecx, eax

; 848  : 					if (!context->tripcodeChunkBitmap[2][tripcodeCharIndex])

	cmp	BYTE PTR [rcx+r15+30096], bl
	je	$LN780@SearchForT

; 849  : 						goto second_part;
; 850  : 					generatedTripcodeChunkArray[0] |= tripcodeCharIndex << (6 * 2);

	shl	ecx, 12

; 851  : 
; 852  : 					tripcodeCharIndex = GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 36,  4, 44, 12, 52, 20, 0);

	mov	eax, ebx
	or	edx, ecx
	test	DWORD PTR [r15+r10*4+25824], r13d
	mov	ecx, ebx
	setne	cl
	add	ecx, ecx
	test	DWORD PTR [r15+r10*4+24800], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+r10*4+26080], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+r10*4+25056], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+r10*4+26336], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+r10*4+25312], r13d
	setne	al
	or	ecx, eax

; 853  : 					if (!context->tripcodeChunkBitmap[1][tripcodeCharIndex])

	cmp	BYTE PTR [rcx+r15+30032], bl
	je	$LN780@SearchForT

; 854  : 						goto second_part;
; 855  : 					generatedTripcodeChunkArray[0] |= tripcodeCharIndex << (6 * 1);

	shl	ecx, 6

; 856  : 
; 857  : 					tripcodeCharIndex = GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 60, 28, 35,  3, 43, 11, 0);

	mov	eax, ebx

; 858  : 					if (!context->tripcodeChunkBitmap[0][tripcodeCharIndex])
; 859  : 						goto second_part;
; 860  : 					generatedTripcodeChunkArray[0] |= tripcodeCharIndex << (6 * 0);
; 861  : 
; 862  : 					QUICK_SEARCH_FOR_TRIPCODE_CHUNK(0)

	lea	rdi, OFFSET FLAT:__ImageBase
	or	edx, ecx
	test	DWORD PTR [r15+r10*4+26592], r13d
	mov	ecx, ebx
	setne	cl
	add	ecx, ecx
	test	DWORD PTR [r15+r10*4+25568], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+r10*4+25792], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+r10*4+24768], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+r10*4+26048], r13d
	setne	al
	or	ecx, eax
	mov	eax, ebx
	add	ecx, ecx
	test	DWORD PTR [r15+r10*4+25024], r13d
	setne	al
	or	ecx, eax
	cmp	BYTE PTR [rcx+r15+29968], bl
	je	SHORT $second_part$795
	or	edx, ecx
	mov	eax, edx
	shr	rax, 18
	cmp	BYTE PTR ?smallChunkBitmap@@3PAEA[rax+rdi], bl
	jne	SHORT $second_part$795
	mov	edi, DWORD PTR ?numTripcodeChunk@@3IA	; numTripcodeChunk
	xor	r9d, r9d
	dec	edi
	js	SHORT $LN780@SearchForT
	npad	14
$LL63@SearchForT:
	lea	ecx, DWORD PTR [rdi+r9]
	sar	ecx, 1
	movsxd	rax, ecx
	mov	r8d, DWORD PTR [r12+rax*4]
	cmp	edx, r8d
	jbe	SHORT $LN787@SearchForT
	lea	r9d, DWORD PTR [rcx+1]
	jmp	SHORT $LN58@SearchForT
$LN787@SearchForT:
	jae	SHORT $LN59@SearchForT
	lea	edi, DWORD PTR [rcx-1]
$LN58@SearchForT:
	cmp	r9d, edi
	jle	SHORT $LL63@SearchForT

; 601  : 		for (int32_t i = 4; i < lenTripcode; ++i)

	jmp	SHORT $LN780@SearchForT
$LN59@SearchForT:

; 858  : 					if (!context->tripcodeChunkBitmap[0][tripcodeCharIndex])
; 859  : 						goto second_part;
; 860  : 					generatedTripcodeChunkArray[0] |= tripcodeCharIndex << (6 * 0);
; 861  : 
; 862  : 					QUICK_SEARCH_FOR_TRIPCODE_CHUNK(0)

	mov	ebx, 1
$LN780@SearchForT:
	lea	rdi, OFFSET FLAT:__ImageBase
$second_part$795:

; 863  : 
; 864  : second_part:
; 865  : 					generatedTripcodeChunkArray[0] = 0x00000000;
; 866  : 
; 867  : 					tripcodeCharIndex = GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 51, 19, 59, 27, 34,  2, 0);

	test	DWORD PTR [r15+r10*4+26304], r13d
	mov	edx, 0
	mov	eax, 0
	setne	dl
	mov	DWORD PTR generatedTripcodeChunkArray$[rbp-169], 0
	add	edx, edx
	test	DWORD PTR [r15+r10*4+25280], r13d
	setne	al
	or	edx, eax
	mov	eax, 0
	add	edx, edx
	test	DWORD PTR [r15+r10*4+26560], r13d
	setne	al
	or	edx, eax
	mov	eax, 0
	add	edx, edx
	test	DWORD PTR [r15+r10*4+25536], r13d
	setne	al
	or	edx, eax
	mov	eax, 0
	add	edx, edx
	test	DWORD PTR [r15+r10*4+25760], r13d
	setne	al
	or	edx, eax
	mov	eax, 0
	add	edx, edx
	test	DWORD PTR [r15+r10*4+24736], r13d
	setne	al
	or	edx, eax

; 868  : 					if (!context->tripcodeChunkBitmap[4][tripcodeCharIndex])

	cmp	BYTE PTR [rdx+r15+30224], 0
	je	$skip_final_permutation$796

; 869  : 						goto skip_final_permutation;
; 870  : 					generatedTripcodeChunkArray[0] |= tripcodeCharIndex << (6 * 4);

	shl	edx, 24

; 871  : 
; 872  : 					tripcodeCharIndex = GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 42, 10, 50, 18, 58, 26, 0);

	test	DWORD PTR [r15+r10*4+26016], r13d
	mov	ecx, 0
	setne	cl
	mov	eax, 0
	mov	DWORD PTR generatedTripcodeChunkArray$[rbp-169], edx
	add	ecx, ecx
	test	DWORD PTR [r15+r10*4+24992], r13d
	setne	al
	or	ecx, eax
	mov	eax, 0
	add	ecx, ecx
	test	DWORD PTR [r15+r10*4+26272], r13d
	setne	al
	or	ecx, eax
	mov	eax, 0
	add	ecx, ecx
	test	DWORD PTR [r15+r10*4+25248], r13d
	setne	al
	or	ecx, eax
	mov	eax, 0
	add	ecx, ecx
	test	DWORD PTR [r15+r10*4+26528], r13d
	setne	al
	or	ecx, eax
	mov	eax, 0
	add	ecx, ecx
	test	DWORD PTR [r15+r10*4+25504], r13d
	setne	al
	or	ecx, eax

; 873  : 					if (!context->tripcodeChunkBitmap[3][tripcodeCharIndex])

	cmp	BYTE PTR [rcx+r15+30160], 0
	je	$skip_final_permutation$796

; 874  : 						goto skip_final_permutation;
; 875  : 					generatedTripcodeChunkArray[0] |= tripcodeCharIndex << (6 * 3);

	shl	ecx, 18

; 876  : 
; 877  : 					tripcodeCharIndex = GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 33,  1, 41,  9, 49, 17, 0);

	mov	eax, 0
	or	edx, ecx
	test	DWORD PTR [r15+r10*4+25728], r13d
	mov	ecx, 0
	setne	cl
	mov	DWORD PTR generatedTripcodeChunkArray$[rbp-169], edx
	add	ecx, ecx
	test	DWORD PTR [r15+r10*4+24704], r13d
	setne	al
	or	ecx, eax
	mov	eax, 0
	add	ecx, ecx
	test	DWORD PTR [r15+r10*4+25984], r13d
	setne	al
	or	ecx, eax
	mov	eax, 0
	add	ecx, ecx
	test	DWORD PTR [r15+r10*4+24960], r13d
	setne	al
	or	ecx, eax
	mov	eax, 0
	add	ecx, ecx
	test	DWORD PTR [r15+r10*4+26240], r13d
	setne	al
	or	ecx, eax
	mov	eax, 0
	add	ecx, ecx
	test	DWORD PTR [r15+r10*4+25216], r13d
	setne	al
	or	ecx, eax

; 878  : 					if (!context->tripcodeChunkBitmap[2][tripcodeCharIndex])

	cmp	BYTE PTR [rcx+r15+30096], 0
	je	$skip_final_permutation$796

; 879  : 						goto skip_final_permutation;
; 880  : 					generatedTripcodeChunkArray[0] |= tripcodeCharIndex << (6 * 2);

	shl	ecx, 12

; 881  : 
; 882  : 					tripcodeCharIndex = GET_TRIPCODE_CHAR_INDEX(context->dataBlocks, tripcodeIndex, 57, 25, 32,  0, 40,  8, 0);

	mov	eax, 0
	or	edx, ecx
	test	DWORD PTR [r15+r10*4+26496], r13d
	mov	ecx, 0
	setne	cl
	mov	DWORD PTR generatedTripcodeChunkArray$[rbp-169], edx
	add	ecx, ecx
	test	DWORD PTR [r15+r10*4+25472], r13d
	setne	al
	or	ecx, eax
	mov	eax, 0
	add	ecx, ecx
	test	DWORD PTR [r15+r10*4+25696], r13d
	setne	al
	or	ecx, eax
	mov	eax, 0
	add	ecx, ecx
	test	DWORD PTR [r15+r10*4+24672], r13d
	setne	al
	or	ecx, eax
	mov	eax, 0
	add	ecx, ecx
	test	DWORD PTR [r15+r10*4+25952], r13d
	setne	al
	or	ecx, eax
	mov	eax, 0
	add	ecx, ecx
	test	DWORD PTR [r15+r10*4+24928], r13d
	setne	al
	or	ecx, eax

; 883  : 					if (!context->tripcodeChunkBitmap[1][tripcodeCharIndex])

	cmp	BYTE PTR [rcx+r15+30032], 0
	je	$skip_final_permutation$796

; 884  : 						goto skip_final_permutation;
; 885  : 					generatedTripcodeChunkArray[0] |= tripcodeCharIndex << (6 * 1);

	shl	ecx, 6

; 886  : 
; 887  : 					tripcodeCharIndex = GET_TRIPCODE_CHAR_INDEX_LAST(context->dataBlocks, tripcodeIndex, 48, 16, 56, 24);

	mov	eax, 0
	or	edx, ecx
	test	DWORD PTR [r15+r10*4+26208], r13d
	mov	ecx, 0
	setne	cl
	mov	DWORD PTR generatedTripcodeChunkArray$[rbp-169], edx
	add	ecx, ecx
	test	DWORD PTR [r15+r10*4+25184], r13d
	setne	al
	or	ecx, eax
	mov	eax, 0
	add	ecx, ecx
	test	DWORD PTR [r15+r10*4+26464], r13d
	setne	al
	or	ecx, eax
	mov	eax, 0
	add	ecx, ecx
	test	DWORD PTR [r15+r10*4+25440], r13d
	setne	al
	or	ecx, eax
	shl	ecx, 2

; 888  : 					if (!context->tripcodeChunkBitmap[0][tripcodeCharIndex])

	cmp	BYTE PTR [rcx+r15+29968], 0
	je	$skip_final_permutation$796

; 889  : 						goto skip_final_permutation;
; 890  : 					generatedTripcodeChunkArray[0] |= tripcodeCharIndex << (6 * 0);

	or	edx, ecx
	mov	DWORD PTR generatedTripcodeChunkArray$[rbp-169], edx

; 891  : 
; 892  : 					QUICK_SEARCH_FOR_TRIPCODE_CHUNK(0)

	test	ebx, ebx
	jne	$LN28@SearchForT
	mov	eax, edx
	shr	rax, 18
	cmp	BYTE PTR ?smallChunkBitmap@@3PAEA[rax+rdi], bl
	jne	$LN748@SearchForT
	mov	edi, DWORD PTR ?numTripcodeChunk@@3IA	; numTripcodeChunk
	xor	r8d, r8d
	dec	edi
	js	$LN748@SearchForT
$LL46@SearchForT:
	lea	ecx, DWORD PTR [rdi+r8]
	sar	ecx, 1
	movsxd	rax, ecx
	mov	r9d, DWORD PTR [r12+rax*4]
	cmp	edx, r9d
	jbe	SHORT $LN788@SearchForT
	lea	r8d, DWORD PTR [rcx+1]
	jmp	SHORT $LN41@SearchForT
$LN788@SearchForT:
	jae	$LN97@SearchForT
	lea	edi, DWORD PTR [rcx-1]
$LN41@SearchForT:
	cmp	r8d, edi
	jle	SHORT $LL46@SearchForT

; 601  : 		for (int32_t i = 4; i < lenTripcode; ++i)

	jmp	$LN748@SearchForT
$LN75@SearchForT:

; 893  : 
; 894  : 				} else {
; 895  : 					DES_GetTripcodeChunks(context, tripcodeIndex, generatedTripcodeChunkArray, searchMode);

	lea	r8, QWORD PTR generatedTripcodeChunkArray$[rbp-169]
	mov	edx, eax
	mov	rcx, r15
	call	?DES_GetTripcodeChunks@@YAXPEAUDES_Context@@HPEAIH@Z ; DES_GetTripcodeChunks

; 896  : 					int32_t maxPos = (searchMode == SEARCH_MODE_FLEXIBLE || searchMode == SEARCH_MODE_FORWARD_AND_BACKWARD_MATCHING)
; 897  : 						                ? (lenTripcode - MIN_LEN_EXPANDED_PATTERN)
; 898  : 						                : (0);

	cmp	DWORD PTR ?searchMode@@3HA, 3		; searchMode
	je	SHORT $LN429@SearchForT
	xor	eax, eax
	jmp	SHORT $LN789@SearchForT
$LN429@SearchForT:
	mov	eax, DWORD PTR ?lenTripcode@@3HA	; lenTripcode
	add	eax, -5
$LN789@SearchForT:

; 899  : 					for (int32_t pos = 0; !found && pos <= maxPos; ++pos)

	xor	r9d, r9d
	movsxd	r10, eax
$LL39@SearchForT:
	cmp	r9, r10
	jg	SHORT $skip_final_permutation$796

; 900  : 						QUICK_SEARCH_FOR_TRIPCODE_CHUNK(pos)

	test	ebx, ebx
	jne	SHORT $LN38@SearchForT
	mov	r8d, DWORD PTR generatedTripcodeChunkArray$[rbp+r9*4-169]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, r8d
	shr	rax, 18
	cmp	BYTE PTR ?smallChunkBitmap@@3PAEA[rax+rcx], bl
	jne	SHORT $LN38@SearchForT
	mov	edx, DWORD PTR ?numTripcodeChunk@@3IA	; numTripcodeChunk
	xor	edi, edi
	dec	edx
	js	SHORT $LN38@SearchForT
	npad	10
$LL35@SearchForT:
	lea	eax, DWORD PTR [rdx+rdi]
	sar	eax, 1
	movsxd	rcx, eax
	mov	ecx, DWORD PTR [r12+rcx*4]
	cmp	r8d, ecx
	jbe	SHORT $LN790@SearchForT
	lea	edi, DWORD PTR [rax+1]
	jmp	SHORT $LN30@SearchForT
$LN790@SearchForT:
	jae	SHORT $LN31@SearchForT
	lea	edx, DWORD PTR [rax-1]
$LN30@SearchForT:
	cmp	edi, edx
	jle	SHORT $LL35@SearchForT

; 601  : 		for (int32_t i = 4; i < lenTripcode; ++i)

	jmp	SHORT $LN38@SearchForT
$LN31@SearchForT:

; 900  : 						QUICK_SEARCH_FOR_TRIPCODE_CHUNK(pos)

	mov	ebx, 1
$LN38@SearchForT:

; 899  : 					for (int32_t pos = 0; !found && pos <= maxPos; ++pos)

	inc	r9
	test	ebx, ebx
	je	SHORT $LL39@SearchForT

; 901  : 				}
; 902  : 
; 903  : skip_final_permutation:
; 904  : 				// Construct a valid 10 character key if necessary.
; 905  : 				if (found || searchForSpecialPatternsOnCPU) {

	jmp	SHORT $LN28@SearchForT
$skip_final_permutation$796:
	test	ebx, ebx
	jne	SHORT $LN28@SearchForT
$LN748@SearchForT:
	cmp	DWORD PTR ?searchForSpecialPatternsOnCPU@@3HA, 0 ; searchForSpecialPatternsOnCPU
	je	$LN139@SearchForT
$LN28@SearchForT:

; 906  : 					key[6] = tableForKey6[(int32_t)randomByteKey6 + (tripcodeIndex >> 5)];

	movzx	eax, BYTE PTR randomValue$2[rbp-169]
	mov	r9d, DWORD PTR tripcodeIndex$1$[rbp-169]
	mov	ecx, r9d
	shr	ecx, 5
	add	eax, ecx
	mov	rcx, QWORD PTR tableForKey6$1$[rbp-169]
	movzx	ecx, BYTE PTR [rax+rcx]
	mov	BYTE PTR key$[rbp-163], cl

; 907  : 					BOOL isKey7SecondByte = !isKey6SecondByte && IS_FIRST_BYTE_SJIS_FULL(key[6]);

	test	rsi, rsi
	jne	SHORT $LN435@SearchForT
	lea	eax, DWORD PTR [rcx+127]
	cmp	al, 3
	jbe	SHORT $LN433@SearchForT
	lea	eax, DWORD PTR [rcx+120]
	cmp	al, 23
	jbe	SHORT $LN433@SearchForT
	add	cl, 32					; 00000020H
	cmp	cl, 10
	ja	SHORT $LN435@SearchForT
$LN433@SearchForT:
	mov	edx, 1

; 908  : 					tableForKey7 = (isKey7SecondByte) ? (context->keyCharTable_SecondByte) : (context->keyCharTable_FirstByte);

	lea	rdi, QWORD PTR [r15+29456]
	jmp	SHORT $LN438@SearchForT
$LN435@SearchForT:

; 907  : 					BOOL isKey7SecondByte = !isKey6SecondByte && IS_FIRST_BYTE_SJIS_FULL(key[6]);

	xor	edx, edx

; 908  : 					tableForKey7 = (isKey7SecondByte) ? (context->keyCharTable_SecondByte) : (context->keyCharTable_FirstByte);

	lea	rdi, QWORD PTR [r15+28944]
$LN438@SearchForT:

; 909  : 					key[7] = tableForKey7[(int32_t)randomByteKey7 + (tripcodeIndex & 0x1f)];

	movzx	eax, BYTE PTR randomValue$3[rbp-169]
	mov	ecx, r9d
	and	ecx, 31
	add	ecx, eax
	movzx	ecx, BYTE PTR [rcx+rdi]
	mov	BYTE PTR key$[rbp-162], cl

; 910  : 					if (!isKey7SecondByte && IS_FIRST_BYTE_SJIS_FULL(key[7])) {

	test	edx, edx
	jne	SHORT $LN27@SearchForT
	lea	eax, DWORD PTR [rcx+127]
	cmp	al, 3
	jbe	SHORT $LN26@SearchForT
	lea	eax, DWORD PTR [rcx+120]
	cmp	al, 23
	jbe	SHORT $LN26@SearchForT
	add	cl, 32					; 00000020H
	cmp	cl, 10
	ja	SHORT $LN27@SearchForT
$LN26@SearchForT:

; 911  : 						key[8] = keyCharTable_SecondByte [randomByteKey8];

	movzx	eax, BYTE PTR randomValue$4[rbp-169]
	lea	rdx, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR ?keyCharTable_SecondByte@@3PAEA[rax+rdx]
	mov	BYTE PTR key$[rbp-161], al

; 912  : 						key[9] = keyCharTable_OneByte[randomByteKey9];

	movzx	eax, r14b
	movzx	eax, BYTE PTR ?keyCharTable_OneByte@@3PAEA[rax+rdx]
	mov	BYTE PTR key$[rbp-160], al

; 913  : 					} else {

	jmp	SHORT $LN23@SearchForT
$LN27@SearchForT:
; File z:\github\merikens-tripcode-engine\sourcefiles\main.cpp

; 1715 : 	if (options.maximizeKeySpace) {

	cmp	DWORD PTR ?options@@3UOptions@@A+88, 0
; File z:\github\merikens-tripcode-engine\sourcefiles\cpu10.h

; 914  : 						key[8] = keyCharTable_FirstByte  [randomByteKey8];

	movzx	eax, BYTE PTR randomValue$4[rbp-169]
	lea	rdx, OFFSET FLAT:__ImageBase
	movzx	ecx, BYTE PTR ?keyCharTable_FirstByte@@3PAEA[rax+rdx]
	mov	BYTE PTR key$[rbp-161], cl
; File z:\github\merikens-tripcode-engine\sourcefiles\main.cpp

; 1715 : 	if (options.maximizeKeySpace) {

	je	SHORT $LN450@SearchForT
	lea	eax, DWORD PTR [rcx+127]
	cmp	al, 3
	jbe	SHORT $LN752@SearchForT
	lea	eax, DWORD PTR [rcx+120]
	cmp	al, 23
	jbe	SHORT $LN752@SearchForT

; 1716 : 		return IS_FIRST_BYTE_SJIS_FULL(ch);

	add	cl, 32					; 00000020H
	cmp	cl, 10
	jmp	SHORT $LN792@SearchForT
$LN450@SearchForT:
	cmp	cl, 152					; 00000098H
	je	SHORT $LN459@SearchForT
	cmp	cl, 136					; 00000088H
	jbe	SHORT $LN459@SearchForT
	cmp	cl, 160					; 000000a0H
	jb	SHORT $LN752@SearchForT
$LN459@SearchForT:

; 1717 : 	} else {
; 1718 : 		return IS_FIRST_BYTE_SJIS_CONSERVATIVE(ch);

	add	cl, 32					; 00000020H
	cmp	cl, 9
$LN792@SearchForT:
	ja	SHORT $LN439@SearchForT
$LN752@SearchForT:
; File z:\github\merikens-tripcode-engine\sourcefiles\cpu10.h

; 917  : 									: keyCharTable_OneByte[randomByteKey9];

	movzx	eax, r14b
	movzx	ecx, BYTE PTR ?keyCharTable_SecondByte@@3PAEA[rax+rdx]
	jmp	SHORT $LN440@SearchForT
$LN439@SearchForT:
	movzx	eax, r14b
	movzx	ecx, BYTE PTR ?keyCharTable_OneByte@@3PAEA[rax+rdx]
$LN440@SearchForT:
	mov	BYTE PTR key$[rbp-160], cl
$LN23@SearchForT:

; 918  : 					}
; 919  : 				}
; 920  : 				if (found) {

	test	ebx, ebx
	je	SHORT $LN22@SearchForT

; 921  : 					ProcessPossibleMatch(DES_GetTripcode(context, tripcodeIndex, tripcode), key);

	lea	r8, QWORD PTR tripcode$[rbp-169]
	mov	edx, r9d
	mov	rcx, r15
	call	?DES_GetTripcode@@YAPEAEPEAUDES_Context@@HPEAE@Z ; DES_GetTripcode
	lea	rdx, QWORD PTR key$[rbp-169]
	mov	rcx, rax
	call	?ProcessPossibleMatch@@YAXPEAE0@Z	; ProcessPossibleMatch
	mov	r12, QWORD PTR ?tripcodeChunkArray@@3PEAIEA ; tripcodeChunkArray
	jmp	$LN139@SearchForT
$LN22@SearchForT:

; 922  : 				} else if (!found && searchForSpecialPatternsOnCPU) {                                                                                                           \

	cmp	DWORD PTR ?searchForSpecialPatternsOnCPU@@3HA, 0 ; searchForSpecialPatternsOnCPU
	je	$LN139@SearchForT

; 923  : 					DES_GetTripcode(context, tripcodeIndex, tripcode);

	lea	r8, QWORD PTR tripcode$[rbp-169]
	mov	edx, r9d
	mov	rcx, r15
	call	?DES_GetTripcode@@YAPEAEPEAUDES_Context@@HPEAE@Z ; DES_GetTripcode

; 924  : 					if (   options.searchForKaibunOnCPU
; 925  : 						&& tripcode[0] == tripcode[ 9]
; 926  : 						&& tripcode[1] == tripcode[ 8]
; 927  : 						&& tripcode[2] == tripcode[ 7]
; 928  : 						&& tripcode[3] == tripcode[ 6]
; 929  : 						&& tripcode[4] == tripcode[ 5] ) {

	cmp	DWORD PTR ?options@@3UOptions@@A+60, 0
	movzx	r14d, BYTE PTR tripcode$[rbp-160]
	movzx	r10d, BYTE PTR tripcode$[rbp-161]
	movzx	esi, BYTE PTR tripcode$[rbp-162]
	movzx	r9d, BYTE PTR tripcode$[rbp-163]
	movzx	ebx, BYTE PTR tripcode$[rbp-164]
	movzx	r8d, BYTE PTR tripcode$[rbp-165]
	movzx	r11d, BYTE PTR tripcode$[rbp-166]
	movzx	edi, BYTE PTR tripcode$[rbp-167]
	movzx	edx, BYTE PTR tripcode$[rbp-168]
	movzx	ecx, BYTE PTR tripcode$[rbp-169]
	je	SHORT $LN19@SearchForT
	cmp	cl, r14b
	jne	SHORT $LN19@SearchForT
	cmp	dl, r10b
	jne	SHORT $LN19@SearchForT
	cmp	dil, sil
	jne	SHORT $LN19@SearchForT
	cmp	r11b, r9b
	jne	SHORT $LN19@SearchForT
	cmp	r8b, bl
	je	$LN793@SearchForT
$LN19@SearchForT:

; 930  : 						ProcessMatch(tripcode, key);
; 931  : 					} else if (   options.searchForKagamiOnCPU
; 932  : 								&& charTableForKagami[tripcode[0]] == tripcode[ 9]
; 933  :  								&& charTableForKagami[tripcode[1]] == tripcode[ 8]
; 934  : 								&& charTableForKagami[tripcode[2]] == tripcode[ 7]
; 935  : 								&& charTableForKagami[tripcode[3]] == tripcode[ 6]
; 936  : 								&& charTableForKagami[tripcode[4]] == tripcode[ 5]
; 937  : 					) {

	cmp	DWORD PTR ?options@@3UOptions@@A+72, 0
	je	$LN17@SearchForT
	lea	r12, OFFSET FLAT:__ImageBase
	movzx	eax, cl
	cmp	BYTE PTR ?charTableForKagami@@3PAEA[rax+r12], r14b
	mov	r12, QWORD PTR ?tripcodeChunkArray@@3PEAIEA ; tripcodeChunkArray
	jne	SHORT $LN17@SearchForT
	lea	rbx, OFFSET FLAT:__ImageBase
	movzx	eax, dl
	cmp	BYTE PTR ?charTableForKagami@@3PAEA[rax+rbx], r10b
	movzx	ebx, BYTE PTR tripcode$[rbp-164]
	jne	SHORT $LN17@SearchForT
	lea	r8, OFFSET FLAT:__ImageBase
	movzx	eax, dil
	cmp	BYTE PTR ?charTableForKagami@@3PAEA[rax+r8], sil
	movzx	r8d, BYTE PTR tripcode$[rbp-165]
	jne	SHORT $LN17@SearchForT
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	eax, r11b
	cmp	BYTE PTR ?charTableForKagami@@3PAEA[rax+rcx], r9b
	movzx	ecx, BYTE PTR tripcode$[rbp-169]
	jne	SHORT $LN17@SearchForT
	lea	r12, OFFSET FLAT:__ImageBase
	movzx	eax, r8b
	cmp	BYTE PTR ?charTableForKagami@@3PAEA[rax+r12], bl
	mov	r12, QWORD PTR ?tripcodeChunkArray@@3PEAIEA ; tripcodeChunkArray
	je	$LN793@SearchForT
$LN17@SearchForT:

; 938  : 						ProcessMatch(tripcode, key);
; 939  : 					} else if (   options.searchForYamabikoOnCPU
; 940  : 								&& tripcode[0] == tripcode[ 5]
; 941  : 								&& tripcode[1] == tripcode[ 6]
; 942  : 								&& tripcode[2] == tripcode[ 7]
; 943  : 								&& tripcode[3] == tripcode[ 8]
; 944  : 								&& tripcode[4] == tripcode[ 9] ) {

	cmp	DWORD PTR ?options@@3UOptions@@A+64, 0
	je	SHORT $LN15@SearchForT
	cmp	cl, bl
	jne	SHORT $LN15@SearchForT
	cmp	dl, r9b
	jne	SHORT $LN15@SearchForT
	cmp	dil, sil
	jne	SHORT $LN15@SearchForT
	cmp	r11b, r10b
	jne	SHORT $LN15@SearchForT
	cmp	r8b, r14b
	je	$LN793@SearchForT
$LN15@SearchForT:

; 945  : 						ProcessMatch(tripcode, key);
; 946  : 					} else if (   options.searchForSourenOnCPU
; 947  : 								&& tripcode[ 0] == tripcode[ 1]
; 948  : 								&& tripcode[ 2] == tripcode[ 3]
; 949  : 								&& tripcode[ 4] == tripcode[ 5]
; 950  : 								&& tripcode[ 6] == tripcode[ 7]
; 951  : 								&& tripcode[ 8] == tripcode[ 9] ) {

	cmp	DWORD PTR ?options@@3UOptions@@A+68, 0
	je	SHORT $LN13@SearchForT
	cmp	cl, dl
	jne	SHORT $LN13@SearchForT
	cmp	dil, r11b
	jne	SHORT $LN13@SearchForT
	cmp	r8b, bl
	jne	SHORT $LN13@SearchForT
	cmp	r9b, sil
	jne	SHORT $LN13@SearchForT
	cmp	r10b, r14b
	je	$LN793@SearchForT
$LN13@SearchForT:

; 952  : 						ProcessMatch(tripcode, key);
; 953  : 					} else if (   options.searchForHisekiOnCPU
; 954  : 								&& tripcode[ 0] == '.'
; 955  : 								&& tripcode[ 2] == '.'
; 956  : 								&& tripcode[ 4] == '.'
; 957  : 								&& tripcode[ 6] == '.'
; 958  : 								&& tripcode[ 8] == '.') {

	cmp	DWORD PTR ?options@@3UOptions@@A+52, 0
	je	SHORT $LN5@SearchForT
	cmp	cl, 46					; 0000002eH
	jne	SHORT $LN11@SearchForT
	cmp	dil, cl
	jne	SHORT $LN11@SearchForT
	cmp	r8b, cl
	jne	SHORT $LN11@SearchForT
	cmp	r9b, cl
	jne	SHORT $LN11@SearchForT
	cmp	r10b, cl
	je	SHORT $LN793@SearchForT
$LN11@SearchForT:

; 959  : 						ProcessMatch(tripcode, key);
; 960  : 					} else if (   options.searchForHisekiOnCPU
; 961  : 								&& tripcode[ 1] == '.'
; 962  : 								&& tripcode[ 3] == '.'
; 963  : 								&& tripcode[ 5] == '.'
; 964  : 								&& tripcode[ 7] == '.'
; 965  : 								&& tripcode[ 9] == '.') {

	cmp	dl, 46					; 0000002eH
	jne	SHORT $LN9@SearchForT
	cmp	r11b, dl
	jne	SHORT $LN9@SearchForT
	cmp	bl, dl
	jne	SHORT $LN9@SearchForT
	cmp	sil, dl
	jne	SHORT $LN9@SearchForT
	cmp	r14b, dl
	je	SHORT $LN793@SearchForT
$LN9@SearchForT:

; 966  : 						ProcessMatch(tripcode, key);
; 967  : 					} else if (   options.searchForHisekiOnCPU
; 968  : 								&& tripcode[ 0] == '/'
; 969  : 								&& tripcode[ 2] == '/'
; 970  : 								&& tripcode[ 4] == '/'
; 971  : 								&& tripcode[ 6] == '/'
; 972  : 								&& tripcode[ 8] == '/') {

	cmp	cl, 47					; 0000002fH
	jne	SHORT $LN7@SearchForT
	cmp	dil, cl
	jne	SHORT $LN7@SearchForT
	cmp	r8b, cl
	jne	SHORT $LN7@SearchForT
	cmp	r9b, cl
	jne	SHORT $LN7@SearchForT
	cmp	r10b, cl
	je	SHORT $LN793@SearchForT
$LN7@SearchForT:

; 973  : 						ProcessMatch(tripcode, key);
; 974  : 					} else if (   options.searchForHisekiOnCPU
; 975  : 								&& tripcode[ 1] == '/'
; 976  : 								&& tripcode[ 3] == '/'
; 977  : 								&& tripcode[ 5] == '/'
; 978  : 								&& tripcode[ 7] == '/'
; 979  : 								&& tripcode[ 9] == '/') {

	cmp	dl, 47					; 0000002fH
	jne	SHORT $LN5@SearchForT
	cmp	r11b, dl
	jne	SHORT $LN5@SearchForT
	cmp	bl, dl
	jne	SHORT $LN5@SearchForT
	cmp	sil, dl
	jne	SHORT $LN5@SearchForT
	cmp	r14b, dl
	je	SHORT $LN793@SearchForT
$LN5@SearchForT:

; 980  : 						ProcessMatch(tripcode, key);
; 981  : 					} else if (   options.searchForKakuhiOnCPU
; 982  : 								&& tripcode[ 2] == tripcode[0]
; 983  : 								&& tripcode[ 4] == tripcode[0]
; 984  : 								&& tripcode[ 6] == tripcode[0]
; 985  : 								&& tripcode[ 8] == tripcode[0]) {

	cmp	DWORD PTR ?options@@3UOptions@@A+56, 0
	je	SHORT $LN774@SearchForT
	cmp	dil, cl
	jne	SHORT $LN3@SearchForT
	cmp	r8b, cl
	jne	SHORT $LN3@SearchForT
	cmp	r9b, cl
	jne	SHORT $LN3@SearchForT
	cmp	r10b, cl
	je	SHORT $LN793@SearchForT
$LN3@SearchForT:

; 986  : 						ProcessMatch(tripcode, key);
; 987  : 					} else if (   options.searchForKakuhiOnCPU
; 988  : 								&& tripcode[ 3] == tripcode[1]
; 989  : 								&& tripcode[ 5] == tripcode[1]
; 990  : 								&& tripcode[ 7] == tripcode[1]
; 991  : 								&& tripcode[ 9] == tripcode[1]) {

	cmp	r11b, dl
	jne	SHORT $LN774@SearchForT
	cmp	bl, dl
	jne	SHORT $LN774@SearchForT
	cmp	sil, dl
	jne	SHORT $LN774@SearchForT
	cmp	r14b, dl
	jne	SHORT $LN774@SearchForT
$LN793@SearchForT:

; 992  : 						ProcessMatch(tripcode, key);

	lea	rdx, QWORD PTR key$[rbp-169]
	lea	rcx, QWORD PTR tripcode$[rbp-169]
	call	?ProcessMatch@@YAXPEAE0@Z		; ProcessMatch
	mov	r12, QWORD PTR ?tripcodeChunkArray@@3PEAIEA ; tripcodeChunkArray
$LN774@SearchForT:
	mov	rsi, QWORD PTR tv11590[rsp]
	mov	r14d, DWORD PTR randomValue$1[rsp]
$LN139@SearchForT:

; 738  : 			numGeneratedTripcodes += BITSLICE_DES_DEPTH;
; 739  : 
; 740  : 			// continue;
; 741  : 
; 742  : 			for (tripcodeIndex = 0; tripcodeIndex < BITSLICE_DES_DEPTH; ++tripcodeIndex) {

	rol	r13d, 1
	mov	eax, DWORD PTR tripcodeIndex$1$[rbp-169]
	inc	eax
	mov	DWORD PTR tripcodeIndex$1$[rbp-169], eax
	cmp	eax, 256				; 00000100H
	jb	$LL140@SearchForT

; 669  : 
; 670  : 		for (indexKey5 = 0; indexKey5 <= CPU_DES_MAX_INDEX_FOR_KEYS; ++indexKey5) {

	mov	r8d, DWORD PTR indexKey5$1$[rbp-169]
	mov	rcx, QWORD PTR $T6[rbp-169]
	mov	rdx, QWORD PTR tableForKey5$1$[rbp-169]
	mov	ebx, DWORD PTR numGeneratedTripcodes$1$[rbp-169]
	movzx	r11d, BYTE PTR randomValue$2[rbp-169]
	inc	r8d
	inc	rcx
	mov	DWORD PTR indexKey5$1$[rbp-169], r8d
	cmp	r8d, 31
	mov	r8, QWORD PTR tv11591[rbp-169]
	lea	rdi, QWORD PTR [r15+28256]
	lea	r9, QWORD PTR [r15+28480]
	mov	QWORD PTR $T6[rbp-169], rcx
	lea	r10, QWORD PTR [r15+28512]
	lea	rsi, QWORD PTR [r15+28704]
	mov	r13d, 0
	jbe	$LL209@SearchForT

; 655  : 				
; 656  : 	for (indexKey4 = 0; indexKey4 <= CPU_DES_MAX_INDEX_FOR_KEYS; ++indexKey4) {

	mov	r12d, DWORD PTR indexKey4$1$[rbp-169]
	mov	rcx, QWORD PTR $T5[rbp-169]
	movzx	r11d, BYTE PTR randomValue$2[rbp-169]
	mov	rdx, QWORD PTR tableForKey4$1$[rbp-169]
	inc	r12d
	inc	rcx
	mov	DWORD PTR indexKey4$1$[rbp-169], r12d
	cmp	r12d, 31
	mov	r12, QWORD PTR tv11576[rbp-169]
	mov	QWORD PTR $T5[rbp-169], rcx
	lea	rdi, QWORD PTR [r15+28256]
	lea	r8, QWORD PTR [r15+28032]
	lea	r9, QWORD PTR [r15+28480]
	lea	r10, QWORD PTR [r15+28512]
	lea	rsi, QWORD PTR [r15+28704]
	jbe	$LL246@SearchForT

; 993  : 					}
; 994  : 				}
; 995  : 			}
; 996  : 		}
; 997  : 	}
; 998  : 
; 999  : 	return numGeneratedTripcodes;

	mov	r14, QWORD PTR [rsp+224]
	mov	r12, QWORD PTR [rsp+296]
	mov	rdi, QWORD PTR [rsp+288]
	mov	rsi, QWORD PTR [rsp+280]
	mov	eax, ebx

; 1000 : }

	mov	rcx, QWORD PTR __$ArrayPad$[rbp-169]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 232				; 000000e8H
	pop	r15
	pop	r13
	pop	rbx
	pop	rbp
	ret	0
$LN794@SearchForT:

; 591  : 	tripcode[lenTripcode] = '\0';

	call	__report_rangecheckfailure
	int	3
$LN781@SearchForT:
?SearchForTripcodes@@YAIPEAUDES_Context@@@Z ENDP	; SearchForTripcodes
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\github\merikens-tripcode-engine\sourcefiles\cpu10.h
;	COMDAT ?GetCrypt25Address@@YAPEADPEAUDES_Context@@@Z
_TEXT	SEGMENT
context$ = 48
?GetCrypt25Address@@YAPEADPEAUDES_Context@@@Z PROC	; GetCrypt25Address, COMDAT

; 1003 : {

	sub	rsp, 40					; 00000028H

; 1004 : #ifdef _M_X64
; 1005 : 	return (char *)(context->useAVX2                       ? DES_Crypt25_x64_AVX2         :
; 1006 : 		            context->useAVX                        ? DES_Crypt25_x64_AVX          :
; 1007 : 		            IsCPUBasedOnNehalemMicroarchitecture() ? DES_Crypt25_x64_SSE2_Nehalem :
; 1008 : 					                                         DES_Crypt25_x64_SSE2          );

	cmp	DWORD PTR [rcx+28936], 0
	je	SHORT $LN3@GetCrypt25
	lea	rax, OFFSET FLAT:DES_Crypt25_x64_AVX

; 1009 : #else
; 1010 : 	return (char *)(context->useAVX2                       ? DES_Crypt25_x86_AVX2         :
; 1011 : 		            context->useAVX                        ? DES_Crypt25_x86_AVX          :
; 1012 : 		            IsCPUBasedOnNehalemMicroarchitecture() ? DES_Crypt25_x86_SSE2_Nehalem :
; 1013 : 				                                             DES_Crypt25_x86_SSE2          );
; 1014 : #endif
; 1015 : }

	add	rsp, 40					; 00000028H
	ret	0
$LN3@GetCrypt25:

; 1004 : #ifdef _M_X64
; 1005 : 	return (char *)(context->useAVX2                       ? DES_Crypt25_x64_AVX2         :
; 1006 : 		            context->useAVX                        ? DES_Crypt25_x64_AVX          :
; 1007 : 		            IsCPUBasedOnNehalemMicroarchitecture() ? DES_Crypt25_x64_SSE2_Nehalem :
; 1008 : 					                                         DES_Crypt25_x64_SSE2          );

	call	?IsCPUBasedOnNehalemMicroarchitecture@@YAHXZ ; IsCPUBasedOnNehalemMicroarchitecture
	lea	rcx, OFFSET FLAT:DES_Crypt25_x64_SSE2
	lea	rdx, OFFSET FLAT:DES_Crypt25_x64_SSE2_Nehalem
	test	eax, eax
	cmovne	rcx, rdx
	mov	rax, rcx

; 1009 : #else
; 1010 : 	return (char *)(context->useAVX2                       ? DES_Crypt25_x86_AVX2         :
; 1011 : 		            context->useAVX                        ? DES_Crypt25_x86_AVX          :
; 1012 : 		            IsCPUBasedOnNehalemMicroarchitecture() ? DES_Crypt25_x86_SSE2_Nehalem :
; 1013 : 				                                             DES_Crypt25_x86_SSE2          );
; 1014 : #endif
; 1015 : }

	add	rsp, 40					; 00000028H
	ret	0
?GetCrypt25Address@@YAPEADPEAUDES_Context@@@Z ENDP	; GetCrypt25Address
_TEXT	ENDS
END
