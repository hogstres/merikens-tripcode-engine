; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

include listing.inc

INCLUDELIB OLDNAMES

wasMatchedTripcodeTableInitialized DD 01H DUP (?)
_BSS	ENDS
	ORG $+1
$SG4294875546 DB '%d', 0aH, 00H
$SG4294875544 DB 'Not enough memory', 00H
	ORG $+6
$SG4294875545 DB '[error],%d', 0aH, 00H
	ORG $+4
$SG4294875543 DB 0aH, 'ERROR', 0aH, '=====', 0aH, '  %s', 0aH, 07H, 0aH, ' '
	DB	' Hit any key to exit.', 00H
PUBLIC	?IsTripcodeDuplicate@@YAHPEAE@Z			; IsTripcodeDuplicate
_Tuple_alloc DB	01H DUP (?)
	ALIGN	8

errno_ecat DQ	01H DUP (?)
ignore	DB	01H DUP (?)
	ALIGN	4

duplicates_spinlock DD 01H DUP (?)
allocator_arg DB 01H DUP (?)
	ALIGN	8

native_ecat DQ	01H DUP (?)
piecewise_construct DB 01H DUP (?)
	ALIGN	8

matchedTripcodeTable DQ 01000H DUP (?)
posix_category DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Enative_ecat@system@boost@@YAXXZ DD imagerel ??__Enative_ecat@system@boost@@YAXXZ
	DD	imagerel ??__Enative_ecat@system@boost@@YAXXZ+21
	DD	imagerel $unwind$??__Enative_ecat@system@boost@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Eerrno_ecat@system@boost@@YAXXZ DD imagerel ??__Eerrno_ecat@system@boost@@YAXXZ
	DD	imagerel ??__Eerrno_ecat@system@boost@@YAXXZ+21
	DD	imagerel $unwind$??__Eerrno_ecat@system@boost@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Eposix_category@system@boost@@YAXXZ DD imagerel ??__Eposix_category@system@boost@@YAXXZ
	DD	imagerel ??__Eposix_category@system@boost@@YAXXZ+21
	DD	imagerel $unwind$??__Eposix_category@system@boost@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?IsTripcodeDuplicate@@YAHPEAE@Z DD imagerel $LN207
	DD	imagerel $LN207+907
	DD	imagerel $unwind$?IsTripcodeDuplicate@@YAHPEAE@Z
;	COMDAT xdata
xdata	SEGMENT
$unwind$?IsTripcodeDuplicate@@YAHPEAE@Z DD 0a2519H
	DD	0125416H
	DD	0113416H
	DD	0f0129216H
	DD	0c00ee010H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	048H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Eposix_category@system@boost@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Eerrno_ecat@system@boost@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Enative_ecat@system@boost@@YAXXZ DD 010401H
	DD	04204H
posix_category$initializer$ DQ FLAT:??__Eposix_category@system@boost@@YAXXZ
errno_ecat$initializer$ DQ FLAT:??__Eerrno_ecat@system@boost@@YAXXZ
native_ecat$initializer$ DQ FLAT:??__Enative_ecat@system@boost@@YAXXZ
duplicates_spinlock$initializer$ DQ FLAT:??__Eduplicates_spinlock@@YAXXZ
; Function compile flags: /Ogtpy
; File z:\github\merikens-tripcode-engine\sourcefiles\verificationduplicates.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\thread
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h
; File z:\github\merikens-tripcode-engine\sourcefiles\verificationduplicates.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\thread
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h
; File z:\github\merikens-tripcode-engine\sourcefiles\main.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h
; File z:\github\merikens-tripcode-engine\sourcefiles\verificationduplicates.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\thread
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h
; File z:\github\merikens-tripcode-engine\sourcefiles\main.cpp
; File z:\github\merikens-tripcode-engine\sourcefiles\verificationduplicates.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h
; File z:\github\merikens-tripcode-engine\sourcefiles\verificationduplicates.cpp
; File z:\github\merikens-tripcode-engine\sourcefiles\main.cpp
; File z:\github\merikens-tripcode-engine\sourcefiles\verificationduplicates.cpp
; File z:\github\merikens-tripcode-engine\sourcefiles\main.cpp
; File z:\github\merikens-tripcode-engine\sourcefiles\verificationduplicates.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h
; File z:\github\merikens-tripcode-engine\sourcefiles\verificationduplicates.cpp
;	COMDAT ?IsTripcodeDuplicate@@YAHPEAE@Z
_TEXT	SEGMENT
cursorPos$1 = 32
info$2 = 40
scrnBufInfo$3 = 48
__$ArrayPad$ = 72
tripcode$ = 128
?IsTripcodeDuplicate@@YAHPEAE@Z PROC			; IsTripcodeDuplicate, COMDAT

; 66   : {

$LN207:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	push	rsi
	push	rdi
	push	r12
	push	r14
	push	r15
	sub	rsp, 80					; 00000050H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 67   : 	BOOL result = FALSE;

	xor	r15d, r15d
	mov	rbp, rcx
	mov	r14d, r15d
	npad	2
$LL27@IsTripcode:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h

; 2385 : 			return (_INTRIN_ACQUIRE(_interlockedbittestandset)(_Flag, 0));

	lock_bts DWORD PTR duplicates_spinlock, 0
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h

; 149  : 		while (flag.test_and_set(std::memory_order_acquire))

	jae	SHORT $LN26@IsTripcode
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\thread

; 123  : 	if (::Concurrency::details::_CurrentScheduler::_Id() != -1)

	call	?_Id@_CurrentScheduler@details@Concurrency@@SAIXZ ; Concurrency::details::_CurrentScheduler::_Id
	cmp	eax, -1					; ffffffffH
	je	SHORT $LN41@IsTripcode

; 124  : 		{	// yield, then quit
; 125  : 		::Concurrency::details::_Context::_Yield();

	call	?_Yield@_Context@details@Concurrency@@SAXXZ ; Concurrency::details::_Context::_Yield

; 126  : 		return;

	jmp	SHORT $LL27@IsTripcode
$LN41@IsTripcode:

; 127  : 		}
; 128  : 	_Thrd_yield();

	call	_Thrd_yield
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h

; 150  : 			std::this_thread::yield();

	jmp	SHORT $LL27@IsTripcode
$LN26@IsTripcode:
; File z:\github\merikens-tripcode-engine\sourcefiles\verificationduplicates.cpp

; 72   : 	if (!wasMatchedTripcodeTableInitialized) {

	cmp	DWORD PTR wasMatchedTripcodeTableInitialized, r14d
	lea	r12, OFFSET FLAT:matchedTripcodeTable
	jne	SHORT $LN23@IsTripcode

; 73   : 		for (int32_t i = 0; i < SIZE_MATCHED_TRIPCODE_TABLE; ++i)
; 74   : 			matchedTripcodeTable[i] = NULL;

	mov	rax, r12
	mov	ecx, 512				; 00000200H
	npad	5
$LL198@IsTripcode:
	mov	QWORD PTR [rax], r15
	mov	QWORD PTR [rax+8], r15
	mov	QWORD PTR [rax+16], r15
	lea	rax, QWORD PTR [rax+64]
	mov	QWORD PTR [rax-40], r15
	mov	QWORD PTR [rax-32], r15
	mov	QWORD PTR [rax-24], r15
	mov	QWORD PTR [rax-16], r15
	mov	QWORD PTR [rax-8], r15
	dec	rcx
	jne	SHORT $LL198@IsTripcode

; 75   : 		wasMatchedTripcodeTableInitialized = TRUE;

	mov	DWORD PTR wasMatchedTripcodeTableInitialized, 1
$LN23@IsTripcode:

; 76   : 	}
; 77   : 
; 78   : 	// Create a hash value from the tripcode.
; 79   : 	int32_t hashValueUpper = 0;
; 80   : 	for (int32_t i = 0; i < lenTripcode; i += 2) {

	mov	esi, DWORD PTR ?lenTripcode@@3HA	; lenTripcode
	mov	r9d, r15d
	lea	rdi, OFFSET FLAT:?base64CharTable@@3PADA ; base64CharTable
	test	esi, esi
	jle	SHORT $LN17@IsTripcode
	lea	r11d, DWORD PTR [rsi-1]
	mov	r10, rbp
	shr	r11d, 1
	inc	r11d
	npad	13
$LL19@IsTripcode:

; 81   : 		int32_t j;
; 82   : 		for (j = 0; j < 63 && base64CharTable[j] != tripcode[i]; ++j)

	movzx	r8d, BYTE PTR [r10]
	mov	edx, r15d
	mov	rcx, r15
	npad	6
$LL16@IsTripcode:
	movsx	eax, BYTE PTR [rcx+rdi]
	cmp	eax, r8d
	je	SHORT $LN14@IsTripcode
	inc	rcx
	inc	edx
	cmp	rcx, 63					; 0000003fH
	jl	SHORT $LL16@IsTripcode
$LN14@IsTripcode:

; 83   : 			;
; 84   : 		hashValueUpper ^= j;

	xor	r9d, edx
	add	r10, 2
	dec	r11
	jne	SHORT $LL19@IsTripcode
$LN17@IsTripcode:

; 85   : 	}
; 86   : 	int32_t hashValueLower = 0;

	mov	r11d, r15d

; 87   : 	for (int32_t i = 1; i < lenTripcode; i += 2) {

	cmp	esi, 1
	jle	SHORT $LN11@IsTripcode
	lea	ebx, DWORD PTR [rsi-2]
	lea	r10, QWORD PTR [rbp+1]
	shr	ebx, 1
	inc	ebx
	npad	13
$LL13@IsTripcode:

; 88   : 		int32_t j;
; 89   : 		for (j = 0; j < 63 && base64CharTable[j] != tripcode[i]; ++j)

	movzx	r8d, BYTE PTR [r10]
	mov	edx, r15d
	mov	rcx, r15
	npad	6
$LL10@IsTripcode:
	movsx	eax, BYTE PTR [rcx+rdi]
	cmp	eax, r8d
	je	SHORT $LN8@IsTripcode
	inc	rcx
	inc	edx
	cmp	rcx, 63					; 0000003fH
	jl	SHORT $LL10@IsTripcode
$LN8@IsTripcode:

; 90   : 			;
; 91   : 		hashValueLower ^= j;

	xor	r11d, edx
	add	r10, 2
	dec	rbx
	jne	SHORT $LL13@IsTripcode
$LN11@IsTripcode:

; 92   : 	}
; 93   : 	int32_t tableIndex = (hashValueUpper * 64 + hashValueLower) % SIZE_MATCHED_TRIPCODE_TABLE;

	shl	r9d, 6
	add	r9d, r11d
	and	r9d, -2147479553			; ffffffff80000fffH
	jge	SHORT $LN197@IsTripcode
	dec	r9d
	or	r9d, -4096				; fffffffffffff000H
	inc	r9d
$LN197@IsTripcode:

; 94   : 	// printf("tableIndex = %d\n", tableIndex);
; 95   : 
; 96   : 	// Check to see if the tripcode is a duplicate.
; 97   : 	TripcodeLinkedList *p = matchedTripcodeTable[tableIndex];

	movsxd	rax, r9d
	lea	rdi, QWORD PTR [r12+rax*8]
	mov	rbx, QWORD PTR [rdi]

; 98   : 	while (p != NULL) {

	test	rbx, rbx
	je	SHORT $LN6@IsTripcode
	npad	4
$LL7@IsTripcode:

; 99   : 		if (strncmp((char *)(p->tripcode), (char *)tripcode, lenTripcode) == 0) {

	lea	rcx, QWORD PTR [rbx+8]
	movsxd	r8, esi
	mov	rdx, rbp
	call	strncmp
	test	eax, eax
	je	SHORT $LN172@IsTripcode

; 103  : 		}
; 104  : 		p = p->next;

	mov	rbx, QWORD PTR [rbx]
	test	rbx, rbx
	je	SHORT $LN6@IsTripcode

; 98   : 	while (p != NULL) {

	mov	esi, DWORD PTR ?lenTripcode@@3HA	; lenTripcode
	jmp	SHORT $LL7@IsTripcode
$LN172@IsTripcode:

; 100  : 			result = TRUE;

	mov	r14d, 1

; 101  : 			// printf("[DUPLICATE FOUND]\n");
; 102  : 			goto exit;

	jmp	$exit$208
$LN6@IsTripcode:

; 105  : 	}
; 106  : 
; 107  : 	// Add the tripcode to the table.
; 108  : 	TripcodeLinkedList *newNode = (TripcodeLinkedList *)malloc(sizeof(TripcodeLinkedList));

	mov	ecx, 24
	call	malloc
	mov	rbx, rax

; 109  : 	ERROR0(newNode == NULL, ERROR_NO_MEMORY, "Not enough memory");

	test	rax, rax
	jne	$LN3@IsTripcode
$LL47@IsTripcode:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h

; 2385 : 			return (_INTRIN_ACQUIRE(_interlockedbittestandset)(_Flag, 0));

	lock_bts DWORD PTR ?current_state_spinlock@@3Vspinlock@@A, 0 ; current_state_spinlock
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h

; 149  : 		while (flag.test_and_set(std::memory_order_acquire))

	jae	SHORT $LN46@IsTripcode
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\thread

; 123  : 	if (::Concurrency::details::_CurrentScheduler::_Id() != -1)

	call	?_Id@_CurrentScheduler@details@Concurrency@@SAIXZ ; Concurrency::details::_CurrentScheduler::_Id
	cmp	eax, -1					; ffffffffH
	je	SHORT $LN61@IsTripcode

; 124  : 		{	// yield, then quit
; 125  : 		::Concurrency::details::_Context::_Yield();

	call	?_Yield@_Context@details@Concurrency@@SAXXZ ; Concurrency::details::_Context::_Yield

; 126  : 		return;

	jmp	SHORT $LL47@IsTripcode
$LN61@IsTripcode:

; 127  : 		}
; 128  : 	_Thrd_yield();

	call	_Thrd_yield
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h

; 150  : 			std::this_thread::yield();

	jmp	SHORT $LL47@IsTripcode
$LN46@IsTripcode:
; File z:\github\merikens-tripcode-engine\sourcefiles\main.cpp

; 1649 : 	ret = wasSearchAbortedWithError;

	mov	eax, DWORD PTR ?wasSearchAbortedWithError@@3HA ; wasSearchAbortedWithError
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h

; 1363 : 	*_Tgt = _Value;

	mov	DWORD PTR ?current_state_spinlock@@3Vspinlock@@A, r15d ; current_state_spinlock
; File z:\github\merikens-tripcode-engine\sourcefiles\verificationduplicates.cpp

; 109  : 	ERROR0(newNode == NULL, ERROR_NO_MEMORY, "Not enough memory");

	test	eax, eax
	jne	$LN3@IsTripcode
	npad	4
$LL91@IsTripcode:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h

; 2385 : 			return (_INTRIN_ACQUIRE(_interlockedbittestandset)(_Flag, 0));

	lock_bts DWORD PTR ?current_state_spinlock@@3Vspinlock@@A, 0 ; current_state_spinlock
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h

; 149  : 		while (flag.test_and_set(std::memory_order_acquire))

	jae	SHORT $LN90@IsTripcode
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\thread

; 123  : 	if (::Concurrency::details::_CurrentScheduler::_Id() != -1)

	call	?_Id@_CurrentScheduler@details@Concurrency@@SAIXZ ; Concurrency::details::_CurrentScheduler::_Id
	cmp	eax, -1					; ffffffffH
	je	SHORT $LN105@IsTripcode

; 124  : 		{	// yield, then quit
; 125  : 		::Concurrency::details::_Context::_Yield();

	call	?_Yield@_Context@details@Concurrency@@SAXXZ ; Concurrency::details::_Context::_Yield

; 126  : 		return;

	jmp	SHORT $LL91@IsTripcode
$LN105@IsTripcode:

; 127  : 		}
; 128  : 	_Thrd_yield();

	call	_Thrd_yield
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h

; 150  : 			std::this_thread::yield();

	jmp	SHORT $LL91@IsTripcode
$LN90@IsTripcode:
; File z:\github\merikens-tripcode-engine\sourcefiles\main.cpp

; 1641 : 	wasSearchAbortedWithError = TRUE;

	mov	DWORD PTR ?wasSearchAbortedWithError@@3HA, 1 ; wasSearchAbortedWithError
; File z:\github\merikens-tripcode-engine\sourcefiles\verificationduplicates.cpp

; 109  : 	ERROR0(newNode == NULL, ERROR_NO_MEMORY, "Not enough memory");

	cmp	DWORD PTR ?options@@3UOptions@@A+32, r14d
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h

; 1363 : 	*_Tgt = _Value;

	mov	DWORD PTR ?current_state_spinlock@@3Vspinlock@@A, r15d ; current_state_spinlock
; File z:\github\merikens-tripcode-engine\sourcefiles\verificationduplicates.cpp

; 109  : 	ERROR0(newNode == NULL, ERROR_NO_MEMORY, "Not enough memory");

	je	SHORT $LN2@IsTripcode
	call	__iob_func
	lea	rdx, OFFSET FLAT:$SG4294875546
	mov	r8d, 5
	lea	rcx, QWORD PTR [rax+96]
	call	fprintf
	call	__iob_func
	lea	rcx, QWORD PTR [rax+96]
	call	fflush
	lea	rcx, OFFSET FLAT:$SG4294875545
	mov	edx, 5
	call	printf
	call	__iob_func
	lea	rcx, QWORD PTR [rax+48]
	call	fflush
	jmp	$LN137@IsTripcode
$LN2@IsTripcode:
	mov	ebx, DWORD PTR ?prevLineCount@@3HA	; prevLineCount
; File z:\github\merikens-tripcode-engine\sourcefiles\main.cpp

; 259  : 	if (!GetConsoleScreenBufferInfo(GetStdHandle(STD_OUTPUT_HANDLE), &scrnBufInfo))

	mov	ecx, -11				; fffffff5H
	call	QWORD PTR __imp_GetStdHandle
	lea	rdx, QWORD PTR scrnBufInfo$3[rsp]
	mov	rcx, rax
	call	QWORD PTR __imp_GetConsoleScreenBufferInfo
	test	eax, eax
	je	SHORT $LN133@IsTripcode

; 260  : 		return;
; 261  : 	cursorPos.X = 0;
; 262  : 	cursorPos.Y = (scrnBufInfo.dwCursorPosition.Y + n) >= 0
; 263  : 		? (scrnBufInfo.dwCursorPosition.Y + n)
; 264  : 		: 0;

	movsx	ecx, WORD PTR scrnBufInfo$3[rsp+6]
	mov	WORD PTR cursorPos$1[rsp], r15w
	mov	eax, ecx
	add	eax, ebx
	js	SHORT $LN135@IsTripcode
	add	bx, cx
	mov	WORD PTR cursorPos$1[rsp+2], bx
	jmp	SHORT $LN136@IsTripcode
$LN135@IsTripcode:
	mov	WORD PTR cursorPos$1[rsp+2], r15w
$LN136@IsTripcode:

; 265  : 	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), cursorPos);

	mov	ecx, -11				; fffffff5H
	call	QWORD PTR __imp_GetStdHandle
	mov	edx, DWORD PTR cursorPos$1[rsp]
	mov	rcx, rax
	call	QWORD PTR __imp_SetConsoleCursorPosition
$LN133@IsTripcode:
; File z:\github\merikens-tripcode-engine\sourcefiles\verificationduplicates.cpp

; 109  : 	ERROR0(newNode == NULL, ERROR_NO_MEMORY, "Not enough memory");

	lea	rdx, OFFSET FLAT:$SG4294875544
	lea	rcx, OFFSET FLAT:$SG4294875543
	call	printf
	call	_getch
; File z:\github\merikens-tripcode-engine\sourcefiles\main.cpp

; 292  : 	SetConsoleCursorInfo((HWND)GetStdHandle(STD_OUTPUT_HANDLE), &info); 

	mov	ecx, -11				; fffffff5H
	mov	DWORD PTR info$2[rsp+4], 1
	mov	DWORD PTR info$2[rsp], 100		; 00000064H
	call	QWORD PTR __imp_GetStdHandle
	lea	rdx, QWORD PTR info$2[rsp]
	mov	rcx, rax
	call	QWORD PTR __imp_SetConsoleCursorInfo
$LN137@IsTripcode:
; File z:\github\merikens-tripcode-engine\sourcefiles\verificationduplicates.cpp

; 109  : 	ERROR0(newNode == NULL, ERROR_NO_MEMORY, "Not enough memory");

	mov	ecx, 1
	call	QWORD PTR __imp_ExitProcess
	int	3
$LN3@IsTripcode:

; 110  : 	newNode->next = matchedTripcodeTable[tableIndex];

	mov	rcx, QWORD PTR [rdi]

; 111  : 	strncpy((char *)(newNode->tripcode), (char *)tripcode, lenTripcode);

	mov	rdx, rbp
	mov	QWORD PTR [rbx], rcx
	movsxd	r8, DWORD PTR ?lenTripcode@@3HA		; lenTripcode
	lea	rcx, QWORD PTR [rbx+8]
	call	strncpy

; 112  : 	newNode->tripcode[lenTripcode] = '\0';

	movsxd	rcx, DWORD PTR ?lenTripcode@@3HA	; lenTripcode
	mov	BYTE PTR [rcx+rbx+8], r14b

; 113  : 	matchedTripcodeTable[tableIndex] = newNode;

	mov	QWORD PTR [rdi], rbx
$exit$208:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h

; 1363 : 	*_Tgt = _Value;

	mov	DWORD PTR duplicates_spinlock, r15d
; File z:\github\merikens-tripcode-engine\sourcefiles\verificationduplicates.cpp

; 117  : 	return result;

	mov	eax, r14d

; 118  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	lea	r11, QWORD PTR [rsp+80]
	mov	rbx, QWORD PTR [r11+56]
	mov	rbp, QWORD PTR [r11+64]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	ret	0
$LN206@IsTripcode:
?IsTripcodeDuplicate@@YAHPEAE@Z ENDP			; IsTripcodeDuplicate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\boost\system\error_code.hpp
;	COMDAT ??__Eposix_category@system@boost@@YAXXZ
text$di	SEGMENT
??__Eposix_category@system@boost@@YAXXZ PROC		; boost::system::`dynamic initializer for 'posix_category'', COMDAT

; 221  :     static const error_category &  posix_category = generic_category();

	sub	rsp, 40					; 00000028H
	call	?generic_category@system@boost@@YAAEBVerror_category@12@XZ ; boost::system::generic_category
	mov	QWORD PTR posix_category, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Eposix_category@system@boost@@YAXXZ ENDP		; boost::system::`dynamic initializer for 'posix_category''
text$di	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\boost\system\error_code.hpp
;	COMDAT ??__Eerrno_ecat@system@boost@@YAXXZ
text$di	SEGMENT
??__Eerrno_ecat@system@boost@@YAXXZ PROC		; boost::system::`dynamic initializer for 'errno_ecat'', COMDAT

; 222  :     static const error_category &  errno_ecat     = generic_category();

	sub	rsp, 40					; 00000028H
	call	?generic_category@system@boost@@YAAEBVerror_category@12@XZ ; boost::system::generic_category
	mov	QWORD PTR errno_ecat, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Eerrno_ecat@system@boost@@YAXXZ ENDP		; boost::system::`dynamic initializer for 'errno_ecat''
text$di	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\boost\system\error_code.hpp
;	COMDAT ??__Enative_ecat@system@boost@@YAXXZ
text$di	SEGMENT
??__Enative_ecat@system@boost@@YAXXZ PROC		; boost::system::`dynamic initializer for 'native_ecat'', COMDAT

; 223  :     static const error_category &  native_ecat    = system_category();

	sub	rsp, 40					; 00000028H
	call	?system_category@system@boost@@YAAEBVerror_category@12@XZ ; boost::system::system_category
	mov	QWORD PTR native_ecat, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Enative_ecat@system@boost@@YAXXZ ENDP		; boost::system::`dynamic initializer for 'native_ecat''
text$di	ENDS
; Function compile flags: /Ogtpy
; File z:\github\merikens-tripcode-engine\sourcefiles\verificationduplicates.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h
; File z:\github\merikens-tripcode-engine\sourcefiles\verificationduplicates.cpp
;	COMDAT ??__Eduplicates_spinlock@@YAXXZ
text$di	SEGMENT
??__Eduplicates_spinlock@@YAXXZ PROC			; `dynamic initializer for 'duplicates_spinlock'', COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h

; 1377 : 	_INTRIN_SEQ_CST(_InterlockedExchange)((volatile long *)_Tgt, _Value);

	xor	eax, eax
	xchg	DWORD PTR duplicates_spinlock, eax
; File z:\github\merikens-tripcode-engine\sourcefiles\verificationduplicates.cpp

; 47   : static spinlock duplicates_spinlock;

	ret	0
??__Eduplicates_spinlock@@YAXXZ ENDP			; `dynamic initializer for 'duplicates_spinlock''
text$di	ENDS
END
