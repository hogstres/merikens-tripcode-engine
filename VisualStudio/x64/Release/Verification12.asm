; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

include listing.inc

INCLUDELIB OLDNAMES

	ORG $+5
$SG4294866282 DB 'tripcode: `%s''', 0aH, 00H
$SG4294866283 DB 'key:      `%s''', 0aH, 00H
PUBLIC	?VerifySHA1Tripcode@@YAHPEAE0@Z			; VerifySHA1Tripcode
_Tuple_alloc DB	01H DUP (?)
	ALIGN	8

errno_ecat DQ	01H DUP (?)
ignore	DB	01H DUP (?)
	ALIGN	4

allocator_arg DB 01H DUP (?)
	ALIGN	8

native_ecat DQ	01H DUP (?)
piecewise_construct DB 01H DUP (?)
	ALIGN	8

posix_category DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Enative_ecat@system@boost@@YAXXZ DD imagerel ??__Enative_ecat@system@boost@@YAXXZ
	DD	imagerel ??__Enative_ecat@system@boost@@YAXXZ+21
	DD	imagerel $unwind$??__Enative_ecat@system@boost@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Eerrno_ecat@system@boost@@YAXXZ DD imagerel ??__Eerrno_ecat@system@boost@@YAXXZ
	DD	imagerel ??__Eerrno_ecat@system@boost@@YAXXZ+21
	DD	imagerel $unwind$??__Eerrno_ecat@system@boost@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Eposix_category@system@boost@@YAXXZ DD imagerel ??__Eposix_category@system@boost@@YAXXZ
	DD	imagerel ??__Eposix_category@system@boost@@YAXXZ+21
	DD	imagerel $unwind$??__Eposix_category@system@boost@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?VerifySHA1Tripcode@@YAHPEAE0@Z DD imagerel $LN12
	DD	imagerel $LN12+97
	DD	imagerel $unwind$?VerifySHA1Tripcode@@YAHPEAE0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$?VerifySHA1Tripcode@@YAHPEAE0@Z DD imagerel $LN12+97
	DD	imagerel $LN12+4312
	DD	imagerel $chain$6$?VerifySHA1Tripcode@@YAHPEAE0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$?VerifySHA1Tripcode@@YAHPEAE0@Z DD imagerel $LN12+4312
	DD	imagerel $LN12+4677
	DD	imagerel $chain$7$?VerifySHA1Tripcode@@YAHPEAE0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$?VerifySHA1Tripcode@@YAHPEAE0@Z DD imagerel $LN12+4677
	DD	imagerel $LN12+4688
	DD	imagerel $chain$8$?VerifySHA1Tripcode@@YAHPEAE0@Z
;	COMDAT xdata
xdata	SEGMENT
$chain$8$?VerifySHA1Tripcode@@YAHPEAE0@Z DD 021H
	DD	imagerel $LN12
	DD	imagerel $LN12+97
	DD	imagerel $unwind$?VerifySHA1Tripcode@@YAHPEAE0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$?VerifySHA1Tripcode@@YAHPEAE0@Z DD 020021H
	DD	0117400H
	DD	imagerel $LN12
	DD	imagerel $LN12+97
	DD	imagerel $unwind$?VerifySHA1Tripcode@@YAHPEAE0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$?VerifySHA1Tripcode@@YAHPEAE0@Z DD 0e4321H
	DD	0df443H
	DD	0ee432H
	DD	0fd42dH
	DD	010c420H
	DD	0117418H
	DD	0126410H
	DD	0135408H
	DD	imagerel $LN12
	DD	imagerel $LN12+97
	DD	imagerel $unwind$?VerifySHA1Tripcode@@YAHPEAE0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?VerifySHA1Tripcode@@YAHPEAE0@Z DD 031201H
	DD	0140112H
	DD	0300bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Eposix_category@system@boost@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Eerrno_ecat@system@boost@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Enative_ecat@system@boost@@YAXXZ DD 010401H
	DD	04204H
posix_category$initializer$ DQ FLAT:??__Eposix_category@system@boost@@YAXXZ
errno_ecat$initializer$ DQ FLAT:??__Eerrno_ecat@system@boost@@YAXXZ
native_ecat$initializer$ DQ FLAT:??__Enative_ecat@system@boost@@YAXXZ
; Function compile flags: /Ogtpy
; File z:\github\merikens-tripcode-engine\sourcefiles\verification12.cpp
;	COMDAT ?VerifySHA1Tripcode@@YAHPEAE0@Z
_TEXT	SEGMENT
W$49$ = 32
W$32$ = 32
W$17$ = 32
W$45$ = 36
W$29$ = 36
W$6$ = 36
W$58$ = 40
W$41$ = 40
W$24$ = 40
W$5$ = 40
W$51$ = 44
W$33$ = 44
W$18$ = 44
W$42$ = 48
W$28$ = 48
W$20$ = 48
W$59$ = 52
W$38$ = 52
W$22$ = 52
W$7$ = 52
W$52$ = 56
W$36$ = 56
W$19$ = 56
W$39$ = 60
W$23$ = 60
W$35$ = 64
W$21$ = 64
W$57$ = 68
W$40$ = 68
W$25$ = 68
W$34$ = 72
W$16$ = 72
W$43$ = 76
W$27$ = 76
W$44$ = 80
W$26$ = 80
W$53$ = 84
W$37$ = 84
W$47$ = 88
tripcode$ = 176
key$ = 184
W$46$ = 192
W$30$ = 192
W$13$ = 192
W$50$ = 200
W$31$ = 200
W$15$ = 200
?VerifySHA1Tripcode@@YAHPEAE0@Z PROC			; VerifySHA1Tripcode, COMDAT

; 138  : {

$LN12:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbx
	sub	rsp, 160				; 000000a0H
	mov	rbx, rcx

; 139  : 	if (strlen((char *)tripcode) != lenTripcode || strlen((char *)key) != lenTripcodeKey)

	or	rcx, -1
	mov	r8, rcx
	npad	4
$LL10@VerifySHA1:
	inc	r8
	cmp	BYTE PTR [rbx+r8], 0
	jne	SHORT $LL10@VerifySHA1
	movsxd	rax, DWORD PTR ?lenTripcode@@3HA	; lenTripcode
	cmp	r8, rax
	jne	$LN2@VerifySHA1
	npad	6
$LL9@VerifySHA1:
	inc	rcx
	cmp	BYTE PTR [rdx+rcx], 0
	jne	SHORT $LL9@VerifySHA1
	movsxd	rax, DWORD PTR ?lenTripcodeKey@@3HA	; lenTripcodeKey
	cmp	rcx, rax
	jne	$LN2@VerifySHA1

; 141  : 
; 142  : 	uint32_t W[80];
; 143  :     uint32_t A = H0, B = H1, C = H2, D = H3, E = H4, tmp;
; 144  : 
; 145  : 	ROUND_00_TO_15_W(0, (key[ 0] << 24) | (key[ 1] << 16) | (key[ 2] << 8) | key[ 3]);

	movzx	eax, BYTE PTR [rdx+1]

; 146  : 	ROUND_00_TO_15_W(1, (key[ 4] << 24) | (key[ 5] << 16) | (key[ 6] << 8) | key[ 7]);

	movzx	ebx, BYTE PTR [rdx+4]
	mov	QWORD PTR [rsp+152], rbp
	mov	QWORD PTR [rsp+144], rsi
	mov	QWORD PTR [rsp+136], rdi
	mov	QWORD PTR [rsp+128], r12

; 147  : 	ROUND_00_TO_15_W(2, (key[ 8] << 24) | (key[ 9] << 16) | (key[10] << 8) | key[11]);

	movzx	r12d, BYTE PTR [rdx+8]
	shl	ebx, 8
	mov	QWORD PTR [rsp+120], r13
	mov	QWORD PTR [rsp+112], r14
	movzx	r14d, BYTE PTR [rdx]
	shl	r12d, 8
	shl	r14d, 8
	mov	QWORD PTR [rsp+104], r15
	or	r14d, eax
	movzx	eax, BYTE PTR [rdx+2]
	shl	r14d, 8
	or	r14d, eax
	movzx	eax, BYTE PTR [rdx+3]
	shl	r14d, 8
	or	r14d, eax
	movzx	eax, BYTE PTR [rdx+5]
	or	ebx, eax
	movzx	eax, BYTE PTR [rdx+6]
	lea	r11d, DWORD PTR [r14-1615554381]
	shl	ebx, 8
	mov	edi, r11d
	mov	ecx, r11d
	or	ebx, eax
	movzx	eax, BYTE PTR [rdx+7]
	and	ecx, -572662307				; ddddddddH
	rol	edi, 5
	shl	ebx, 8
	or	ebx, eax
	movzx	eax, BYTE PTR [rdx+9]
	add	edi, 1722862861				; 66b0cd0dH
	or	r12d, eax
	movzx	eax, BYTE PTR [rdx+10]
	add	edi, ebx
	shl	r12d, 8
	mov	r8d, edi

; 148  : 	ROUND_00_TO_15_W(3, 0x80000000);

	mov	r9d, edi
	or	r12d, eax
	movzx	eax, BYTE PTR [rdx+11]
	not	r9d
	and	r9d, 1506887872				; 59d148c0H
	rol	r8d, 5
	shl	r12d, 8
	or	r12d, eax
	mov	eax, r11d
	not	eax
	add	r8d, r12d
	xor	ecx, eax
	ror	r11d, 2
	and	ecx, 2079550178				; 7bf36ae2H
	mov	eax, r11d
	and	eax, edi
	add	ecx, -214083945				; f33d5697H
	add	r8d, ecx
	xor	r9d, eax
	ror	edi, 2
	mov	edx, r8d

; 149  : 
; 150  : 	ROUND_00_TO_15_ZERO( 4); ROUND_00_TO_15_ZERO( 5); ROUND_00_TO_15_ZERO( 6); ROUND_00_TO_15_ZERO(7);

	mov	r10d, r8d
	mov	eax, edi
	not	r10d
	and	eax, r8d
	and	r10d, r11d
	rol	edx, 5
	add	edx, 1450566779				; 5675e47bH
	xor	r10d, eax
	ror	r8d, 2
	add	r9d, edx
	mov	edx, r9d
	mov	ecx, r9d
	not	ecx
	rol	edx, 5
	add	edx, -1269579175			; b453c259H
	add	r10d, edx
	mov	edx, r10d
	rol	edx, 5
	and	ecx, edi
	add	r11d, edx
	mov	eax, r8d
	and	eax, r9d
	ror	r9d, 2
	xor	ecx, eax
	mov	eax, r9d
	add	ecx, 1518500249				; 5a827999H
	and	eax, r10d
	add	r11d, ecx
	mov	ecx, r10d
	ror	r10d, 2
	not	ecx
	mov	edx, r11d
	and	ecx, r8d
	xor	ecx, eax
	mov	eax, r10d
	add	ecx, 1518500249				; 5a827999H
	rol	edx, 5
	and	eax, r11d
	add	edi, edx
	add	edi, ecx
	mov	ecx, r11d
	not	ecx
	mov	edx, edi
	ror	r11d, 2
	and	ecx, r9d
	xor	ecx, eax
	rol	edx, 5

; 151  : 	ROUND_00_TO_15_ZERO( 8); ROUND_00_TO_15_ZERO( 9); ROUND_00_TO_15_ZERO(10); ROUND_00_TO_15_ZERO(11);

	mov	eax, r11d
	add	ecx, 1518500249				; 5a827999H
	add	r8d, edx
	and	eax, edi
	add	r8d, ecx
	mov	ecx, edi
	ror	edi, 2
	not	ecx
	mov	edx, r8d
	and	ecx, r10d
	xor	ecx, eax
	mov	eax, edi
	add	ecx, 1518500249				; 5a827999H
	rol	edx, 5
	and	eax, r8d
	add	r9d, edx
	add	r9d, ecx
	mov	ecx, r8d
	not	ecx
	mov	edx, r9d
	ror	r8d, 2
	and	ecx, r11d
	xor	ecx, eax
	rol	edx, 5
	mov	eax, r8d
	add	ecx, 1518500249				; 5a827999H
	add	r10d, edx
	and	eax, r9d
	add	r10d, ecx
	mov	ecx, r9d
	ror	r9d, 2
	not	ecx
	mov	edx, r10d
	and	ecx, edi
	xor	ecx, eax
	mov	eax, r9d
	add	ecx, 1518500249				; 5a827999H
	rol	edx, 5
	and	eax, r10d
	add	r11d, edx
	add	r11d, ecx
	mov	ecx, r10d
	not	ecx
	mov	edx, r11d
	ror	r10d, 2
	and	ecx, r8d
	xor	ecx, eax
	rol	edx, 5
	add	edi, edx
	add	ecx, 1518500249				; 5a827999H
	add	edi, ecx

; 152  : 	ROUND_00_TO_15_ZERO(12); ROUND_00_TO_15_ZERO(13); ROUND_00_TO_15_ZERO(14); ROUND_00_TO_15_W(15, 12 * 8);

	mov	edx, edi
	rol	edx, 5
	mov	ecx, r11d
	mov	eax, r10d
	add	r8d, edx
	and	eax, r11d
	not	ecx
	ror	r11d, 2
	and	ecx, r9d

; 153  : 
; 154  :     ROUND_16_TO_19(16); ROUND_16_TO_19(17); ROUND_16_TO_19(18); ROUND_16_TO_19(19);

	mov	r15d, r12d
	btc	ebx, 31
	xor	ecx, eax
	mov	eax, r11d
	xor	r15d, r14d
	add	ecx, 1518500249				; 5a827999H
	and	eax, edi
	xor	r12d, 96				; 00000060H
	add	r8d, ecx
	rol	ebx, 1
	mov	ecx, edi
	not	ecx
	rol	r15d, 1
	mov	edx, r8d
	and	ecx, r10d
	ror	edi, 2
	mov	DWORD PTR W$5$[rsp], ebx
	xor	ecx, eax
	rol	edx, 5
	mov	eax, edi
	add	ecx, 1518500249				; 5a827999H
	and	eax, r8d
	add	r9d, edx
	add	r9d, ecx
	mov	ecx, r8d
	ror	r8d, 2
	not	ecx
	mov	esi, r9d
	and	ecx, r11d
	xor	ecx, eax
	mov	eax, r8d
	add	ecx, 1518500249				; 5a827999H
	and	eax, r9d
	rol	esi, 5
	add	esi, r10d
	add	esi, ecx
	mov	ecx, r9d
	not	ecx
	mov	ebp, esi
	mov	r10d, esi
	ror	r9d, 2
	and	ecx, edi
	not	r10d
	rol	ebp, 5
	xor	ecx, eax
	and	r10d, r8d
	add	ebp, r11d
	add	ecx, 1518500345				; 5a8279f9H
	mov	eax, r9d
	and	eax, esi
	add	ebp, ecx
	xor	r10d, eax
	mov	ecx, ebp
	mov	r11d, ebp
	ror	esi, 2
	not	r11d
	and	r11d, r9d
	rol	ecx, 5
	lea	eax, DWORD PTR [rcx+1518500249]
	add	eax, r15d
	add	r10d, eax
	mov	eax, esi
	and	eax, ebp
	add	r10d, edi
	ror	ebp, 2
	xor	r11d, eax
	mov	ecx, r10d
	rol	ecx, 5
	lea	eax, DWORD PTR [rcx+1518500249]
	add	eax, ebx
	add	r11d, eax
	add	r11d, r8d
	rol	r12d, 1
	mov	DWORD PTR W$6$[rsp], r12d
	mov	edx, r10d
	mov	eax, ebp
	mov	ecx, r11d
	and	eax, r10d
	rol	ecx, 5
	not	edx
	and	edx, esi
	ror	r10d, 2
	lea	r8d, DWORD PTR [rsi+1518500249]
	xor	edx, eax
	lea	eax, DWORD PTR [rcx+1518500249]

; 155  : 	
; 156  : 	ROUND_20_TO_39(20);	ROUND_20_TO_39(21);	ROUND_20_TO_39(22);	ROUND_20_TO_39(23);	ROUND_20_TO_39(24);

	mov	r14d, r12d
	add	eax, r12d
	mov	edi, r15d
	rol	r14d, 1
	add	edx, eax
	mov	eax, r10d
	btc	edi, 31
	and	eax, r11d
	add	r9d, edx
	mov	edx, r11d
	not	edx
	mov	ecx, r9d
	mov	esi, ebx
	and	edx, ebp
	rol	edi, 1
	mov	r13d, r14d
	xor	edx, eax
	rol	ecx, 5
	mov	r12d, edi
	lea	eax, DWORD PTR [rdi+rcx]
	ror	r11d, 2
	mov	ecx, r10d
	add	edx, eax
	rol	esi, 1
	xor	ecx, r11d
	xor	ecx, r9d
	add	r8d, edx
	lea	edx, DWORD PTR [rbp+1859775393]
	mov	eax, r8d
	mov	ebp, esi
	ror	r9d, 2
	xor	ebp, 96					; 00000060H
	mov	DWORD PTR W$7$[rsp], edi
	rol	eax, 5
	add	eax, esi
	add	ecx, eax
	rol	r12d, 1
	add	edx, ecx
	mov	ecx, r11d
	rol	ebp, 1
	xor	ecx, r9d
	mov	eax, edx
	rol	eax, 5
	xor	ecx, r8d
	add	eax, 1859775393				; 6ed9eba1H
	ror	r8d, 2
	add	eax, r14d
	add	ecx, eax
	add	r10d, ecx
	mov	ecx, r9d
	xor	ecx, r8d
	mov	eax, r10d
	rol	eax, 5
	xor	ecx, edx
	add	eax, 1859775393				; 6ed9eba1H
	ror	edx, 2
	add	eax, r12d
	add	ecx, eax
	add	r11d, ecx
	mov	ecx, r8d
	xor	ecx, edx
	mov	eax, r11d
	rol	eax, 5
	xor	ecx, r10d
	add	eax, 1859775393				; 6ed9eba1H
	ror	r10d, 2
	add	eax, ebp
	add	ecx, eax
	add	r9d, ecx
	xor	r13d, r15d
	rol	r13d, 1
	mov	eax, r9d
	mov	ecx, edx
	rol	eax, 5
	xor	ecx, r10d
	add	eax, 1859775393				; 6ed9eba1H
	xor	ecx, r11d
	add	eax, r13d
	add	ecx, eax

; 157  : 	ROUND_20_TO_39(25);	ROUND_20_TO_39(26);	ROUND_20_TO_39(27);	ROUND_20_TO_39(28);	ROUND_20_TO_39(29);

	mov	eax, r12d
	ror	r11d, 2
	xor	eax, ebx
	add	r8d, ecx
	mov	ecx, r10d
	xor	ecx, r11d
	xor	ecx, r9d
	rol	eax, 1
	mov	DWORD PTR W$13$[rsp], eax
	mov	ebx, DWORD PTR W$13$[rsp]
	ror	r9d, 2
	add	ebx, 1859775393				; 6ed9eba1H
	mov	eax, r8d
	rol	eax, 5
	add	eax, ebx
	mov	ebx, ebp
	add	ecx, eax
	xor	ebx, DWORD PTR W$6$[rsp]
	add	edx, ecx
	mov	ecx, r11d
	rol	ebx, 1
	xor	ecx, r9d
	mov	eax, edx
	rol	eax, 5
	xor	ecx, r8d
	add	eax, 1859775393				; 6ed9eba1H
	ror	r8d, 2
	add	eax, ebx
	add	ecx, eax
	mov	eax, r13d
	xor	eax, edi
	add	r10d, ecx
	mov	ecx, r9d
	rol	eax, 1
	xor	ecx, r8d
	mov	DWORD PTR W$15$[rsp], eax
	mov	edi, DWORD PTR W$15$[rsp]
	xor	ecx, edx
	add	edi, 1859775393				; 6ed9eba1H
	mov	eax, r10d
	ror	edx, 2
	rol	eax, 5
	add	eax, edi
	mov	edi, DWORD PTR W$13$[rsp]
	add	ecx, eax
	xor	edi, esi
	add	r11d, ecx
	mov	ecx, r8d
	rol	edi, 1
	xor	ecx, edx
	mov	DWORD PTR W$16$[rsp], edi
	add	edi, 1859775393				; 6ed9eba1H
	xor	ecx, r10d
	mov	eax, r11d
	rol	eax, 5
	add	eax, edi
	add	ecx, eax
	ror	r10d, 2
	mov	eax, ebx
	xor	eax, r14d
	add	r9d, ecx
	mov	ecx, edx
	xor	eax, 96					; 00000060H
	xor	ecx, r10d
	rol	eax, 1
	xor	ecx, r11d
	mov	DWORD PTR W$17$[rsp], eax
	mov	edi, DWORD PTR W$17$[rsp]
	mov	eax, r9d
	add	edi, 1859775393				; 6ed9eba1H
	rol	eax, 5
	add	eax, edi
	ror	r11d, 2
	add	ecx, eax

; 158  : 	ROUND_20_TO_39(30);	ROUND_20_TO_39(31);	ROUND_20_TO_39(32); ROUND_20_TO_39(33);	ROUND_20_TO_39(34);

	mov	edi, DWORD PTR W$15$[rsp]
	add	r8d, ecx
	xor	edi, r12d
	mov	ecx, r10d
	xor	edi, r15d
	xor	ecx, r11d
	mov	eax, r8d
	xor	ecx, r9d
	rol	eax, 5
	rol	edi, 1
	mov	DWORD PTR W$18$[rsp], edi
	add	edi, 1859775393				; 6ed9eba1H
	ror	r9d, 2
	add	eax, edi
	mov	edi, DWORD PTR W$16$[rsp]
	add	ecx, eax
	xor	edi, ebp
	xor	edi, DWORD PTR W$5$[rsp]
	add	edx, ecx
	mov	ecx, r11d
	xor	ecx, r9d
	xor	edi, 96					; 00000060H
	mov	eax, edx
	rol	eax, 5
	xor	ecx, r8d
	rol	edi, 1
	mov	DWORD PTR W$19$[rsp], edi
	add	edi, 1859775393				; 6ed9eba1H
	ror	r8d, 2
	add	eax, edi
	mov	edi, DWORD PTR W$17$[rsp]
	add	ecx, eax
	xor	edi, r13d
	xor	edi, DWORD PTR W$6$[rsp]
	add	r10d, ecx
	mov	ecx, r9d
	xor	edi, r15d
	xor	ecx, r8d
	mov	eax, r10d
	rol	eax, 5
	xor	ecx, edx
	rol	edi, 1
	mov	DWORD PTR W$20$[rsp], edi
	add	edi, 1859775393				; 6ed9eba1H
	ror	edx, 2
	add	eax, edi
	mov	edi, DWORD PTR W$7$[rsp]
	add	ecx, eax
	mov	eax, DWORD PTR W$18$[rsp]
	xor	eax, DWORD PTR W$13$[rsp]
	add	r11d, ecx
	mov	ecx, r8d
	xor	eax, edi
	xor	ecx, edx
	xor	eax, DWORD PTR W$5$[rsp]
	xor	ecx, r10d
	rol	eax, 1
	mov	DWORD PTR W$21$[rsp], eax
	mov	r15d, DWORD PTR W$21$[rsp]
	ror	r10d, 2
	add	r15d, 1859775393			; 6ed9eba1H
	mov	eax, r11d
	rol	eax, 5
	add	eax, r15d
	mov	r15d, DWORD PTR W$19$[rsp]
	add	ecx, eax
	xor	r15d, ebx
	add	r9d, ecx
	xor	r15d, esi
	mov	ecx, edx
	xor	r15d, DWORD PTR W$6$[rsp]
	xor	ecx, r10d
	mov	eax, r9d
	rol	eax, 5
	xor	ecx, r11d
	add	eax, 1859775393				; 6ed9eba1H
	rol	r15d, 1
	mov	DWORD PTR W$22$[rsp], r15d
	add	eax, r15d
	ror	r11d, 2
	add	ecx, eax

; 159  : 	ROUND_20_TO_39(35);	ROUND_20_TO_39(36);	ROUND_20_TO_39(37); ROUND_20_TO_39(38);	ROUND_20_TO_39(39);

	mov	eax, DWORD PTR W$20$[rsp]
	xor	eax, DWORD PTR W$15$[rsp]
	add	r8d, ecx
	mov	ecx, r10d
	xor	eax, r14d
	xor	ecx, r11d
	xor	eax, edi
	xor	ecx, r9d
	lea	edi, DWORD PTR [rdx+1859775393]
	mov	edx, DWORD PTR W$21$[rsp]
	xor	edx, DWORD PTR W$16$[rsp]
	xor	edx, r12d
	xor	edx, esi
	rol	eax, 1
	mov	esi, r15d
	xor	esi, DWORD PTR W$17$[rsp]
	ror	r9d, 2
	mov	DWORD PTR W$23$[rsp], eax
	mov	eax, r8d
	rol	edx, 1
	xor	esi, ebp
	xor	esi, r14d
	mov	r14d, DWORD PTR W$23$[rsp]
	mov	DWORD PTR W$24$[rsp], edx
	xor	r14d, DWORD PTR W$18$[rsp]
	xor	r14d, r13d
	rol	eax, 5
	add	eax, DWORD PTR W$23$[rsp]
	xor	r14d, r12d
	rol	esi, 1
	add	ecx, eax
	mov	r12d, DWORD PTR W$19$[rsp]
	rol	r14d, 1
	add	edi, ecx
	mov	ecx, r11d
	mov	DWORD PTR W$25$[rsp], esi
	xor	ecx, r9d
	mov	eax, edi
	mov	DWORD PTR W$26$[rsp], r14d
	rol	eax, 5
	xor	ecx, r8d
	add	eax, 1859775393				; 6ed9eba1H
	ror	r8d, 2
	add	eax, edx
	xor	edx, r12d
	xor	edx, DWORD PTR W$13$[rsp]
	add	ecx, eax
	add	r10d, ecx
	xor	edx, ebp
	mov	ecx, r9d
	xor	ecx, r8d
	mov	eax, r10d
	xor	ecx, edi
	rol	eax, 5
	add	eax, 1859775393				; 6ed9eba1H
	add	eax, esi
	rol	edx, 1
	add	ecx, eax
	mov	DWORD PTR W$27$[rsp], edx
	ror	edi, 2
	add	r11d, ecx
	add	edx, 1859775393				; 6ed9eba1H
	mov	ecx, r8d
	xor	ecx, edi
	mov	eax, r11d
	xor	ecx, r10d
	rol	eax, 5
	add	eax, 1859775393				; 6ed9eba1H
	add	eax, r14d
	ror	r10d, 2
	add	ecx, eax
	add	r9d, ecx
	mov	ecx, edi
	xor	ecx, r10d
	mov	eax, r9d
	xor	ecx, r11d
	rol	eax, 5
	add	eax, edx
	add	ecx, eax
	ror	r11d, 2

; 160  : 
; 161  :     ROUND_40_TO_59(40); ROUND_40_TO_59(41); ROUND_40_TO_59(42); ROUND_40_TO_59(43); ROUND_40_TO_59(44);

	mov	ebp, DWORD PTR W$20$[rsp]
	add	r8d, ecx
	xor	esi, ebp
	mov	ecx, r11d
	mov	eax, r11d
	xor	ecx, r9d
	and	eax, r9d
	xor	esi, ebx
	and	ecx, r10d
	xor	esi, r13d
	mov	r13d, DWORD PTR W$21$[rsp]
	xor	ecx, eax
	xor	r14d, r13d
	mov	edx, r8d
	ror	r9d, 2
	xor	r14d, DWORD PTR W$15$[rsp]
	add	ecx, -1894007588			; 8f1bbcdcH
	rol	edx, 5
	xor	r14d, DWORD PTR W$13$[rsp]
	mov	eax, r9d
	rol	esi, 1
	and	eax, r8d
	add	edi, edx
	rol	r14d, 1
	add	ecx, esi
	mov	DWORD PTR W$28$[rsp], esi
	add	edi, ecx
	mov	ecx, r9d
	mov	DWORD PTR W$29$[rsp], r14d
	xor	ecx, r8d
	ror	r8d, 2
	mov	edx, edi
	and	ecx, r11d
	rol	edx, 5
	xor	ecx, eax
	mov	eax, DWORD PTR W$27$[rsp]
	add	r10d, edx
	xor	eax, r15d
	add	ecx, -1894007588			; 8f1bbcdcH
	xor	eax, DWORD PTR W$16$[rsp]
	add	ecx, r14d
	add	r10d, ecx
	xor	eax, ebx
	mov	ebx, DWORD PTR W$17$[rsp]
	rol	eax, 1
	mov	edx, r10d
	mov	ecx, r8d
	mov	DWORD PTR W$30$[rsp], eax
	xor	ecx, edi
	mov	eax, r8d
	and	ecx, r9d
	rol	edx, 5
	and	eax, edi
	xor	ecx, eax
	add	r11d, edx
	mov	eax, esi
	xor	eax, DWORD PTR W$23$[rsp]
	add	ecx, -1894007588			; 8f1bbcdcH
	ror	edi, 2
	add	ecx, DWORD PTR W$30$[rsp]
	xor	eax, ebx
	xor	eax, DWORD PTR W$15$[rsp]
	add	r11d, ecx
	mov	ecx, edi
	xor	ecx, r10d
	rol	eax, 1
	mov	edx, r11d
	mov	DWORD PTR W$31$[rsp], eax
	and	ecx, r8d
	mov	eax, edi
	and	eax, r10d
	xor	ecx, eax
	rol	edx, 5
	mov	eax, r14d
	add	ecx, -1894007588			; 8f1bbcdcH
	add	r9d, edx
	add	ecx, DWORD PTR W$31$[rsp]
	add	r9d, ecx
	ror	r10d, 2
	xor	eax, DWORD PTR W$24$[rsp]
	mov	esi, DWORD PTR W$18$[rsp]

; 162  :     ROUND_40_TO_59(45); ROUND_40_TO_59(46); ROUND_40_TO_59(47); ROUND_40_TO_59(48); ROUND_40_TO_59(49);

	mov	r14d, DWORD PTR W$30$[rsp]
	mov	ecx, r10d
	xor	r14d, DWORD PTR W$25$[rsp]
	xor	ecx, r11d
	xor	eax, esi
	xor	eax, DWORD PTR W$16$[rsp]
	and	ecx, edi
	xor	r14d, r12d
	rol	eax, 1
	xor	r14d, ebx
	mov	ebx, DWORD PTR W$31$[rsp]
	xor	ebx, DWORD PTR W$26$[rsp]
	mov	DWORD PTR W$32$[rsp], eax
	mov	eax, r10d
	and	eax, r11d
	rol	r14d, 1
	mov	edx, r9d
	xor	ecx, eax
	rol	edx, 5
	mov	DWORD PTR W$33$[rsp], r14d
	add	ecx, -1894007588			; 8f1bbcdcH
	add	r8d, edx
	xor	ebx, ebp
	add	ecx, DWORD PTR W$32$[rsp]
	xor	ebx, esi
	ror	r11d, 2
	mov	esi, DWORD PTR W$32$[rsp]
	add	r8d, ecx
	mov	ecx, r11d
	xor	esi, DWORD PTR W$27$[rsp]
	xor	ecx, r9d
	mov	eax, r11d
	and	ecx, r10d
	and	eax, r9d
	mov	edx, r8d
	xor	ecx, eax
	rol	edx, 5
	xor	esi, r13d
	add	ecx, -1894007588			; 8f1bbcdcH
	ror	r9d, 2
	add	edi, edx
	add	ecx, r14d
	xor	r14d, DWORD PTR W$28$[rsp]
	xor	esi, r12d
	add	edi, ecx
	mov	ecx, r9d
	rol	ebx, 1
	xor	ecx, r8d
	mov	edx, edi
	rol	esi, 1
	and	ecx, r11d
	xor	r14d, r15d
	rol	edx, 5
	add	r10d, edx
	mov	eax, r9d
	xor	r14d, ebp
	and	eax, r8d
	mov	DWORD PTR W$34$[rsp], ebx
	mov	DWORD PTR W$35$[rsp], esi
	ror	r8d, 2
	xor	ecx, eax
	add	ecx, -1894007588			; 8f1bbcdcH
	mov	eax, r8d
	add	ecx, ebx
	and	eax, edi
	add	r10d, ecx
	mov	ecx, r8d
	xor	ecx, edi
	mov	edx, r10d
	and	ecx, r9d
	rol	edx, 5
	xor	ecx, eax
	add	r11d, edx
	ror	edi, 2
	add	ecx, -1894007588			; 8f1bbcdcH
	add	ecx, esi
	add	r11d, ecx
	mov	edx, r11d
	rol	r14d, 1
	mov	DWORD PTR W$36$[rsp], r14d
	rol	edx, 5

; 163  :     ROUND_40_TO_59(50); ROUND_40_TO_59(51); ROUND_40_TO_59(52); ROUND_40_TO_59(53); ROUND_40_TO_59(54);

	mov	ebp, r14d
	mov	ecx, edi
	xor	ebp, DWORD PTR W$31$[rsp]
	xor	ecx, r10d
	add	r9d, edx
	and	ecx, r8d
	mov	eax, edi
	mov	r12d, ebx
	xor	r12d, DWORD PTR W$29$[rsp]
	and	eax, r10d
	ror	r10d, 2
	xor	r12d, DWORD PTR W$23$[rsp]
	xor	ecx, eax
	mov	eax, r10d
	add	ecx, -1894007588			; 8f1bbcdcH
	and	eax, r11d
	xor	r12d, r13d
	add	ecx, r14d
	mov	r13d, esi
	xor	r13d, DWORD PTR W$30$[rsp]
	add	r9d, ecx
	rol	r12d, 1
	xor	r13d, DWORD PTR W$24$[rsp]
	mov	ecx, r10d
	mov	edx, r9d
	xor	ecx, r11d
	xor	r13d, r15d
	mov	r15d, DWORD PTR W$25$[rsp]
	ror	r11d, 2
	and	ecx, edi
	xor	ebp, r15d
	rol	r13d, 1
	xor	ebp, DWORD PTR W$23$[rsp]
	xor	ecx, eax
	add	ecx, -1894007588			; 8f1bbcdcH
	mov	eax, r11d
	mov	r14d, r12d
	xor	r14d, DWORD PTR W$32$[rsp]
	rol	edx, 5
	add	ecx, r12d
	xor	r14d, DWORD PTR W$26$[rsp]
	rol	ebp, 1
	add	r8d, edx
	xor	r14d, DWORD PTR W$24$[rsp]
	add	r8d, ecx
	and	eax, r9d
	mov	edx, r8d
	mov	ecx, r11d
	rol	r14d, 1
	xor	ecx, r9d
	mov	DWORD PTR W$37$[rsp], r12d
	rol	edx, 5
	and	ecx, r10d
	add	edi, edx
	ror	r9d, 2
	xor	ecx, eax
	mov	eax, r9d
	mov	DWORD PTR W$38$[rsp], r13d
	add	ecx, -1894007588			; 8f1bbcdcH
	and	eax, r8d
	mov	DWORD PTR W$39$[rsp], ebp
	add	ecx, r13d
	mov	DWORD PTR W$40$[rsp], r14d
	add	edi, ecx
	mov	ecx, r9d
	xor	ecx, r8d
	mov	edx, edi
	and	ecx, r11d
	xor	ecx, eax
	rol	edx, 5
	add	ecx, -1894007588			; 8f1bbcdcH
	add	r10d, edx
	ror	r8d, 2
	add	ecx, ebp
	add	r10d, ecx
	mov	ecx, r8d
	mov	edx, r10d
	xor	ecx, edi
	rol	edx, 5
	and	ecx, r9d
	xor	ebp, DWORD PTR W$34$[rsp]
	add	r11d, edx
	mov	eax, r8d
	and	eax, edi
	ror	edi, 2
	mov	ebx, r13d
	xor	ebx, DWORD PTR W$33$[rsp]
	xor	ecx, eax
	mov	eax, edi
	xor	ebx, DWORD PTR W$27$[rsp]
	add	ecx, -1894007588			; 8f1bbcdcH
	and	eax, r10d
	add	ecx, r14d

; 164  :     ROUND_40_TO_59(55); ROUND_40_TO_59(56); ROUND_40_TO_59(57); ROUND_40_TO_59(58); ROUND_40_TO_59(59);

	xor	r14d, DWORD PTR W$35$[rsp]
	xor	ebx, r15d
	xor	r14d, DWORD PTR W$29$[rsp]
	add	r11d, ecx
	mov	ecx, edi
	xor	r14d, DWORD PTR W$27$[rsp]
	rol	ebx, 1
	xor	ecx, r10d
	and	ecx, r8d
	ror	r10d, 2
	mov	DWORD PTR W$41$[rsp], ebx
	xor	ecx, eax
	mov	esi, r11d
	mov	eax, r10d
	add	ecx, -1894007588			; 8f1bbcdcH
	and	eax, r11d
	rol	r14d, 1
	add	ecx, ebx
	xor	ebx, DWORD PTR W$36$[rsp]
	rol	esi, 5
	xor	ebx, DWORD PTR W$30$[rsp]
	add	esi, r9d
	mov	r9d, DWORD PTR W$28$[rsp]
	add	esi, ecx
	xor	ebp, r9d
	xor	ebx, r9d
	xor	ebp, DWORD PTR W$26$[rsp]
	mov	edx, esi
	mov	ecx, r10d
	xor	ecx, r11d
	rol	edx, 5
	mov	DWORD PTR W$43$[rsp], r14d
	and	ecx, edi
	rol	ebp, 1
	add	r8d, edx
	xor	ecx, eax
	ror	r11d, 2
	mov	DWORD PTR W$42$[rsp], ebp
	add	ecx, -1894007588			; 8f1bbcdcH
	rol	ebx, 1
	mov	eax, r11d
	add	ecx, ebp
	and	eax, esi
	mov	DWORD PTR W$44$[rsp], ebx
	add	r8d, ecx
	mov	ecx, r11d
	xor	ecx, esi
	mov	edx, r8d
	and	ecx, r10d
	xor	ecx, eax
	ror	esi, 2
	add	ecx, -1894007588			; 8f1bbcdcH
	mov	eax, esi
	rol	edx, 5
	add	ecx, r14d
	add	edi, edx
	and	eax, r8d
	add	edi, ecx
	mov	ecx, esi
	xor	ecx, r8d
	mov	r9d, edi
	and	ecx, r11d
	xor	ecx, eax
	add	ecx, -1894007588			; 8f1bbcdcH
	rol	r9d, 5
	add	ecx, ebx
	add	r9d, r10d
	add	r9d, ecx
	ror	r8d, 2
	mov	r10d, r9d
	mov	r15d, ebp
	xor	r15d, r12d
	mov	ecx, r8d
	mov	eax, r8d
	xor	r15d, DWORD PTR W$31$[rsp]
	rol	r10d, 5
	xor	ecx, edi
	xor	r15d, DWORD PTR W$29$[rsp]
	and	ecx, esi
	and	eax, edi
	xor	ecx, eax
	add	r10d, r11d
	ror	edi, 2
	add	ecx, -1894007588			; 8f1bbcdcH
	mov	r12d, r14d
	rol	r15d, 1
	add	ecx, r15d
	xor	r12d, r13d
	mov	r13d, ebx
	xor	r12d, DWORD PTR W$32$[rsp]
	xor	r13d, DWORD PTR W$39$[rsp]
	add	r10d, ecx
	xor	r12d, DWORD PTR W$30$[rsp]
	xor	r13d, DWORD PTR W$33$[rsp]
	mov	r11d, r10d
	xor	r13d, DWORD PTR W$31$[rsp]
	rol	r11d, 5
	mov	ecx, edi
	xor	ecx, r9d
	add	r11d, esi
	mov	eax, edi
	and	ecx, r8d
	and	eax, r9d
	rol	r12d, 1
	xor	ecx, eax

; 165  : 
; 166  :     ROUND_60_TO_79(60); ROUND_60_TO_79(61); ROUND_60_TO_79(62); ROUND_60_TO_79(63); ROUND_60_TO_79(64);

	mov	ebx, r15d
	ror	r9d, 2
	xor	ebx, DWORD PTR W$40$[rsp]
	add	ecx, -1894007588			; 8f1bbcdcH
	rol	r13d, 1
	xor	ebx, DWORD PTR W$34$[rsp]
	add	ecx, r12d
	mov	eax, r9d
	xor	ebx, DWORD PTR W$32$[rsp]
	add	r11d, ecx
	and	eax, r10d
	mov	edx, r11d
	mov	ecx, r9d
	mov	esi, r12d
	xor	esi, DWORD PTR W$41$[rsp]
	xor	ecx, r10d
	mov	DWORD PTR W$45$[rsp], r15d
	xor	esi, DWORD PTR W$35$[rsp]
	and	ecx, edi
	ror	r10d, 2
	xor	esi, DWORD PTR W$33$[rsp]
	xor	ecx, eax
	rol	edx, 5
	add	r8d, edx
	add	ecx, -1894007588			; 8f1bbcdcH
	rol	ebx, 1
	add	ecx, r13d
	mov	eax, r9d
	rol	esi, 1
	xor	eax, r10d
	add	r8d, ecx
	mov	DWORD PTR W$46$[rsp], r12d
	xor	eax, r11d
	mov	edx, r8d
	mov	DWORD PTR W$47$[rsp], r13d
	rol	edx, 5
	add	eax, -899497514				; ca62c1d6H
	mov	DWORD PTR W$49$[rsp], esi
	ror	r11d, 2
	add	edx, edi
	add	eax, ebx
	add	edx, eax
	mov	ecx, edx
	rol	ecx, 5
	add	r9d, ecx
	mov	eax, r10d
	mov	edi, r13d
	xor	eax, r11d
	xor	edi, ebp
	mov	ebp, ebx
	xor	edi, DWORD PTR W$36$[rsp]
	xor	eax, r8d
	xor	ebp, r14d
	xor	edi, DWORD PTR W$34$[rsp]
	xor	ebp, DWORD PTR W$37$[rsp]
	add	eax, -899497514				; ca62c1d6H
	xor	ebp, DWORD PTR W$35$[rsp]
	add	eax, esi
	rol	edi, 1
	add	r9d, eax
	mov	eax, r11d
	ror	r8d, 2
	xor	eax, r8d
	mov	DWORD PTR W$50$[rsp], edi
	rol	ebp, 1
	xor	eax, edx
	mov	ecx, r9d
	ror	edx, 2
	add	eax, -899497514				; ca62c1d6H
	mov	r14d, esi
	rol	ecx, 5
	xor	r14d, DWORD PTR W$44$[rsp]
	add	eax, edi
	add	r10d, ecx
	xor	r14d, DWORD PTR W$38$[rsp]
	add	r10d, eax

; 167  :     ROUND_60_TO_79(65); ROUND_60_TO_79(66); ROUND_60_TO_79(67); ROUND_60_TO_79(68); ROUND_60_TO_79(69);

	xor	edi, r15d
	xor	r14d, DWORD PTR W$36$[rsp]
	xor	edi, DWORD PTR W$39$[rsp]
	mov	eax, r8d
	xor	edi, DWORD PTR W$37$[rsp]
	xor	eax, edx
	mov	ecx, r10d
	xor	eax, r9d
	mov	r15d, ebp
	rol	ecx, 5
	add	eax, -899497514				; ca62c1d6H
	add	r11d, ecx
	rol	r14d, 1
	add	eax, ebp
	xor	r15d, r12d
	ror	r9d, 2
	xor	r15d, DWORD PTR W$40$[rsp]
	add	r11d, eax
	mov	eax, edx
	xor	r15d, DWORD PTR W$38$[rsp]
	xor	eax, r9d
	mov	ecx, r11d
	xor	eax, r10d
	mov	DWORD PTR W$51$[rsp], ebp
	mov	DWORD PTR W$52$[rsp], r14d
	add	eax, -899497514				; ca62c1d6H
	rol	ecx, 5
	add	eax, r14d
	add	r8d, ecx
	ror	r10d, 2
	add	r8d, eax
	mov	eax, r9d
	rol	edi, 1
	xor	eax, r10d
	mov	ecx, r8d
	rol	r15d, 1
	xor	eax, r11d
	mov	DWORD PTR W$53$[rsp], edi
	rol	ecx, 5
	add	eax, -899497514				; ca62c1d6H
	add	edx, ecx
	ror	r11d, 2
	add	eax, edi
	add	edx, eax
	mov	eax, r10d
	mov	ecx, edx
	xor	eax, r11d
	rol	ecx, 5
	xor	eax, r8d
	ror	r8d, 2
	add	eax, -899497514				; ca62c1d6H
	add	r9d, ecx
	add	eax, r15d
	mov	r12d, r14d
	mov	ebp, r15d
	add	r9d, eax
	xor	r12d, r13d
	xor	ebp, esi
	xor	r12d, DWORD PTR W$41$[rsp]
	xor	ebp, DWORD PTR W$43$[rsp]
	mov	r13d, edi
	xor	r12d, DWORD PTR W$39$[rsp]
	xor	ebp, DWORD PTR W$41$[rsp]
	mov	eax, r11d
	xor	eax, r8d
	xor	r13d, ebx
	mov	ecx, r9d
	xor	r13d, DWORD PTR W$42$[rsp]
	rol	r12d, 1
	xor	eax, edx
	xor	r13d, DWORD PTR W$40$[rsp]
	rol	ecx, 5
	add	eax, -899497514				; ca62c1d6H
	add	eax, r12d
	ror	edx, 2
	add	r10d, ecx
	add	r10d, eax
	rol	r13d, 1
	mov	eax, r8d
	xor	eax, edx
	rol	ebp, 1
	mov	ecx, r10d
	xor	eax, r9d
	rol	ecx, 5

; 168  :     ROUND_60_TO_79(70); ROUND_60_TO_79(71); ROUND_60_TO_79(72); ROUND_60_TO_79(73); ROUND_60_TO_79(74);

	mov	esi, r13d
	xor	esi, DWORD PTR W$51$[rsp]
	add	eax, -899497514				; ca62c1d6H
	add	r11d, ecx
	xor	esi, DWORD PTR W$45$[rsp]
	add	eax, r13d
	ror	r9d, 2
	xor	esi, DWORD PTR W$43$[rsp]
	add	r11d, eax
	mov	eax, edx
	xor	eax, r9d
	mov	edi, r11d
	mov	DWORD PTR W$57$[rsp], ebp
	rol	esi, 1
	xor	eax, r10d
	add	eax, -899497514				; ca62c1d6H
	rol	edi, 5
	mov	DWORD PTR W$59$[rsp], esi
	add	eax, ebp
	ror	r10d, 2
	add	edi, r8d
	add	edi, eax
	mov	r8d, r12d
	mov	eax, r9d
	xor	r8d, DWORD PTR W$50$[rsp]
	xor	eax, r10d
	mov	ecx, edi
	xor	r8d, DWORD PTR W$44$[rsp]
	xor	eax, r11d
	xor	r8d, DWORD PTR W$42$[rsp]
	rol	ecx, 5
	add	eax, -899497514				; ca62c1d6H
	add	edx, ecx
	ror	r11d, 2
	rol	r8d, 1
	add	eax, r8d
	mov	DWORD PTR W$58$[rsp], r8d
	add	edx, eax
	mov	eax, r10d
	xor	eax, r11d
	mov	ecx, edx
	xor	eax, edi
	add	eax, esi
	rol	ecx, 5
	add	eax, -899497514				; ca62c1d6H
	lea	esi, DWORD PTR [r9+rcx]
	ror	edi, 2
	add	esi, eax
	xor	ebp, r14d
	xor	ebp, DWORD PTR W$46$[rsp]
	mov	r14d, r8d
	mov	r8d, DWORD PTR W$59$[rsp]
	xor	r14d, DWORD PTR W$53$[rsp]
	xor	ebp, DWORD PTR W$44$[rsp]
	xor	r8d, r15d
	xor	r14d, DWORD PTR W$47$[rsp]
	xor	r8d, ebx
	rol	ebp, 1
	xor	r14d, DWORD PTR W$45$[rsp]
	xor	r8d, DWORD PTR W$46$[rsp]
	mov	eax, r11d
	xor	eax, edi
	mov	ecx, esi
	xor	eax, edx
	rol	r14d, 1
	add	eax, -899497514				; ca62c1d6H
	add	eax, ebp
	rol	r8d, 1

; 169  :     ROUND_60_TO_79(75); ROUND_60_TO_79(76); ROUND_60_TO_79(77); ROUND_60_TO_79(78); ROUND_60_TO_79(79);

	xor	ebp, r12d
	xor	ebp, DWORD PTR W$49$[rsp]
	ror	edx, 2
	xor	ebp, DWORD PTR W$47$[rsp]
	rol	ecx, 5
	add	r10d, ecx
	add	r10d, eax
	rol	ebp, 1
	mov	eax, edi
	xor	eax, edx
	mov	ecx, r10d
	xor	eax, esi
	add	eax, -899497514				; ca62c1d6H
	add	eax, r14d
	rol	ecx, 5
	xor	r14d, r13d
	xor	r14d, DWORD PTR W$50$[rsp]
	ror	esi, 2
	add	r11d, ecx
	add	r11d, eax
	mov	eax, edx
	xor	r14d, ebx
	xor	eax, esi
	mov	ecx, r11d
	rol	r14d, 1
	xor	eax, r10d
	add	eax, -899497514				; ca62c1d6H
	rol	ecx, 5
	add	eax, r8d
	xor	r8d, DWORD PTR W$57$[rsp]
	add	edi, ecx
	xor	r8d, DWORD PTR W$51$[rsp]
	add	edi, eax
	mov	eax, esi
	ror	r10d, 2
	xor	r8d, DWORD PTR W$49$[rsp]
	mov	r9d, edi
	xor	eax, r10d
	xor	eax, r11d
	add	eax, -899497514				; ca62c1d6H
	add	eax, ebp
	rol	r9d, 5
	add	r9d, edx
	add	r9d, eax
	ror	r11d, 2
	mov	eax, r10d
	xor	eax, r11d
	rol	r8d, 1
	mov	edx, r9d
	xor	eax, edi
	rol	edx, 5
	add	eax, -899497514				; ca62c1d6H
	add	edx, esi
	ror	edi, 2
	add	eax, r14d
	add	edx, eax
	mov	eax, r11d
	mov	ecx, edx
	rol	ecx, 5
	xor	ebp, DWORD PTR W$58$[rsp]
	xor	r14d, DWORD PTR W$59$[rsp]

; 170  :     
; 171  : 	A += H0;
; 172  : 	B += H1;
; 173  : 	C += H2;
; 174  : 
; 175  : 	BOOL result =    (tripcode[ 0] == base64CharTable[ A >> 26                  ])
; 176  : 	              && (tripcode[ 1] == base64CharTable[(A >> 20          ) & 0x3f])
; 177  : 	              && (tripcode[ 2] == base64CharTable[(A >> 14          ) & 0x3f])
; 178  : 	              && (tripcode[ 3] == base64CharTable[(A >>  8          ) & 0x3f])
; 179  : 	              && (tripcode[ 4] == base64CharTable[(A >>  2          ) & 0x3f])
; 180  : 	              && (tripcode[ 5] == base64CharTable[(B >> 28 | A <<  4) & 0x3f])
; 181  : 	              && (tripcode[ 6] == base64CharTable[(B >> 22          ) & 0x3f])
; 182  : 	              && (tripcode[ 7] == base64CharTable[(B >> 16          ) & 0x3f])
; 183  : 	              && (tripcode[ 8] == base64CharTable[(B >> 10          ) & 0x3f])
; 184  : 	              && (tripcode[ 9] == base64CharTable[(B >>  4          ) & 0x3f])
; 185  : 	              && (tripcode[10] == base64CharTable[(B <<  2 | C >> 30) & 0x3f])
; 186  : 	              && (tripcode[11] == base64CharTable[(C >> 24          ) & 0x3f]);

	mov	rbx, QWORD PTR tripcode$[rsp]
	xor	ebp, DWORD PTR W$52$[rsp]
	xor	r14d, DWORD PTR W$53$[rsp]
	mov	r15, QWORD PTR [rsp+104]
	xor	ebp, DWORD PTR W$50$[rsp]
	xor	r14d, DWORD PTR W$51$[rsp]
	mov	r13, QWORD PTR [rsp+120]
	rol	r14d, 1
	mov	r12, QWORD PTR [rsp+128]
	mov	rsi, QWORD PTR [rsp+144]
	xor	eax, edi
	add	r8d, -899497514				; ca62c1d6H
	add	r10d, ecx
	xor	eax, r9d
	rol	ebp, 1
	add	eax, r8d
	add	ebp, -899497514				; ca62c1d6H
	ror	r9d, 2
	add	r10d, eax
	mov	eax, edi
	xor	eax, r9d
	mov	r8d, r10d
	xor	eax, edx
	add	eax, ebp
	mov	rbp, QWORD PTR [rsp+152]
	rol	r8d, 5
	add	r8d, r11d
	lea	r11, OFFSET FLAT:?base64CharTable@@3PADA ; base64CharTable
	ror	edx, 2
	add	r8d, eax
	xor	r9d, edx
	xor	r9d, r10d
	mov	eax, r8d
	add	r8d, -271733879				; efcdab89H
	add	r9d, r14d
	mov	r14, QWORD PTR [rsp+112]
	rol	eax, 5
	add	eax, 833086679				; 31a7e4d7H
	add	eax, edi
	ror	r10d, 2
	add	r9d, eax
	add	r10d, -1732584194			; 98badcfeH
	mov	eax, r9d
	mov	edx, r9d
	shr	rax, 26
	movsx	ecx, BYTE PTR [rax+r11]
	movzx	eax, BYTE PTR [rbx]
	cmp	eax, ecx
	jne	$LN6@VerifySHA1
	mov	eax, edx
	shr	rax, 20
	and	eax, 63					; 0000003fH
	movsx	ecx, BYTE PTR [rax+r11]
	movzx	eax, BYTE PTR [rbx+1]
	cmp	eax, ecx
	jne	$LN6@VerifySHA1
	mov	eax, edx
	shr	rax, 14
	and	eax, 63					; 0000003fH
	movsx	ecx, BYTE PTR [rax+r11]
	movzx	eax, BYTE PTR [rbx+2]
	cmp	eax, ecx
	jne	$LN6@VerifySHA1
	mov	eax, edx
	shr	rax, 8
	and	eax, 63					; 0000003fH
	movsx	ecx, BYTE PTR [rax+r11]
	movzx	eax, BYTE PTR [rbx+3]
	cmp	eax, ecx
	jne	$LN6@VerifySHA1
	movzx	eax, BYTE PTR [rbx+4]
	shr	rdx, 2
	and	edx, 63					; 0000003fH
	movsx	ecx, BYTE PTR [rdx+r11]
	cmp	eax, ecx
	jne	$LN6@VerifySHA1
	mov	ecx, r9d
	mov	eax, r8d
	mov	edx, r8d
	shl	ecx, 4
	shr	rax, 28
	or	rcx, rax
	movzx	eax, BYTE PTR [rbx+5]
	and	ecx, 63					; 0000003fH
	movsx	ecx, BYTE PTR [rcx+r11]
	cmp	eax, ecx
	jne	$LN6@VerifySHA1
	mov	eax, edx
	shr	rax, 22
	and	eax, 63					; 0000003fH
	movsx	ecx, BYTE PTR [rax+r11]
	movzx	eax, BYTE PTR [rbx+6]
	cmp	eax, ecx
	jne	$LN6@VerifySHA1
	mov	eax, edx
	shr	rax, 16
	and	eax, 63					; 0000003fH
	movsx	ecx, BYTE PTR [rax+r11]
	movzx	eax, BYTE PTR [rbx+7]
	cmp	eax, ecx
	jne	SHORT $LN6@VerifySHA1
	mov	eax, edx
	shr	rax, 10
	and	eax, 63					; 0000003fH
	movsx	ecx, BYTE PTR [rax+r11]
	movzx	eax, BYTE PTR [rbx+8]
	cmp	eax, ecx
	jne	SHORT $LN6@VerifySHA1
	movzx	eax, BYTE PTR [rbx+9]
	shr	rdx, 4
	and	edx, 63					; 0000003fH
	movsx	ecx, BYTE PTR [rdx+r11]
	cmp	eax, ecx
	jne	SHORT $LN6@VerifySHA1
	mov	eax, r10d
	lea	ecx, DWORD PTR [r8*4]
	mov	edx, r10d
	shr	rax, 30
	or	rcx, rax
	movzx	eax, BYTE PTR [rbx+10]
	and	ecx, 63					; 0000003fH
	movsx	ecx, BYTE PTR [rcx+r11]
	cmp	eax, ecx
	jne	SHORT $LN6@VerifySHA1
	movzx	eax, BYTE PTR [rbx+11]
	shr	rdx, 24
	and	edx, 63					; 0000003fH
	movsx	ecx, BYTE PTR [rdx+r11]
	cmp	eax, ecx
	jne	SHORT $LN6@VerifySHA1
	mov	edi, 1
	jmp	SHORT $LN1@VerifySHA1
$LN6@VerifySHA1:

; 187  : 
; 188  : #if TRUE
; 189  : 	if (!result) {
; 190  : 		printf("key:      `%s'\n", key);

	mov	rdx, QWORD PTR key$[rsp]
	lea	rcx, OFFSET FLAT:$SG4294866283
	xor	edi, edi
	call	printf

; 191  : 		printf("tripcode: `%s'\n", tripcode);

	lea	rcx, OFFSET FLAT:$SG4294866282
	mov	rdx, rbx
	call	printf
$LN1@VerifySHA1:

; 192  : 	}
; 193  : 	fflush(stdout);

	call	__iob_func
	lea	rcx, QWORD PTR [rax+48]
	call	fflush

; 194  : #endif
; 195  : 
; 196  : 	return result;

	mov	eax, edi
	mov	rdi, QWORD PTR [rsp+136]

; 197  : }

	add	rsp, 160				; 000000a0H
	pop	rbx
	ret	0
$LN2@VerifySHA1:

; 140  : 		return FALSE;

	xor	eax, eax

; 197  : }

	add	rsp, 160				; 000000a0H
	pop	rbx
	ret	0
?VerifySHA1Tripcode@@YAHPEAE0@Z ENDP			; VerifySHA1Tripcode
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\boost\system\error_code.hpp
;	COMDAT ??__Eposix_category@system@boost@@YAXXZ
text$di	SEGMENT
??__Eposix_category@system@boost@@YAXXZ PROC		; boost::system::`dynamic initializer for 'posix_category'', COMDAT

; 221  :     static const error_category &  posix_category = generic_category();

	sub	rsp, 40					; 00000028H
	call	?generic_category@system@boost@@YAAEBVerror_category@12@XZ ; boost::system::generic_category
	mov	QWORD PTR posix_category, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Eposix_category@system@boost@@YAXXZ ENDP		; boost::system::`dynamic initializer for 'posix_category''
text$di	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\boost\system\error_code.hpp
;	COMDAT ??__Eerrno_ecat@system@boost@@YAXXZ
text$di	SEGMENT
??__Eerrno_ecat@system@boost@@YAXXZ PROC		; boost::system::`dynamic initializer for 'errno_ecat'', COMDAT

; 222  :     static const error_category &  errno_ecat     = generic_category();

	sub	rsp, 40					; 00000028H
	call	?generic_category@system@boost@@YAAEBVerror_category@12@XZ ; boost::system::generic_category
	mov	QWORD PTR errno_ecat, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Eerrno_ecat@system@boost@@YAXXZ ENDP		; boost::system::`dynamic initializer for 'errno_ecat''
text$di	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\boost\system\error_code.hpp
;	COMDAT ??__Enative_ecat@system@boost@@YAXXZ
text$di	SEGMENT
??__Enative_ecat@system@boost@@YAXXZ PROC		; boost::system::`dynamic initializer for 'native_ecat'', COMDAT

; 223  :     static const error_category &  native_ecat    = system_category();

	sub	rsp, 40					; 00000028H
	call	?system_category@system@boost@@YAAEBVerror_category@12@XZ ; boost::system::system_category
	mov	QWORD PTR native_ecat, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Enative_ecat@system@boost@@YAXXZ ENDP		; boost::system::`dynamic initializer for 'native_ecat''
text$di	ENDS
END
