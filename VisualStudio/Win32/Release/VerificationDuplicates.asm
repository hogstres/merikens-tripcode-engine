; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	Z:\GitHub\merikens-tripcode-engine\SourceFiles\VerificationDuplicates.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

_wasMatchedTripcodeTableInitialized DD 01H DUP (?)
_BSS	ENDS
$SG4294910778 DB '%d', 0aH, 00H
	ORG $+2
$SG4294910777 DB '[error],%d', 0aH, 00H
	ORG $+2
$SG4294910776 DB 'Not enough memory', 00H
	ORG $+2
$SG4294910775 DB 0aH, 'ERROR', 0aH, '=====', 0aH, '  %s', 0aH, 07H, 0aH, ' '
	DB	' Hit any key to exit.', 00H
PUBLIC	?IsTripcodeDuplicate@@YAHPAE@Z			; IsTripcodeDuplicate
__Tuple_alloc DB 01H DUP (?)
	ALIGN	4

_errno_ecat DD	01H DUP (?)
_ignore	DB	01H DUP (?)
	ALIGN	4

_duplicates_spinlock DD 01H DUP (?)
_allocator_arg DB 01H DUP (?)
	ALIGN	4

_native_ecat DD	01H DUP (?)
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_matchedTripcodeTable DD 01000H DUP (?)
_posix_category DD 01H DUP (?)
_BSS	ENDS
_posix_category$initializer$ DD FLAT:??__Eposix_category@system@boost@@YAXXZ
_errno_ecat$initializer$ DD FLAT:??__Eerrno_ecat@system@boost@@YAXXZ
_native_ecat$initializer$ DD FLAT:??__Enative_ecat@system@boost@@YAXXZ
_duplicates_spinlock$initializer$ DD FLAT:??__Eduplicates_spinlock@@YAXXZ
; Function compile flags: /Ogtp
; File z:\github\merikens-tripcode-engine\sourcefiles\verificationduplicates.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\atomic
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\thread
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h
; File z:\github\merikens-tripcode-engine\sourcefiles\verificationduplicates.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\atomic
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\thread
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h
; File z:\github\merikens-tripcode-engine\sourcefiles\main.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h
; File z:\github\merikens-tripcode-engine\sourcefiles\verificationduplicates.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\atomic
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\thread
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h
; File z:\github\merikens-tripcode-engine\sourcefiles\main.cpp
; File z:\github\merikens-tripcode-engine\sourcefiles\verificationduplicates.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h
; File z:\github\merikens-tripcode-engine\sourcefiles\verificationduplicates.cpp
; File z:\github\merikens-tripcode-engine\sourcefiles\main.cpp
; File z:\github\merikens-tripcode-engine\sourcefiles\verificationduplicates.cpp
; File z:\github\merikens-tripcode-engine\sourcefiles\main.cpp
; File z:\github\merikens-tripcode-engine\sourcefiles\verificationduplicates.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h
; File z:\github\merikens-tripcode-engine\sourcefiles\verificationduplicates.cpp
;	COMDAT ?IsTripcodeDuplicate@@YAHPAE@Z
_TEXT	SEGMENT
_info$1 = -40						; size = 8
_tripcode$GSCopy$1$ = -36				; size = 4
_tableIndex$1$ = -32					; size = 4
_cursorPos$2 = -32					; size = 4
_scrnBufInfo$3 = -28					; size = 22
__$ArrayPad$ = -4					; size = 4
?IsTripcodeDuplicate@@YAHPAE@Z PROC			; IsTripcodeDuplicate, COMDAT
; _tripcode$ = ecx

; 66   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _tripcode$GSCopy$1$[ebp], ecx

; 67   : 	BOOL result = FALSE;

	mov	esi, OFFSET _duplicates_spinlock
	npad	5
$LL27@IsTripcode:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h

; 2385 : 			return (_INTRIN_ACQUIRE(_interlockedbittestandset)(_Flag, 0));

	lock	 bts	 DWORD PTR [esi], 0
	setb	al
	movzx	eax, al
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\atomic

; 204  : 	return _ATOMIC_FLAG_TEST_AND_SET(&_My_flag, _Order);

	test	eax, eax
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h

; 149  : 		while (flag.test_and_set(std::memory_order_acquire))

	je	SHORT $LN26@IsTripcode
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\thread

; 123  : 	if (::Concurrency::details::_CurrentScheduler::_Id() != -1)

	call	?_Id@_CurrentScheduler@details@Concurrency@@SAIXZ ; Concurrency::details::_CurrentScheduler::_Id
	cmp	eax, -1
	je	SHORT $LN41@IsTripcode

; 124  : 		{	// yield, then quit
; 125  : 		::Concurrency::details::_Context::_Yield();

	call	?_Yield@_Context@details@Concurrency@@SAXXZ ; Concurrency::details::_Context::_Yield

; 126  : 		return;

	jmp	SHORT $LL27@IsTripcode
$LN41@IsTripcode:

; 127  : 		}
; 128  : 	_Thrd_yield();

	call	__Thrd_yield
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h

; 150  : 			std::this_thread::yield();

	jmp	SHORT $LL27@IsTripcode
$LN26@IsTripcode:
; File z:\github\merikens-tripcode-engine\sourcefiles\verificationduplicates.cpp

; 72   : 	if (!wasMatchedTripcodeTableInitialized) {

	cmp	DWORD PTR _wasMatchedTripcodeTableInitialized, 0
	jne	SHORT $LN23@IsTripcode

; 73   : 		for (int32_t i = 0; i < SIZE_MATCHED_TRIPCODE_TABLE; ++i)
; 74   : 			matchedTripcodeTable[i] = NULL;

	mov	ecx, 4096				; 00001000H

; 75   : 		wasMatchedTripcodeTableInitialized = TRUE;

	mov	DWORD PTR _wasMatchedTripcodeTableInitialized, 1
	xor	eax, eax
	mov	edi, OFFSET _matchedTripcodeTable
	rep stosd
$LN23@IsTripcode:

; 76   : 	}
; 77   : 
; 78   : 	// Create a hash value from the tripcode.
; 79   : 	int32_t hashValueUpper = 0;
; 80   : 	for (int32_t i = 0; i < lenTripcode; i += 2) {

	mov	edi, DWORD PTR ?lenTripcode@@3HA	; lenTripcode
	xor	ebx, ebx
	xor	esi, esi
	mov	DWORD PTR _tableIndex$1$[ebp], ebx
	test	edi, edi
	jle	SHORT $LN17@IsTripcode
	npad	7
$LL19@IsTripcode:
	mov	edx, DWORD PTR _tripcode$GSCopy$1$[ebp]

; 81   : 		int32_t j;
; 82   : 		for (j = 0; j < 63 && base64CharTable[j] != tripcode[i]; ++j)

	xor	ecx, ecx
	movzx	edx, BYTE PTR [edx+esi]
	npad	7
$LL16@IsTripcode:
	movsx	eax, BYTE PTR ?base64CharTable@@3PADA[ecx]
	cmp	eax, edx
	je	SHORT $LN14@IsTripcode
	inc	ecx
	cmp	ecx, 63					; 0000003fH
	jl	SHORT $LL16@IsTripcode
$LN14@IsTripcode:

; 76   : 	}
; 77   : 
; 78   : 	// Create a hash value from the tripcode.
; 79   : 	int32_t hashValueUpper = 0;
; 80   : 	for (int32_t i = 0; i < lenTripcode; i += 2) {

	add	esi, 2

; 83   : 			;
; 84   : 		hashValueUpper ^= j;

	xor	ebx, ecx
	cmp	esi, edi
	jl	SHORT $LL19@IsTripcode
	mov	DWORD PTR _tableIndex$1$[ebp], ebx
$LN17@IsTripcode:

; 85   : 	}
; 86   : 	int32_t hashValueLower = 0;

	xor	ebx, ebx

; 87   : 	for (int32_t i = 1; i < lenTripcode; i += 2) {

	lea	esi, DWORD PTR [ebx+1]
	cmp	edi, esi
	jle	SHORT $LN11@IsTripcode
$LL13@IsTripcode:
	mov	edx, DWORD PTR _tripcode$GSCopy$1$[ebp]

; 88   : 		int32_t j;
; 89   : 		for (j = 0; j < 63 && base64CharTable[j] != tripcode[i]; ++j)

	xor	ecx, ecx
	movzx	edx, BYTE PTR [edx+esi]
	npad	1
$LL10@IsTripcode:
	movsx	eax, BYTE PTR ?base64CharTable@@3PADA[ecx]
	cmp	eax, edx
	je	SHORT $LN8@IsTripcode
	inc	ecx
	cmp	ecx, 63					; 0000003fH
	jl	SHORT $LL10@IsTripcode
$LN8@IsTripcode:

; 87   : 	for (int32_t i = 1; i < lenTripcode; i += 2) {

	add	esi, 2

; 90   : 			;
; 91   : 		hashValueLower ^= j;

	xor	ebx, ecx
	cmp	esi, edi
	jl	SHORT $LL13@IsTripcode
$LN11@IsTripcode:

; 92   : 	}
; 93   : 	int32_t tableIndex = (hashValueUpper * 64 + hashValueLower) % SIZE_MATCHED_TRIPCODE_TABLE;

	mov	eax, DWORD PTR _tableIndex$1$[ebp]
	shl	eax, 6
	add	eax, ebx
	and	eax, -2147479553			; 80000fffH
	jns	SHORT $LN204@IsTripcode
	dec	eax
	or	eax, -4096				; fffff000H
	inc	eax
$LN204@IsTripcode:

; 94   : 	// printf("tableIndex = %d\n", tableIndex);
; 95   : 
; 96   : 	// Check to see if the tripcode is a duplicate.
; 97   : 	TripcodeLinkedList *p = matchedTripcodeTable[tableIndex];

	mov	esi, DWORD PTR _matchedTripcodeTable[eax*4]
	mov	ebx, DWORD PTR _tripcode$GSCopy$1$[ebp]
	mov	DWORD PTR _tableIndex$1$[ebp], eax

; 98   : 	while (p != NULL) {

	test	esi, esi
	je	SHORT $LN6@IsTripcode
$LL7@IsTripcode:

; 99   : 		if (strncmp((char *)(p->tripcode), (char *)tripcode, lenTripcode) == 0) {

	push	edi
	lea	eax, DWORD PTR [esi+4]
	push	ebx
	push	eax
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN172@IsTripcode

; 103  : 		}
; 104  : 		p = p->next;

	mov	esi, DWORD PTR [esi]
	test	esi, esi
	je	SHORT $LN6@IsTripcode

; 98   : 	while (p != NULL) {

	mov	edi, DWORD PTR ?lenTripcode@@3HA	; lenTripcode
	jmp	SHORT $LL7@IsTripcode
$LN172@IsTripcode:

; 100  : 			result = TRUE;

	mov	eax, 1

; 101  : 			// printf("[DUPLICATE FOUND]\n");
; 102  : 			goto exit;

	jmp	$exit$209
$LN6@IsTripcode:

; 105  : 	}
; 106  : 
; 107  : 	// Add the tripcode to the table.
; 108  : 	TripcodeLinkedList *newNode = (TripcodeLinkedList *)malloc(sizeof(TripcodeLinkedList));

	push	20					; 00000014H
	call	_malloc
	mov	esi, eax
	add	esp, 4

; 109  : 	ERROR0(newNode == NULL, ERROR_NO_MEMORY, "Not enough memory");

	test	esi, esi
	jne	$LN3@IsTripcode
	mov	edi, OFFSET ?current_state_spinlock@@3Vspinlock@@A ; current_state_spinlock
$LL47@IsTripcode:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h

; 2385 : 			return (_INTRIN_ACQUIRE(_interlockedbittestandset)(_Flag, 0));

	lock	 bts	 DWORD PTR [edi], 0
	setb	al
	movzx	eax, al
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\atomic

; 204  : 	return _ATOMIC_FLAG_TEST_AND_SET(&_My_flag, _Order);

	test	eax, eax
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h

; 149  : 		while (flag.test_and_set(std::memory_order_acquire))

	je	SHORT $LN46@IsTripcode
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\thread

; 123  : 	if (::Concurrency::details::_CurrentScheduler::_Id() != -1)

	call	?_Id@_CurrentScheduler@details@Concurrency@@SAIXZ ; Concurrency::details::_CurrentScheduler::_Id
	cmp	eax, -1
	je	SHORT $LN61@IsTripcode

; 124  : 		{	// yield, then quit
; 125  : 		::Concurrency::details::_Context::_Yield();

	call	?_Yield@_Context@details@Concurrency@@SAXXZ ; Concurrency::details::_Context::_Yield

; 126  : 		return;

	jmp	SHORT $LL47@IsTripcode
$LN61@IsTripcode:

; 127  : 		}
; 128  : 	_Thrd_yield();

	call	__Thrd_yield
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h

; 150  : 			std::this_thread::yield();

	jmp	SHORT $LL47@IsTripcode
$LN46@IsTripcode:
; File z:\github\merikens-tripcode-engine\sourcefiles\main.cpp

; 1649 : 	ret = wasSearchAbortedWithError;

	mov	eax, DWORD PTR ?wasSearchAbortedWithError@@3HA ; wasSearchAbortedWithError
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h

; 1363 : 	*_Tgt = _Value;

	mov	DWORD PTR ?current_state_spinlock@@3Vspinlock@@A, 0 ; current_state_spinlock
; File z:\github\merikens-tripcode-engine\sourcefiles\verificationduplicates.cpp

; 109  : 	ERROR0(newNode == NULL, ERROR_NO_MEMORY, "Not enough memory");

	test	eax, eax
	jne	$LN3@IsTripcode
$LL91@IsTripcode:
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h

; 2385 : 			return (_INTRIN_ACQUIRE(_interlockedbittestandset)(_Flag, 0));

	lock	 bts	 DWORD PTR [edi], 0
	setb	al
	movzx	eax, al
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\atomic

; 204  : 	return _ATOMIC_FLAG_TEST_AND_SET(&_My_flag, _Order);

	test	eax, eax
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h

; 149  : 		while (flag.test_and_set(std::memory_order_acquire))

	je	SHORT $LN90@IsTripcode
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\thread

; 123  : 	if (::Concurrency::details::_CurrentScheduler::_Id() != -1)

	call	?_Id@_CurrentScheduler@details@Concurrency@@SAIXZ ; Concurrency::details::_CurrentScheduler::_Id
	cmp	eax, -1
	je	SHORT $LN105@IsTripcode

; 124  : 		{	// yield, then quit
; 125  : 		::Concurrency::details::_Context::_Yield();

	call	?_Yield@_Context@details@Concurrency@@SAXXZ ; Concurrency::details::_Context::_Yield

; 126  : 		return;

	jmp	SHORT $LL91@IsTripcode
$LN105@IsTripcode:

; 127  : 		}
; 128  : 	_Thrd_yield();

	call	__Thrd_yield
; File z:\github\merikens-tripcode-engine\sourcefiles\types.h

; 150  : 			std::this_thread::yield();

	jmp	SHORT $LL91@IsTripcode
$LN90@IsTripcode:
; File z:\github\merikens-tripcode-engine\sourcefiles\main.cpp

; 1641 : 	wasSearchAbortedWithError = TRUE;

	mov	DWORD PTR ?wasSearchAbortedWithError@@3HA, 1 ; wasSearchAbortedWithError
; File z:\github\merikens-tripcode-engine\sourcefiles\verificationduplicates.cpp

; 109  : 	ERROR0(newNode == NULL, ERROR_NO_MEMORY, "Not enough memory");

	cmp	DWORD PTR ?options@@3UOptions@@A+32, 0
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h

; 1363 : 	*_Tgt = _Value;

	mov	DWORD PTR ?current_state_spinlock@@3Vspinlock@@A, 0 ; current_state_spinlock
; File z:\github\merikens-tripcode-engine\sourcefiles\verificationduplicates.cpp

; 109  : 	ERROR0(newNode == NULL, ERROR_NO_MEMORY, "Not enough memory");

	je	SHORT $LN2@IsTripcode
	push	5
	push	OFFSET $SG4294910778
	call	___iob_func
	add	eax, 64					; 00000040H
	push	eax
	call	_fprintf
	call	___iob_func
	add	eax, 64					; 00000040H
	push	eax
	call	_fflush
	push	5
	push	OFFSET $SG4294910777
	call	_printf
	call	___iob_func
	add	eax, 32					; 00000020H
	push	eax
	call	_fflush
	add	esp, 28					; 0000001cH
	jmp	$LN137@IsTripcode
$LN2@IsTripcode:
	mov	edi, DWORD PTR ?prevLineCount@@3HA	; prevLineCount
; File z:\github\merikens-tripcode-engine\sourcefiles\main.cpp

; 259  : 	if (!GetConsoleScreenBufferInfo(GetStdHandle(STD_OUTPUT_HANDLE), &scrnBufInfo))

	lea	eax, DWORD PTR _scrnBufInfo$3[ebp]
	mov	esi, DWORD PTR __imp__GetStdHandle@4
	push	eax
	push	-11					; fffffff5H
	call	esi
	push	eax
	call	DWORD PTR __imp__GetConsoleScreenBufferInfo@8
	test	eax, eax
	je	SHORT $LN133@IsTripcode

; 260  : 		return;
; 261  : 	cursorPos.X = 0;
; 262  : 	cursorPos.Y = (scrnBufInfo.dwCursorPosition.Y + n) >= 0
; 263  : 		? (scrnBufInfo.dwCursorPosition.Y + n)
; 264  : 		: 0;

	mov	ecx, DWORD PTR _scrnBufInfo$3[ebp+6]
	xor	eax, eax
	mov	WORD PTR _cursorPos$2[ebp], ax
	movsx	eax, cx
	add	eax, edi
	js	SHORT $LN135@IsTripcode
	lea	eax, DWORD PTR [edi+ecx]
	jmp	SHORT $LN206@IsTripcode
$LN135@IsTripcode:
	xor	eax, eax
$LN206@IsTripcode:
	mov	WORD PTR _cursorPos$2[ebp+2], ax

; 265  : 	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), cursorPos);

	push	DWORD PTR _cursorPos$2[ebp]
	push	-11					; fffffff5H
	call	esi
	push	eax
	call	DWORD PTR __imp__SetConsoleCursorPosition@8
$LN133@IsTripcode:
; File z:\github\merikens-tripcode-engine\sourcefiles\verificationduplicates.cpp

; 109  : 	ERROR0(newNode == NULL, ERROR_NO_MEMORY, "Not enough memory");

	push	OFFSET $SG4294910776
	push	OFFSET $SG4294910775
	call	_printf
	add	esp, 8
	call	__getch
; File z:\github\merikens-tripcode-engine\sourcefiles\main.cpp

; 292  : 	SetConsoleCursorInfo((HWND)GetStdHandle(STD_OUTPUT_HANDLE), &info); 

	lea	eax, DWORD PTR _info$1[ebp]
	mov	DWORD PTR _info$1[ebp+4], 1
	push	eax
	push	-11					; fffffff5H
	mov	DWORD PTR _info$1[ebp], 100		; 00000064H
	call	esi
	push	eax
	call	DWORD PTR __imp__SetConsoleCursorInfo@8
$LN137@IsTripcode:
; File z:\github\merikens-tripcode-engine\sourcefiles\verificationduplicates.cpp

; 109  : 	ERROR0(newNode == NULL, ERROR_NO_MEMORY, "Not enough memory");

	push	1
	call	DWORD PTR __imp__ExitProcess@4
$LN208@IsTripcode:
$LN3@IsTripcode:

; 110  : 	newNode->next = matchedTripcodeTable[tableIndex];

	mov	edi, DWORD PTR _tableIndex$1$[ebp]
	mov	eax, DWORD PTR _matchedTripcodeTable[edi*4]
	mov	DWORD PTR [esi], eax

; 111  : 	strncpy((char *)(newNode->tripcode), (char *)tripcode, lenTripcode);

	lea	eax, DWORD PTR [esi+4]
	push	DWORD PTR ?lenTripcode@@3HA		; lenTripcode
	push	ebx
	push	eax
	call	_strncpy

; 112  : 	newNode->tripcode[lenTripcode] = '\0';

	mov	ecx, DWORD PTR ?lenTripcode@@3HA	; lenTripcode
	add	esp, 12					; 0000000cH
	xor	eax, eax
	mov	BYTE PTR [ecx+esi+4], 0

; 113  : 	matchedTripcodeTable[tableIndex] = newNode;

	mov	DWORD PTR _matchedTripcodeTable[edi*4], esi
$exit$209:
	pop	edi
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h

; 1363 : 	*_Tgt = _Value;

	mov	DWORD PTR _duplicates_spinlock, 0
; File z:\github\merikens-tripcode-engine\sourcefiles\verificationduplicates.cpp

; 118  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN207@IsTripcode:
?IsTripcodeDuplicate@@YAHPAE@Z ENDP			; IsTripcodeDuplicate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\boost\system\error_code.hpp
;	COMDAT ??__Eposix_category@system@boost@@YAXXZ
text$di	SEGMENT
??__Eposix_category@system@boost@@YAXXZ PROC		; boost::system::`dynamic initializer for 'posix_category'', COMDAT

; 221  :     static const error_category &  posix_category = generic_category();

	call	?generic_category@system@boost@@YAABVerror_category@12@XZ ; boost::system::generic_category
	mov	DWORD PTR _posix_category, eax
	ret	0
??__Eposix_category@system@boost@@YAXXZ ENDP		; boost::system::`dynamic initializer for 'posix_category''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\boost\system\error_code.hpp
;	COMDAT ??__Eerrno_ecat@system@boost@@YAXXZ
text$di	SEGMENT
??__Eerrno_ecat@system@boost@@YAXXZ PROC		; boost::system::`dynamic initializer for 'errno_ecat'', COMDAT

; 222  :     static const error_category &  errno_ecat     = generic_category();

	call	?generic_category@system@boost@@YAABVerror_category@12@XZ ; boost::system::generic_category
	mov	DWORD PTR _errno_ecat, eax
	ret	0
??__Eerrno_ecat@system@boost@@YAXXZ ENDP		; boost::system::`dynamic initializer for 'errno_ecat''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\boost\system\error_code.hpp
;	COMDAT ??__Enative_ecat@system@boost@@YAXXZ
text$di	SEGMENT
??__Enative_ecat@system@boost@@YAXXZ PROC		; boost::system::`dynamic initializer for 'native_ecat'', COMDAT

; 223  :     static const error_category &  native_ecat    = system_category();

	call	?system_category@system@boost@@YAABVerror_category@12@XZ ; boost::system::system_category
	mov	DWORD PTR _native_ecat, eax
	ret	0
??__Enative_ecat@system@boost@@YAXXZ ENDP		; boost::system::`dynamic initializer for 'native_ecat''
text$di	ENDS
; Function compile flags: /Ogtp
; File z:\github\merikens-tripcode-engine\sourcefiles\verificationduplicates.cpp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h
; File z:\github\merikens-tripcode-engine\sourcefiles\verificationduplicates.cpp
;	COMDAT ??__Eduplicates_spinlock@@YAXXZ
text$di	SEGMENT
??__Eduplicates_spinlock@@YAXXZ PROC			; `dynamic initializer for 'duplicates_spinlock'', COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xatomic.h

; 1377 : 	_INTRIN_SEQ_CST(_InterlockedExchange)((volatile long *)_Tgt, _Value);

	xor	eax, eax
	mov	ecx, OFFSET _duplicates_spinlock
	xchg	DWORD PTR [ecx], eax
; File z:\github\merikens-tripcode-engine\sourcefiles\verificationduplicates.cpp

; 47   : static spinlock duplicates_spinlock;

	ret	0
??__Eduplicates_spinlock@@YAXXZ ENDP			; `dynamic initializer for 'duplicates_spinlock''
text$di	ENDS
END
