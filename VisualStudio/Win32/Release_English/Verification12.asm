; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	Z:\GitHub\merikens-tripcode-engine\SourceFiles\Verification12.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

	ORG $+2
$SG4294905149 DB 'key:      `%s''', 0aH, 00H
	ORG $+2
$SG4294905148 DB 'tripcode: `%s''', 0aH, 00H
PUBLIC	?VerifySHA1Tripcode@@YAHPAE0@Z			; VerifySHA1Tripcode
__Tuple_alloc DB 01H DUP (?)
	ALIGN	4

_errno_ecat DD	01H DUP (?)
_ignore	DB	01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
	ALIGN	4

_native_ecat DD	01H DUP (?)
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_posix_category DD 01H DUP (?)
_BSS	ENDS
_posix_category$initializer$ DD FLAT:??__Eposix_category@system@boost@@YAXXZ
_errno_ecat$initializer$ DD FLAT:??__Eerrno_ecat@system@boost@@YAXXZ
_native_ecat$initializer$ DD FLAT:??__Enative_ecat@system@boost@@YAXXZ
; Function compile flags: /Ogtp
; File z:\github\merikens-tripcode-engine\sourcefiles\verification12.cpp
;	COMDAT ?VerifySHA1Tripcode@@YAHPAE0@Z
_TEXT	SEGMENT
_key$1$ = -92						; size = 4
_tripcode$1$ = -88					; size = 4
_W$54$ = -84						; size = 4
_E$64$ = -84						; size = 4
_E$59$ = -84						; size = 4
_E$56$ = -84						; size = 4
_E$53$ = -84						; size = 4
_E$39$ = -84						; size = 4
_E$37$ = -84						; size = 4
_E$35$ = -84						; size = 4
_E$33$ = -84						; size = 4
_E$31$ = -84						; size = 4
_E$29$ = -84						; size = 4
_E$27$ = -84						; size = 4
_E$25$ = -84						; size = 4
_E$23$ = -84						; size = 4
_E$17$ = -84						; size = 4
_E$5$ = -84						; size = 4
_C$78$ = -84						; size = 4
_W$55$ = -80						; size = 4
_E$65$ = -80						; size = 4
_E$57$ = -80						; size = 4
_E$52$ = -80						; size = 4
_E$38$ = -80						; size = 4
_E$34$ = -80						; size = 4
_E$32$ = -80						; size = 4
_E$30$ = -80						; size = 4
_E$28$ = -80						; size = 4
_E$26$ = -80						; size = 4
_E$24$ = -80						; size = 4
_E$18$ = -80						; size = 4
_B$79$ = -80						; size = 4
_W$1$ = -80						; size = 4
_W$56$ = -76						; size = 4
_E$66$ = -76						; size = 4
_E$58$ = -76						; size = 4
_E$51$ = -76						; size = 4
_E$48$ = -76						; size = 4
_E$45$ = -76						; size = 4
_E$42$ = -76						; size = 4
_W$66$ = -72						; size = 4
_W$41$ = -72						; size = 4
_E$70$ = -72						; size = 4
_E$50$ = -72						; size = 4
_E$47$ = -72						; size = 4
_E$44$ = -72						; size = 4
_E$41$ = -72						; size = 4
_E$36$ = -72						; size = 4
_E$13$ = -72						; size = 4
_E$10$ = -72						; size = 4
_E$7$ = -72						; size = 4
_E$2$ = -72						; size = 4
_W$40$ = -68						; size = 4
_E$75$ = -68						; size = 4
_E$71$ = -68						; size = 4
_E$69$ = -68						; size = 4
_E$49$ = -68						; size = 4
_E$46$ = -68						; size = 4
_E$43$ = -68						; size = 4
_E$40$ = -68						; size = 4
_E$12$ = -68						; size = 4
_E$9$ = -68						; size = 4
_E$6$ = -68						; size = 4
_W$67$ = -64						; size = 4
_W$35$ = -64						; size = 4
_W$19$ = -64						; size = 4
_E$67$ = -64						; size = 4
_E$14$ = -64						; size = 4
_E$11$ = -64						; size = 4
_E$8$ = -64						; size = 4
_W$50$ = -60						; size = 4
_W$34$ = -60						; size = 4
_W$18$ = -60						; size = 4
_W$49$ = -56						; size = 4
_W$33$ = -56						; size = 4
_W$17$ = -56						; size = 4
_W$48$ = -52						; size = 4
_W$32$ = -52						; size = 4
_W$16$ = -52						; size = 4
_W$47$ = -48						; size = 4
_W$31$ = -48						; size = 4
_W$15$ = -48						; size = 4
_W$46$ = -44						; size = 4
_W$30$ = -44						; size = 4
_W$14$ = -44						; size = 4
_W$45$ = -40						; size = 4
_W$29$ = -40						; size = 4
_W$13$ = -40						; size = 4
_W$44$ = -36						; size = 4
_W$28$ = -36						; size = 4
_W$12$ = -36						; size = 4
_E$73$ = -36						; size = 4
_W$59$ = -32						; size = 4
_W$43$ = -32						; size = 4
_W$27$ = -32						; size = 4
_W$11$ = -32						; size = 4
_W$58$ = -28						; size = 4
_W$42$ = -28						; size = 4
_W$26$ = -28						; size = 4
_W$10$ = -28						; size = 4
_W$57$ = -24						; size = 4
_W$39$ = -24						; size = 4
_W$23$ = -24						; size = 4
_W$7$ = -24						; size = 4
_W$52$ = -20						; size = 4
_W$36$ = -20						; size = 4
_W$20$ = -20						; size = 4
_W$4$ = -20						; size = 4
_W$25$ = -16						; size = 4
_W$9$ = -16						; size = 4
_E$74$ = -16						; size = 4
_E$72$ = -16						; size = 4
_E$68$ = -16						; size = 4
_E$54$ = -16						; size = 4
_E$16$ = -16						; size = 4
_W$51$ = -12						; size = 4
_W$24$ = -12						; size = 4
_W$8$ = -12						; size = 4
_E$55$ = -12						; size = 4
_E$15$ = -12						; size = 4
_W$53$ = -8						; size = 4
_W$37$ = -8						; size = 4
_W$21$ = -8						; size = 4
_W$5$ = -8						; size = 4
_W$38$ = -4						; size = 4
_W$22$ = -4						; size = 4
_W$6$ = -4						; size = 4
?VerifySHA1Tripcode@@YAHPAE0@Z PROC			; VerifySHA1Tripcode, COMDAT
; _tripcode$ = ecx
; _key$ = edx

; 138  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	esi

; 139  : 	if (strlen((char *)tripcode) != lenTripcode || strlen((char *)key) != lenTripcodeKey)

	mov	esi, ecx
	mov	DWORD PTR _tripcode$1$[ebp], ecx
	mov	DWORD PTR _key$1$[ebp], edx
	lea	ecx, DWORD PTR [esi+1]
$LL9@VerifySHA1:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL9@VerifySHA1
	sub	esi, ecx
	cmp	esi, DWORD PTR ?lenTripcode@@3HA	; lenTripcode
	jne	$LN2@VerifySHA1
	mov	eax, edx
	lea	esi, DWORD PTR [eax+1]
	npad	4
$LL10@VerifySHA1:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL10@VerifySHA1
	sub	eax, esi
	cmp	eax, DWORD PTR ?lenTripcodeKey@@3HA	; lenTripcodeKey
	jne	$LN2@VerifySHA1

; 141  : 
; 142  : 	uint32_t W[80];
; 143  :     uint32_t A = H0, B = H1, C = H2, D = H3, E = H4, tmp;
; 144  : 
; 145  : 	ROUND_00_TO_15_W(0, (key[ 0] << 24) | (key[ 1] << 16) | (key[ 2] << 8) | key[ 3]);

	movzx	ecx, BYTE PTR [edx]
	movzx	eax, BYTE PTR [edx+1]
	shl	ecx, 8
	or	ecx, eax

; 146  : 	ROUND_00_TO_15_W(1, (key[ 4] << 24) | (key[ 5] << 16) | (key[ 6] << 8) | key[ 7]);
; 147  : 	ROUND_00_TO_15_W(2, (key[ 8] << 24) | (key[ 9] << 16) | (key[10] << 8) | key[11]);

	movzx	esi, BYTE PTR [edx+8]
	movzx	eax, BYTE PTR [edx+2]
	shl	ecx, 8
	or	ecx, eax
	shl	esi, 8
	movzx	eax, BYTE PTR [edx+3]
	shl	ecx, 8
	or	ecx, eax
	movzx	eax, BYTE PTR [edx+5]
	mov	DWORD PTR _W$1$[ebp], ecx
	push	ebx
	push	edi
	lea	ebx, DWORD PTR [ecx-1615554381]
	movzx	ecx, BYTE PTR [edx+4]
	shl	ecx, 8
	or	ecx, eax
	movzx	eax, BYTE PTR [edx+6]
	shl	ecx, 8
	or	ecx, eax
	movzx	eax, BYTE PTR [edx+7]
	shl	ecx, 8
	or	ecx, eax
	mov	eax, ebx
	rol	eax, 5
	mov	DWORD PTR _W$5$[ebp], ecx
	lea	edi, DWORD PTR [ecx+1722862861]
	mov	ecx, ebx
	add	edi, eax
	and	ecx, -572662307				; ddddddddH
	movzx	eax, BYTE PTR [edx+9]
	or	esi, eax
	mov	DWORD PTR _E$2$[ebp], edi
	movzx	eax, BYTE PTR [edx+10]
	shl	esi, 8
	or	esi, eax
	movzx	eax, BYTE PTR [edx+11]
	shl	esi, 8
	mov	edx, edi
	or	esi, eax
	rol	edx, 5
	mov	eax, ebx
	mov	DWORD PTR _W$6$[ebp], esi
	not	eax
	ror	ebx, 2
	xor	ecx, eax
	add	esi, edx

; 148  : 	ROUND_00_TO_15_W(3, 0x80000000);

	mov	eax, DWORD PTR _E$2$[ebp]
	and	ecx, 2079550178				; 7bf36ae2H
	add	ecx, -214083945				; f33d5697H
	ror	eax, 2
	add	esi, ecx
	mov	DWORD PTR _E$2$[ebp], eax
	mov	ecx, edi
	mov	edx, esi
	not	ecx
	rol	edx, 5
	and	ecx, 1506887872				; 59d148c0H
	and	edi, ebx
	xor	edi, ecx
	add	edx, 1450566779				; 5675e47bH
	add	edi, edx

; 149  : 
; 150  : 	ROUND_00_TO_15_ZERO( 4); ROUND_00_TO_15_ZERO( 5); ROUND_00_TO_15_ZERO( 6); ROUND_00_TO_15_ZERO(7);

	mov	ecx, esi
	not	ecx
	and	eax, esi
	and	ecx, ebx
	ror	esi, 2
	xor	ecx, eax
	mov	edx, edi
	add	ecx, -1269579175			; b453c259H
	rol	edx, 5
	add	edx, ecx
	mov	eax, esi
	mov	ecx, edi
	mov	DWORD PTR _E$5$[ebp], edx
	not	ecx
	rol	edx, 5
	and	ecx, DWORD PTR _E$2$[ebp]
	and	eax, edi
	ror	edi, 2
	xor	ecx, eax
	lea	eax, DWORD PTR [ebx+edx]
	mov	ebx, DWORD PTR _E$5$[ebp]
	add	ecx, 1518500249				; 5a827999H
	add	eax, ecx
	mov	ecx, ebx
	mov	edx, eax
	mov	DWORD PTR _E$6$[ebp], eax
	not	ecx
	rol	edx, 5
	add	edx, DWORD PTR _E$2$[ebp]
	and	ecx, esi
	mov	eax, edi
	and	eax, ebx
	ror	ebx, 2
	xor	ecx, eax
	lea	eax, DWORD PTR [edx+1518500249]
	add	eax, ecx
	mov	ecx, DWORD PTR _E$6$[ebp]
	mov	DWORD PTR _E$7$[ebp], eax
	not	ecx
	and	ecx, edi
	mov	edx, eax
	rol	edx, 5
	mov	eax, ebx
	and	eax, DWORD PTR _E$6$[ebp]
	xor	ecx, eax
	add	ecx, 1518500249				; 5a827999H
	lea	eax, DWORD PTR [esi+edx]
	mov	esi, DWORD PTR _E$6$[ebp]
	add	eax, ecx
	ror	esi, 2

; 151  : 	ROUND_00_TO_15_ZERO( 8); ROUND_00_TO_15_ZERO( 9); ROUND_00_TO_15_ZERO(10); ROUND_00_TO_15_ZERO(11);

	mov	ecx, DWORD PTR _E$7$[ebp]
	mov	edx, eax
	mov	DWORD PTR _E$8$[ebp], eax
	not	ecx
	and	ecx, ebx
	rol	edx, 5
	mov	eax, esi
	and	eax, DWORD PTR _E$7$[ebp]
	xor	ecx, eax
	add	ecx, 1518500249				; 5a827999H
	lea	eax, DWORD PTR [edi+edx]
	mov	edi, DWORD PTR _E$7$[ebp]
	add	eax, ecx
	mov	ecx, DWORD PTR _E$8$[ebp]
	mov	edx, eax
	mov	DWORD PTR _E$9$[ebp], eax
	not	ecx
	and	ecx, esi
	ror	edi, 2
	rol	edx, 5
	mov	eax, edi
	and	eax, DWORD PTR _E$8$[ebp]
	xor	ecx, eax
	add	ecx, 1518500249				; 5a827999H
	lea	eax, DWORD PTR [ebx+edx]
	mov	ebx, DWORD PTR _E$8$[ebp]
	add	eax, ecx
	ror	ebx, 2
	mov	ecx, DWORD PTR _E$9$[ebp]
	mov	edx, eax
	mov	DWORD PTR _E$10$[ebp], eax
	not	ecx
	and	ecx, edi
	rol	edx, 5
	mov	eax, ebx
	and	eax, DWORD PTR _E$9$[ebp]
	xor	ecx, eax
	lea	eax, DWORD PTR [esi+edx]
	add	ecx, 1518500249				; 5a827999H
	mov	esi, DWORD PTR _E$9$[ebp]
	add	eax, ecx
	mov	ecx, DWORD PTR _E$10$[ebp]
	mov	edx, eax
	ror	esi, 2
	not	ecx
	mov	DWORD PTR _E$11$[ebp], eax
	rol	edx, 5
	and	ecx, ebx
	mov	eax, esi
	and	eax, DWORD PTR _E$10$[ebp]
	xor	ecx, eax
	lea	eax, DWORD PTR [edi+edx]
	mov	edi, DWORD PTR _E$10$[ebp]
	add	ecx, 1518500249				; 5a827999H
	add	eax, ecx
	ror	edi, 2

; 152  : 	ROUND_00_TO_15_ZERO(12); ROUND_00_TO_15_ZERO(13); ROUND_00_TO_15_ZERO(14); ROUND_00_TO_15_W(15, 12 * 8);

	mov	ecx, DWORD PTR _E$11$[ebp]
	mov	edx, eax
	not	ecx
	mov	DWORD PTR _E$12$[ebp], eax
	and	ecx, esi
	rol	edx, 5
	mov	eax, edi
	and	eax, DWORD PTR _E$11$[ebp]
	xor	ecx, eax
	add	ecx, 1518500249				; 5a827999H
	lea	eax, DWORD PTR [ebx+edx]
	add	eax, ecx
	mov	ebx, DWORD PTR _E$11$[ebp]
	mov	ecx, DWORD PTR _E$12$[ebp]
	mov	edx, eax
	not	ecx
	mov	DWORD PTR _E$13$[ebp], eax
	and	ecx, edi
	ror	ebx, 2
	rol	edx, 5
	mov	eax, ebx
	and	eax, DWORD PTR _E$12$[ebp]
	xor	ecx, eax
	add	ecx, 1518500249				; 5a827999H
	lea	eax, DWORD PTR [esi+edx]
	mov	esi, DWORD PTR _E$12$[ebp]
	add	eax, ecx
	ror	esi, 2
	mov	ecx, DWORD PTR _E$13$[ebp]
	mov	edx, eax
	not	ecx
	mov	DWORD PTR _E$14$[ebp], eax
	and	ecx, ebx
	rol	edx, 5
	mov	eax, esi
	and	eax, DWORD PTR _E$13$[ebp]
	xor	ecx, eax
	add	ecx, 1518500249				; 5a827999H
	lea	eax, DWORD PTR [edi+edx]
	mov	edi, DWORD PTR _E$13$[ebp]
	add	eax, ecx
	mov	ecx, DWORD PTR _E$14$[ebp]
	mov	edx, eax
	not	ecx
	mov	DWORD PTR _E$15$[ebp], eax
	and	ecx, esi
	ror	edi, 2
	rol	edx, 5
	mov	eax, edi
	and	eax, DWORD PTR _E$14$[ebp]
	xor	ecx, eax
	add	ecx, 1518500345				; 5a8279f9H
	lea	eax, DWORD PTR [ebx+edx]
	mov	ebx, DWORD PTR _E$14$[ebp]
	add	eax, ecx
	ror	ebx, 2

; 153  : 
; 154  :     ROUND_16_TO_19(16); ROUND_16_TO_19(17); ROUND_16_TO_19(18); ROUND_16_TO_19(19);

	mov	ecx, DWORD PTR _W$6$[ebp]
	mov	edx, eax
	xor	ecx, DWORD PTR _W$1$[ebp]
	rol	ecx, 1
	mov	DWORD PTR _W$4$[ebp], ecx
	mov	ecx, DWORD PTR _E$15$[ebp]
	mov	DWORD PTR _E$16$[ebp], eax
	not	ecx
	and	ecx, edi
	rol	edx, 5
	add	edx, DWORD PTR _W$4$[ebp]
	mov	eax, ebx
	and	eax, DWORD PTR _E$15$[ebp]
	xor	ecx, eax
	add	ecx, edx
	add	esi, 1518500249				; 5a827999H
	add	esi, ecx
	mov	eax, DWORD PTR _E$15$[ebp]
	mov	ecx, DWORD PTR _W$5$[ebp]
	mov	edx, esi
	xor	ecx, -2147483648			; 80000000H
	ror	eax, 2
	rol	ecx, 1
	add	edi, 1518500249				; 5a827999H
	mov	DWORD PTR _W$5$[ebp], ecx
	mov	ecx, DWORD PTR _E$16$[ebp]
	mov	DWORD PTR _E$15$[ebp], eax
	not	ecx
	and	eax, DWORD PTR _E$16$[ebp]
	and	ecx, ebx
	xor	ecx, eax
	rol	edx, 5
	add	edx, DWORD PTR _W$5$[ebp]
	add	ebx, 1518500249				; 5a827999H
	add	ecx, edx
	mov	eax, DWORD PTR _E$16$[ebp]
	add	edi, ecx
	ror	eax, 2
	mov	ecx, DWORD PTR _W$6$[ebp]
	mov	edx, edi
	xor	ecx, 96					; 00000060H
	mov	DWORD PTR _E$16$[ebp], eax
	rol	ecx, 1
	and	eax, esi
	mov	DWORD PTR _W$6$[ebp], ecx
	mov	ecx, esi
	not	ecx
	rol	edx, 5
	and	ecx, DWORD PTR _E$15$[ebp]
	add	edx, DWORD PTR _W$6$[ebp]
	xor	ecx, eax
	mov	eax, DWORD PTR _W$4$[ebp]
	add	ecx, edx
	xor	eax, -2147483648			; 80000000H
	ror	esi, 2
	rol	eax, 1
	add	ebx, ecx
	mov	DWORD PTR _W$7$[ebp], eax
	mov	ecx, edi
	not	ecx
	mov	DWORD PTR _E$17$[ebp], esi
	and	ecx, DWORD PTR _E$16$[ebp]
	mov	eax, esi
	and	eax, edi
	mov	edx, ebx
	xor	ecx, eax
	rol	edx, 5
	add	edx, DWORD PTR _W$7$[ebp]

; 155  : 	
; 156  : 	ROUND_20_TO_39(20);	ROUND_20_TO_39(21);	ROUND_20_TO_39(22);	ROUND_20_TO_39(23);	ROUND_20_TO_39(24);

	mov	eax, DWORD PTR _W$5$[ebp]
	add	ecx, edx
	mov	edx, DWORD PTR _E$15$[ebp]
	rol	eax, 1
	add	edx, 1518500249				; 5a827999H
	mov	DWORD PTR _W$8$[ebp], eax
	add	edx, ecx
	ror	edi, 2
	mov	eax, esi
	mov	esi, DWORD PTR _E$16$[ebp]
	xor	eax, edi
	xor	eax, ebx
	mov	DWORD PTR _E$18$[ebp], edi
	mov	ecx, edx
	ror	ebx, 2
	rol	ecx, 5
	add	esi, 1859775393				; 6ed9eba1H
	add	ecx, DWORD PTR _W$8$[ebp]
	add	eax, ecx
	add	esi, eax
	mov	eax, DWORD PTR _W$6$[ebp]
	rol	eax, 1
	mov	ecx, esi
	mov	DWORD PTR _W$9$[ebp], eax
	mov	eax, edi
	xor	eax, ebx
	rol	ecx, 5
	xor	eax, edx
	add	ecx, DWORD PTR _W$9$[ebp]
	add	eax, ecx
	mov	edi, DWORD PTR _E$17$[ebp]
	add	edi, 1859775393				; 6ed9eba1H
	ror	edx, 2
	add	edi, eax
	mov	eax, DWORD PTR _W$7$[ebp]
	rol	eax, 1
	mov	ecx, edi
	mov	DWORD PTR _W$10$[ebp], eax
	mov	eax, ebx
	xor	eax, edx
	rol	ecx, 5
	add	ecx, DWORD PTR _W$10$[ebp]
	xor	eax, esi
	add	eax, ecx
	ror	esi, 2
	mov	ecx, DWORD PTR _E$18$[ebp]
	add	ecx, 1859775393				; 6ed9eba1H
	add	ecx, eax
	mov	eax, DWORD PTR _W$8$[ebp]
	xor	eax, 96					; 00000060H
	mov	DWORD PTR _E$23$[ebp], ecx
	rol	eax, 1
	mov	DWORD PTR _W$11$[ebp], eax
	mov	eax, edx
	xor	eax, esi
	rol	ecx, 5
	add	ecx, DWORD PTR _W$11$[ebp]
	xor	eax, edi
	add	eax, ecx
	ror	edi, 2
	lea	ecx, DWORD PTR [ebx+1859775393]
	mov	ebx, DWORD PTR _E$23$[ebp]
	add	ecx, eax
	mov	eax, DWORD PTR _W$9$[ebp]
	xor	eax, DWORD PTR _W$4$[ebp]
	rol	eax, 1
	mov	DWORD PTR _W$12$[ebp], eax
	mov	eax, esi
	xor	eax, edi
	mov	DWORD PTR _E$24$[ebp], ecx
	xor	eax, ebx
	rol	ecx, 5
	add	ecx, DWORD PTR _W$12$[ebp]
	add	eax, ecx
	ror	ebx, 2
	lea	ecx, DWORD PTR [edx+1859775393]

; 157  : 	ROUND_20_TO_39(25);	ROUND_20_TO_39(26);	ROUND_20_TO_39(27);	ROUND_20_TO_39(28);	ROUND_20_TO_39(29);

	mov	edx, DWORD PTR _E$24$[ebp]
	add	ecx, eax
	mov	eax, DWORD PTR _W$10$[ebp]
	xor	eax, DWORD PTR _W$5$[ebp]
	rol	eax, 1
	mov	DWORD PTR _W$13$[ebp], eax
	mov	eax, edi
	mov	DWORD PTR _E$25$[ebp], ecx
	xor	eax, ebx
	xor	eax, edx
	rol	ecx, 5
	add	ecx, DWORD PTR _W$13$[ebp]
	add	eax, ecx
	ror	edx, 2
	lea	ecx, DWORD PTR [esi+1859775393]
	mov	esi, DWORD PTR _E$25$[ebp]
	add	ecx, eax
	mov	eax, DWORD PTR _W$11$[ebp]
	xor	eax, DWORD PTR _W$6$[ebp]
	rol	eax, 1
	mov	DWORD PTR _W$14$[ebp], eax
	mov	eax, ebx
	mov	DWORD PTR _E$26$[ebp], ecx
	xor	eax, edx
	rol	ecx, 5
	xor	eax, esi
	add	ecx, DWORD PTR _W$14$[ebp]
	add	eax, ecx
	ror	esi, 2
	lea	ecx, DWORD PTR [edi+1859775393]
	add	ecx, eax
	mov	eax, DWORD PTR _W$12$[ebp]
	xor	eax, DWORD PTR _W$7$[ebp]
	mov	DWORD PTR _E$27$[ebp], ecx
	rol	eax, 1
	mov	DWORD PTR _W$15$[ebp], eax
	mov	eax, edx
	xor	eax, esi
	mov	edi, DWORD PTR _E$26$[ebp]
	xor	eax, edi
	rol	ecx, 5
	add	ecx, DWORD PTR _W$15$[ebp]
	add	eax, ecx
	ror	edi, 2
	lea	ecx, DWORD PTR [ebx+1859775393]
	mov	ebx, DWORD PTR _E$27$[ebp]
	add	ecx, eax
	mov	eax, DWORD PTR _W$13$[ebp]
	xor	eax, DWORD PTR _W$8$[ebp]
	rol	eax, 1
	mov	DWORD PTR _W$16$[ebp], eax
	mov	eax, esi
	xor	eax, edi
	mov	DWORD PTR _E$28$[ebp], ecx
	xor	eax, ebx
	rol	ecx, 5
	add	ecx, DWORD PTR _W$16$[ebp]
	add	eax, ecx
	ror	ebx, 2
	lea	ecx, DWORD PTR [edx+1859775393]
	mov	edx, DWORD PTR _E$28$[ebp]
	add	ecx, eax
	mov	eax, DWORD PTR _W$14$[ebp]
	xor	eax, DWORD PTR _W$9$[ebp]
	xor	eax, 96					; 00000060H
	mov	DWORD PTR _E$29$[ebp], ecx
	rol	eax, 1
	mov	DWORD PTR _W$17$[ebp], eax
	mov	eax, edi
	xor	eax, ebx
	rol	ecx, 5
	add	ecx, DWORD PTR _W$17$[ebp]
	xor	eax, edx
	add	eax, ecx
	ror	edx, 2
	lea	ecx, DWORD PTR [esi+1859775393]

; 158  : 	ROUND_20_TO_39(30);	ROUND_20_TO_39(31);	ROUND_20_TO_39(32); ROUND_20_TO_39(33);	ROUND_20_TO_39(34);

	mov	esi, DWORD PTR _E$29$[ebp]
	add	ecx, eax
	mov	eax, DWORD PTR _W$15$[ebp]
	xor	eax, DWORD PTR _W$10$[ebp]
	xor	eax, DWORD PTR _W$4$[ebp]
	rol	eax, 1
	mov	DWORD PTR _W$18$[ebp], eax
	mov	eax, ebx
	xor	eax, edx
	mov	DWORD PTR _E$30$[ebp], ecx
	xor	eax, esi
	rol	ecx, 5
	add	ecx, DWORD PTR _W$18$[ebp]
	add	eax, ecx
	ror	esi, 2
	lea	ecx, DWORD PTR [edi+1859775393]
	mov	edi, DWORD PTR _E$30$[ebp]
	add	ecx, eax
	mov	eax, DWORD PTR _W$16$[ebp]
	xor	eax, DWORD PTR _W$11$[ebp]
	xor	eax, DWORD PTR _W$5$[ebp]
	xor	eax, 96					; 00000060H
	mov	DWORD PTR _E$31$[ebp], ecx
	rol	eax, 1
	mov	DWORD PTR _W$19$[ebp], eax
	mov	eax, edx
	xor	eax, esi
	rol	ecx, 5
	add	ecx, DWORD PTR _W$19$[ebp]
	xor	eax, edi
	add	eax, ecx
	ror	edi, 2
	lea	ecx, DWORD PTR [ebx+1859775393]
	add	ecx, eax
	mov	eax, DWORD PTR _W$17$[ebp]
	xor	eax, DWORD PTR _W$12$[ebp]
	xor	eax, DWORD PTR _W$6$[ebp]
	xor	eax, DWORD PTR _W$4$[ebp]
	mov	DWORD PTR _E$32$[ebp], ecx
	rol	eax, 1
	mov	DWORD PTR _W$20$[ebp], eax
	mov	eax, esi
	xor	eax, edi
	mov	ebx, DWORD PTR _E$31$[ebp]
	xor	eax, ebx
	rol	ecx, 5
	add	ecx, DWORD PTR _W$20$[ebp]
	add	eax, ecx
	ror	ebx, 2
	lea	ecx, DWORD PTR [edx+1859775393]
	mov	edx, DWORD PTR _E$32$[ebp]
	add	ecx, eax
	mov	eax, DWORD PTR _W$18$[ebp]
	xor	eax, DWORD PTR _W$13$[ebp]
	xor	eax, DWORD PTR _W$7$[ebp]
	xor	eax, DWORD PTR _W$5$[ebp]
	rol	eax, 1
	mov	DWORD PTR _W$21$[ebp], eax
	mov	eax, edi
	xor	eax, ebx
	mov	DWORD PTR _E$33$[ebp], ecx
	xor	eax, edx
	rol	ecx, 5
	add	ecx, DWORD PTR _W$21$[ebp]
	add	eax, ecx
	ror	edx, 2
	lea	ecx, DWORD PTR [esi+1859775393]
	mov	esi, DWORD PTR _E$33$[ebp]
	add	ecx, eax
	mov	eax, DWORD PTR _W$19$[ebp]
	xor	eax, DWORD PTR _W$14$[ebp]
	xor	eax, DWORD PTR _W$8$[ebp]
	xor	eax, DWORD PTR _W$6$[ebp]
	rol	eax, 1
	mov	DWORD PTR _W$22$[ebp], eax
	mov	eax, ebx
	mov	DWORD PTR _E$34$[ebp], ecx
	xor	eax, edx
	rol	ecx, 5
	xor	eax, esi
	add	ecx, DWORD PTR _W$22$[ebp]

; 159  : 	ROUND_20_TO_39(35);	ROUND_20_TO_39(36);	ROUND_20_TO_39(37); ROUND_20_TO_39(38);	ROUND_20_TO_39(39);

	add	ebx, 1859775393				; 6ed9eba1H
	add	eax, ecx
	ror	esi, 2
	lea	ecx, DWORD PTR [edi+1859775393]
	mov	edi, DWORD PTR _E$34$[ebp]
	add	ecx, eax
	mov	eax, DWORD PTR _W$20$[ebp]
	xor	eax, DWORD PTR _W$15$[ebp]
	xor	eax, DWORD PTR _W$9$[ebp]
	xor	eax, DWORD PTR _W$7$[ebp]
	rol	eax, 1
	mov	DWORD PTR _E$35$[ebp], ecx
	mov	DWORD PTR _W$23$[ebp], eax
	mov	eax, edx
	rol	ecx, 5
	xor	eax, esi
	add	ecx, DWORD PTR _W$23$[ebp]
	xor	eax, edi
	add	eax, ecx
	ror	edi, 2
	mov	ecx, DWORD PTR _W$21$[ebp]
	add	eax, ebx
	xor	ecx, DWORD PTR _W$16$[ebp]
	xor	ecx, DWORD PTR _W$10$[ebp]
	xor	ecx, DWORD PTR _W$8$[ebp]
	mov	ebx, DWORD PTR _E$35$[ebp]
	rol	ecx, 1
	mov	DWORD PTR _W$24$[ebp], ecx
	mov	ecx, eax
	mov	DWORD PTR _E$36$[ebp], eax
	mov	eax, esi
	rol	ecx, 5
	xor	eax, edi
	add	ecx, DWORD PTR _W$24$[ebp]
	xor	eax, ebx
	add	eax, ecx
	lea	ecx, DWORD PTR [edx+1859775393]
	add	ecx, eax
	mov	DWORD PTR _E$37$[ebp], ecx
	mov	eax, DWORD PTR _W$22$[ebp]
	xor	eax, DWORD PTR _W$17$[ebp]
	xor	eax, DWORD PTR _W$11$[ebp]
	xor	eax, DWORD PTR _W$9$[ebp]
	mov	edx, DWORD PTR _E$36$[ebp]
	rol	eax, 1
	mov	DWORD PTR _W$25$[ebp], eax
	mov	eax, edi
	rol	ecx, 5
	add	ecx, DWORD PTR _W$25$[ebp]
	ror	ebx, 2
	xor	eax, ebx
	xor	eax, edx
	ror	edx, 2
	add	eax, ecx
	mov	DWORD PTR _E$36$[ebp], edx
	lea	ecx, DWORD PTR [esi+1859775393]
	mov	esi, DWORD PTR _E$37$[ebp]
	add	ecx, eax
	mov	eax, DWORD PTR _W$23$[ebp]
	xor	eax, DWORD PTR _W$18$[ebp]
	xor	eax, DWORD PTR _W$12$[ebp]
	xor	eax, DWORD PTR _W$10$[ebp]
	mov	DWORD PTR _E$38$[ebp], ecx
	rol	ecx, 5
	rol	eax, 1
	mov	DWORD PTR _W$26$[ebp], eax
	mov	eax, ebx
	add	ecx, DWORD PTR _W$26$[ebp]
	xor	eax, edx
	xor	eax, esi
	add	ebx, 1859775393				; 6ed9eba1H
	add	eax, ecx
	ror	esi, 2
	lea	ecx, DWORD PTR [edi+1859775393]
	xor	edx, esi
	add	ecx, eax
	mov	edi, DWORD PTR _E$38$[ebp]
	mov	eax, DWORD PTR _W$24$[ebp]
	xor	edx, edi
	xor	eax, DWORD PTR _W$19$[ebp]
	xor	eax, DWORD PTR _W$13$[ebp]
	xor	eax, DWORD PTR _W$11$[ebp]
	mov	DWORD PTR _E$39$[ebp], ecx
	rol	ecx, 5
	rol	eax, 1
	add	ecx, eax
	ror	edi, 2
	add	edx, ecx
	mov	DWORD PTR _W$27$[ebp], eax

; 160  : 
; 161  :     ROUND_40_TO_59(40); ROUND_40_TO_59(41); ROUND_40_TO_59(42); ROUND_40_TO_59(43); ROUND_40_TO_59(44);

	mov	ecx, DWORD PTR _W$25$[ebp]
	add	edx, ebx
	xor	ecx, DWORD PTR _W$20$[ebp]
	mov	eax, edi
	xor	ecx, DWORD PTR _W$14$[ebp]
	xor	ecx, DWORD PTR _W$12$[ebp]
	mov	ebx, DWORD PTR _E$39$[ebp]
	and	eax, ebx
	rol	ecx, 1
	mov	DWORD PTR _W$28$[ebp], ecx
	mov	ecx, edi
	xor	ecx, ebx
	mov	DWORD PTR _E$40$[ebp], edx
	and	ecx, esi
	rol	edx, 5
	xor	ecx, eax
	ror	ebx, 2
	mov	eax, DWORD PTR _E$36$[ebp]
	add	ecx, -1894007588			; 8f1bbcdcH
	add	ecx, DWORD PTR _W$28$[ebp]
	add	eax, edx
	add	eax, ecx
	mov	ecx, DWORD PTR _W$26$[ebp]
	xor	ecx, DWORD PTR _W$21$[ebp]
	mov	edx, eax
	xor	ecx, DWORD PTR _W$15$[ebp]
	xor	ecx, DWORD PTR _W$13$[ebp]
	rol	ecx, 1
	mov	DWORD PTR _E$41$[ebp], eax
	mov	DWORD PTR _W$29$[ebp], ecx
	rol	edx, 5
	mov	ecx, ebx
	mov	eax, ebx
	xor	ecx, DWORD PTR _E$40$[ebp]
	and	eax, DWORD PTR _E$40$[ebp]
	and	ecx, edi
	xor	ecx, eax
	lea	eax, DWORD PTR [esi+edx]
	add	ecx, -1894007588			; 8f1bbcdcH
	mov	esi, DWORD PTR _E$40$[ebp]
	add	ecx, DWORD PTR _W$29$[ebp]
	add	eax, ecx
	ror	esi, 2
	mov	ecx, DWORD PTR _W$27$[ebp]
	mov	edx, eax
	xor	ecx, DWORD PTR _W$22$[ebp]
	xor	ecx, DWORD PTR _W$16$[ebp]
	xor	ecx, DWORD PTR _W$14$[ebp]
	rol	ecx, 1
	mov	DWORD PTR _W$30$[ebp], ecx
	mov	ecx, esi
	xor	ecx, DWORD PTR _E$41$[ebp]
	and	ecx, ebx
	mov	DWORD PTR _E$42$[ebp], eax
	rol	edx, 5
	mov	eax, esi
	and	eax, DWORD PTR _E$41$[ebp]
	xor	ecx, eax
	add	ecx, -1894007588			; 8f1bbcdcH
	add	ecx, DWORD PTR _W$30$[ebp]
	lea	eax, DWORD PTR [edi+edx]
	add	eax, ecx
	mov	edi, DWORD PTR _E$41$[ebp]
	mov	ecx, DWORD PTR _W$28$[ebp]
	mov	edx, eax
	xor	ecx, DWORD PTR _W$23$[ebp]
	xor	ecx, DWORD PTR _W$17$[ebp]
	xor	ecx, DWORD PTR _W$15$[ebp]
	rol	ecx, 1
	mov	DWORD PTR _W$31$[ebp], ecx
	mov	DWORD PTR _E$43$[ebp], eax
	ror	edi, 2
	mov	ecx, edi
	rol	edx, 5
	xor	ecx, DWORD PTR _E$42$[ebp]
	mov	eax, edi
	and	eax, DWORD PTR _E$42$[ebp]
	and	ecx, esi
	xor	ecx, eax
	add	ecx, -1894007588			; 8f1bbcdcH
	lea	eax, DWORD PTR [ebx+edx]
	add	ecx, DWORD PTR _W$31$[ebp]
	mov	ebx, DWORD PTR _E$42$[ebp]
	add	eax, ecx
	mov	ecx, DWORD PTR _W$29$[ebp]
	mov	edx, eax
	xor	ecx, DWORD PTR _W$24$[ebp]
	xor	ecx, DWORD PTR _W$18$[ebp]
	xor	ecx, DWORD PTR _W$16$[ebp]
	rol	ecx, 1
	mov	DWORD PTR _W$32$[ebp], ecx
	ror	ebx, 2
	mov	DWORD PTR _E$44$[ebp], eax
	mov	ecx, ebx
	xor	ecx, DWORD PTR _E$43$[ebp]
	mov	eax, ebx
	and	eax, DWORD PTR _E$43$[ebp]
	and	ecx, edi
	xor	ecx, eax
	rol	edx, 5
	add	ecx, -1894007588			; 8f1bbcdcH
	add	ecx, DWORD PTR _W$32$[ebp]
	lea	eax, DWORD PTR [esi+edx]
	mov	esi, DWORD PTR _E$43$[ebp]
	add	eax, ecx
	ror	esi, 2

; 162  :     ROUND_40_TO_59(45); ROUND_40_TO_59(46); ROUND_40_TO_59(47); ROUND_40_TO_59(48); ROUND_40_TO_59(49);

	mov	ecx, DWORD PTR _W$30$[ebp]
	xor	ecx, DWORD PTR _W$25$[ebp]
	xor	ecx, DWORD PTR _W$19$[ebp]
	xor	ecx, DWORD PTR _W$17$[ebp]
	mov	DWORD PTR _E$45$[ebp], eax
	rol	ecx, 1
	mov	DWORD PTR _W$33$[ebp], ecx
	mov	edx, eax
	rol	edx, 5
	mov	ecx, esi
	xor	ecx, DWORD PTR _E$44$[ebp]
	mov	eax, esi
	and	eax, DWORD PTR _E$44$[ebp]
	and	ecx, ebx
	xor	ecx, eax
	add	ecx, -1894007588			; 8f1bbcdcH
	lea	eax, DWORD PTR [edi+edx]
	add	ecx, DWORD PTR _W$33$[ebp]
	add	eax, ecx
	mov	edi, DWORD PTR _E$44$[ebp]
	mov	ecx, DWORD PTR _W$31$[ebp]
	mov	edx, eax
	xor	ecx, DWORD PTR _W$26$[ebp]
	xor	ecx, DWORD PTR _W$20$[ebp]
	xor	ecx, DWORD PTR _W$18$[ebp]
	rol	ecx, 1
	mov	DWORD PTR _W$34$[ebp], ecx
	mov	DWORD PTR _E$46$[ebp], eax
	ror	edi, 2
	mov	ecx, edi
	rol	edx, 5
	xor	ecx, DWORD PTR _E$45$[ebp]
	mov	eax, edi
	and	eax, DWORD PTR _E$45$[ebp]
	and	ecx, esi
	xor	ecx, eax
	add	ecx, -1894007588			; 8f1bbcdcH
	lea	eax, DWORD PTR [ebx+edx]
	add	ecx, DWORD PTR _W$34$[ebp]
	add	eax, ecx
	mov	ebx, DWORD PTR _E$45$[ebp]
	mov	ecx, DWORD PTR _W$32$[ebp]
	mov	edx, eax
	xor	ecx, DWORD PTR _W$27$[ebp]
	xor	ecx, DWORD PTR _W$21$[ebp]
	xor	ecx, DWORD PTR _W$19$[ebp]
	rol	ecx, 1
	mov	DWORD PTR _W$35$[ebp], ecx
	mov	DWORD PTR _E$47$[ebp], eax
	ror	ebx, 2
	mov	ecx, ebx
	rol	edx, 5
	xor	ecx, DWORD PTR _E$46$[ebp]
	mov	eax, ebx
	and	eax, DWORD PTR _E$46$[ebp]
	and	ecx, edi
	xor	ecx, eax
	add	ecx, -1894007588			; 8f1bbcdcH
	lea	eax, DWORD PTR [esi+edx]
	add	ecx, DWORD PTR _W$35$[ebp]
	mov	esi, DWORD PTR _E$46$[ebp]
	add	eax, ecx
	mov	ecx, DWORD PTR _W$33$[ebp]
	mov	edx, eax
	xor	ecx, DWORD PTR _W$28$[ebp]
	xor	ecx, DWORD PTR _W$22$[ebp]
	xor	ecx, DWORD PTR _W$20$[ebp]
	rol	ecx, 1
	mov	DWORD PTR _W$36$[ebp], ecx
	ror	esi, 2
	mov	DWORD PTR _E$48$[ebp], eax
	mov	ecx, esi
	xor	ecx, DWORD PTR _E$47$[ebp]
	mov	eax, esi
	and	eax, DWORD PTR _E$47$[ebp]
	and	ecx, ebx
	xor	ecx, eax
	rol	edx, 5
	add	ecx, -1894007588			; 8f1bbcdcH
	add	ecx, DWORD PTR _W$36$[ebp]
	lea	eax, DWORD PTR [edi+edx]
	mov	edi, DWORD PTR _E$47$[ebp]
	add	eax, ecx
	ror	edi, 2
	mov	ecx, DWORD PTR _W$34$[ebp]
	xor	ecx, DWORD PTR _W$29$[ebp]
	mov	DWORD PTR _E$49$[ebp], eax
	xor	ecx, DWORD PTR _W$23$[ebp]
	mov	edx, eax
	xor	ecx, DWORD PTR _W$21$[ebp]
	mov	eax, edi
	rol	ecx, 1
	and	eax, DWORD PTR _E$48$[ebp]
	mov	DWORD PTR _W$37$[ebp], ecx
	mov	ecx, edi
	xor	ecx, DWORD PTR _E$48$[ebp]
	and	ecx, esi
	rol	edx, 5
	xor	ecx, eax
	add	ecx, -1894007588			; 8f1bbcdcH
	add	ecx, DWORD PTR _W$37$[ebp]
	lea	eax, DWORD PTR [ebx+edx]
	mov	ebx, DWORD PTR _E$48$[ebp]
	add	eax, ecx
	ror	ebx, 2

; 163  :     ROUND_40_TO_59(50); ROUND_40_TO_59(51); ROUND_40_TO_59(52); ROUND_40_TO_59(53); ROUND_40_TO_59(54);

	mov	ecx, DWORD PTR _W$35$[ebp]
	mov	edx, eax
	xor	ecx, DWORD PTR _W$30$[ebp]
	xor	ecx, DWORD PTR _W$24$[ebp]
	xor	ecx, DWORD PTR _W$22$[ebp]
	rol	ecx, 1
	mov	DWORD PTR _W$38$[ebp], ecx
	mov	ecx, ebx
	xor	ecx, DWORD PTR _E$49$[ebp]
	and	ecx, edi
	mov	DWORD PTR _E$50$[ebp], eax
	rol	edx, 5
	mov	eax, ebx
	and	eax, DWORD PTR _E$49$[ebp]
	xor	ecx, eax
	add	ecx, -1894007588			; 8f1bbcdcH
	add	ecx, DWORD PTR _W$38$[ebp]
	lea	eax, DWORD PTR [esi+edx]
	add	eax, ecx
	mov	esi, DWORD PTR _E$49$[ebp]
	mov	ecx, DWORD PTR _W$36$[ebp]
	mov	edx, eax
	xor	ecx, DWORD PTR _W$31$[ebp]
	xor	ecx, DWORD PTR _W$25$[ebp]
	xor	ecx, DWORD PTR _W$23$[ebp]
	rol	ecx, 1
	mov	DWORD PTR _W$39$[ebp], ecx
	mov	DWORD PTR _E$51$[ebp], eax
	ror	esi, 2
	mov	ecx, esi
	rol	edx, 5
	xor	ecx, DWORD PTR _E$50$[ebp]
	mov	eax, esi
	and	eax, DWORD PTR _E$50$[ebp]
	and	ecx, ebx
	xor	ecx, eax
	add	ecx, -1894007588			; 8f1bbcdcH
	lea	eax, DWORD PTR [edi+edx]
	add	ecx, DWORD PTR _W$39$[ebp]
	mov	edi, DWORD PTR _E$50$[ebp]
	add	eax, ecx
	mov	ecx, DWORD PTR _W$37$[ebp]
	mov	edx, eax
	xor	ecx, DWORD PTR _W$32$[ebp]
	xor	ecx, DWORD PTR _W$26$[ebp]
	xor	ecx, DWORD PTR _W$24$[ebp]
	rol	ecx, 1
	mov	DWORD PTR _W$40$[ebp], ecx
	ror	edi, 2
	mov	DWORD PTR _E$52$[ebp], eax
	mov	ecx, edi
	xor	ecx, DWORD PTR _E$51$[ebp]
	mov	eax, edi
	and	eax, DWORD PTR _E$51$[ebp]
	and	ecx, esi
	xor	ecx, eax
	rol	edx, 5
	add	ecx, -1894007588			; 8f1bbcdcH
	add	ecx, DWORD PTR _W$40$[ebp]
	lea	eax, DWORD PTR [ebx+edx]
	mov	ebx, DWORD PTR _E$51$[ebp]
	add	eax, ecx
	mov	DWORD PTR _E$53$[ebp], eax
	mov	ecx, DWORD PTR _W$38$[ebp]
	mov	edx, eax
	xor	ecx, DWORD PTR _W$33$[ebp]
	xor	ecx, DWORD PTR _W$27$[ebp]
	xor	ecx, DWORD PTR _W$25$[ebp]
	rol	ecx, 1
	mov	DWORD PTR _W$41$[ebp], ecx
	ror	ebx, 2
	rol	edx, 5
	mov	ecx, ebx
	xor	ecx, DWORD PTR _E$52$[ebp]
	mov	eax, ebx
	and	eax, DWORD PTR _E$52$[ebp]
	and	ecx, edi
	xor	ecx, eax
	add	ecx, -1894007588			; 8f1bbcdcH
	lea	eax, DWORD PTR [esi+edx]
	add	ecx, DWORD PTR _W$41$[ebp]
	add	eax, ecx
	mov	esi, DWORD PTR _E$52$[ebp]
	mov	ecx, DWORD PTR _W$39$[ebp]
	mov	edx, eax
	xor	ecx, DWORD PTR _W$34$[ebp]
	xor	ecx, DWORD PTR _W$28$[ebp]
	xor	ecx, DWORD PTR _W$26$[ebp]
	rol	ecx, 1
	mov	DWORD PTR _W$42$[ebp], ecx
	mov	DWORD PTR _E$54$[ebp], eax
	ror	esi, 2
	mov	ecx, esi
	rol	edx, 5
	xor	ecx, DWORD PTR _E$53$[ebp]
	mov	eax, esi
	and	eax, DWORD PTR _E$53$[ebp]
	and	ecx, ebx
	xor	ecx, eax
	add	ecx, -1894007588			; 8f1bbcdcH
	lea	eax, DWORD PTR [edi+edx]
	add	ecx, DWORD PTR _W$42$[ebp]
	add	eax, ecx
	mov	edi, DWORD PTR _E$53$[ebp]

; 164  :     ROUND_40_TO_59(55); ROUND_40_TO_59(56); ROUND_40_TO_59(57); ROUND_40_TO_59(58); ROUND_40_TO_59(59);

	mov	ecx, DWORD PTR _W$40$[ebp]
	mov	edx, eax
	xor	ecx, DWORD PTR _W$35$[ebp]
	xor	ecx, DWORD PTR _W$29$[ebp]
	xor	ecx, DWORD PTR _W$27$[ebp]
	rol	ecx, 1
	mov	DWORD PTR _W$43$[ebp], ecx
	ror	edi, 2
	mov	DWORD PTR _E$55$[ebp], eax
	mov	ecx, edi
	xor	ecx, DWORD PTR _E$54$[ebp]
	mov	eax, edi
	and	eax, DWORD PTR _E$54$[ebp]
	and	ecx, esi
	xor	ecx, eax
	rol	edx, 5
	mov	eax, DWORD PTR _E$54$[ebp]
	add	ecx, -1894007588			; 8f1bbcdcH
	add	ecx, DWORD PTR _W$43$[ebp]
	add	ebx, edx
	add	ebx, ecx
	ror	eax, 2
	mov	ecx, DWORD PTR _W$41$[ebp]
	mov	edx, ebx
	xor	ecx, DWORD PTR _W$36$[ebp]
	xor	ecx, DWORD PTR _W$30$[ebp]
	xor	ecx, DWORD PTR _W$28$[ebp]
	rol	ecx, 1
	mov	DWORD PTR _W$44$[ebp], ecx
	mov	ecx, eax
	xor	ecx, DWORD PTR _E$55$[ebp]
	and	ecx, edi
	mov	DWORD PTR _E$54$[ebp], eax
	and	eax, DWORD PTR _E$55$[ebp]
	xor	ecx, eax
	rol	edx, 5
	add	ecx, -1894007588			; 8f1bbcdcH
	add	esi, edx
	add	ecx, DWORD PTR _W$44$[ebp]
	add	esi, ecx
	mov	ecx, DWORD PTR _W$42$[ebp]
	mov	edx, esi
	xor	ecx, DWORD PTR _W$37$[ebp]
	xor	ecx, DWORD PTR _W$31$[ebp]
	xor	ecx, DWORD PTR _W$29$[ebp]
	mov	eax, DWORD PTR _E$55$[ebp]
	ror	eax, 2
	rol	ecx, 1
	mov	DWORD PTR _E$55$[ebp], eax
	mov	DWORD PTR _W$45$[ebp], ecx
	mov	ecx, eax
	and	eax, ebx
	rol	edx, 5
	xor	ecx, ebx
	add	edi, edx
	and	ecx, DWORD PTR _E$54$[ebp]
	xor	ecx, eax
	ror	ebx, 2
	mov	eax, DWORD PTR _W$43$[ebp]
	add	ecx, -1894007588			; 8f1bbcdcH
	xor	eax, DWORD PTR _W$38$[ebp]
	xor	eax, DWORD PTR _W$32$[ebp]
	add	ecx, DWORD PTR _W$45$[ebp]
	xor	eax, DWORD PTR _W$30$[ebp]
	add	edi, ecx
	rol	eax, 1
	mov	ecx, ebx
	xor	ecx, esi
	mov	DWORD PTR _W$46$[ebp], eax
	and	ecx, DWORD PTR _E$55$[ebp]
	mov	edx, edi
	mov	DWORD PTR _E$56$[ebp], ebx
	and	ebx, esi
	xor	ecx, ebx
	rol	edx, 5
	add	edx, DWORD PTR _E$54$[ebp]
	add	ecx, eax
	mov	eax, DWORD PTR _W$44$[ebp]
	xor	eax, DWORD PTR _W$39$[ebp]
	xor	eax, DWORD PTR _W$33$[ebp]
	xor	eax, DWORD PTR _W$31$[ebp]
	lea	ebx, DWORD PTR [edx-1894007588]
	rol	eax, 1
	add	ebx, ecx
	mov	DWORD PTR _W$47$[ebp], eax
	mov	edx, ebx
	ror	esi, 2
	mov	ecx, esi
	rol	edx, 5
	add	edx, DWORD PTR _E$55$[ebp]
	xor	ecx, edi
	and	ecx, DWORD PTR _E$56$[ebp]
	mov	eax, esi
	and	eax, edi
	mov	DWORD PTR _E$57$[ebp], esi
	xor	ecx, eax
	ror	edi, 2

; 165  : 
; 166  :     ROUND_60_TO_79(60); ROUND_60_TO_79(61); ROUND_60_TO_79(62); ROUND_60_TO_79(63); ROUND_60_TO_79(64);

	mov	eax, DWORD PTR _W$45$[ebp]
	add	ecx, -1894007588			; 8f1bbcdcH
	xor	eax, DWORD PTR _W$40$[ebp]
	xor	eax, DWORD PTR _W$34$[ebp]
	xor	eax, DWORD PTR _W$32$[ebp]
	add	ecx, DWORD PTR _W$47$[ebp]
	rol	eax, 1
	add	edx, ecx
	mov	DWORD PTR _W$48$[ebp], eax
	mov	ecx, edx
	rol	ecx, 5
	mov	eax, esi
	add	ecx, DWORD PTR _E$56$[ebp]
	xor	eax, edi
	xor	eax, ebx
	mov	DWORD PTR _E$58$[ebp], edi
	add	eax, DWORD PTR _W$48$[ebp]
	ror	ebx, 2
	lea	esi, DWORD PTR [ecx-899497514]
	mov	DWORD PTR _E$59$[ebp], ebx
	add	esi, eax
	mov	eax, DWORD PTR _W$46$[ebp]
	xor	eax, DWORD PTR _W$41$[ebp]
	xor	eax, DWORD PTR _W$35$[ebp]
	xor	eax, DWORD PTR _W$33$[ebp]
	mov	ecx, esi
	rol	eax, 1
	mov	DWORD PTR _W$49$[ebp], eax
	mov	eax, edi
	xor	eax, ebx
	rol	ecx, 5
	add	ecx, DWORD PTR _E$57$[ebp]
	xor	eax, edx
	add	eax, DWORD PTR _W$49$[ebp]
	ror	edx, 2
	lea	edi, DWORD PTR [ecx-899497514]
	add	edi, eax
	mov	eax, DWORD PTR _W$47$[ebp]
	xor	eax, DWORD PTR _W$42$[ebp]
	mov	ecx, edi
	xor	eax, DWORD PTR _W$36$[ebp]
	xor	eax, DWORD PTR _W$34$[ebp]
	rol	eax, 1
	mov	DWORD PTR _W$50$[ebp], eax
	mov	eax, ebx
	xor	eax, edx
	rol	ecx, 5
	add	ecx, DWORD PTR _E$58$[ebp]
	xor	eax, esi
	add	eax, DWORD PTR _W$50$[ebp]
	ror	esi, 2
	lea	ebx, DWORD PTR [ecx-899497514]
	add	ebx, eax
	mov	eax, DWORD PTR _W$48$[ebp]
	xor	eax, DWORD PTR _W$43$[ebp]
	mov	ecx, ebx
	xor	eax, DWORD PTR _W$37$[ebp]
	xor	eax, DWORD PTR _W$35$[ebp]
	rol	eax, 1
	mov	DWORD PTR _W$51$[ebp], eax
	mov	eax, edx
	xor	eax, esi
	rol	ecx, 5
	add	ecx, DWORD PTR _E$59$[ebp]
	xor	eax, edi
	add	eax, -899497514				; ca62c1d6H
	ror	edi, 2
	add	eax, DWORD PTR _W$51$[ebp]
	add	ecx, eax
	mov	eax, DWORD PTR _W$49$[ebp]
	xor	eax, DWORD PTR _W$44$[ebp]
	xor	eax, DWORD PTR _W$38$[ebp]
	xor	eax, DWORD PTR _W$36$[ebp]
	rol	eax, 1
	mov	DWORD PTR _W$52$[ebp], eax
	mov	eax, esi
	xor	eax, edi
	mov	DWORD PTR _E$64$[ebp], ecx
	xor	eax, ebx
	rol	ecx, 5
	add	eax, -899497514				; ca62c1d6H
	ror	ebx, 2
	add	eax, DWORD PTR _W$52$[ebp]
	add	ecx, edx

; 167  :     ROUND_60_TO_79(65); ROUND_60_TO_79(66); ROUND_60_TO_79(67); ROUND_60_TO_79(68); ROUND_60_TO_79(69);

	mov	edx, DWORD PTR _E$64$[ebp]
	add	ecx, eax
	mov	eax, DWORD PTR _W$50$[ebp]
	xor	eax, DWORD PTR _W$45$[ebp]
	xor	eax, DWORD PTR _W$39$[ebp]
	xor	eax, DWORD PTR _W$37$[ebp]
	rol	eax, 1
	mov	DWORD PTR _W$53$[ebp], eax
	mov	eax, edi
	xor	eax, ebx
	mov	DWORD PTR _E$65$[ebp], ecx
	xor	eax, edx
	rol	ecx, 5
	add	eax, -899497514				; ca62c1d6H
	ror	edx, 2
	add	eax, DWORD PTR _W$53$[ebp]
	add	ecx, esi
	add	ecx, eax
	mov	eax, DWORD PTR _W$51$[ebp]
	xor	eax, DWORD PTR _W$46$[ebp]
	mov	DWORD PTR _E$66$[ebp], ecx
	xor	eax, DWORD PTR _W$40$[ebp]
	xor	eax, DWORD PTR _W$38$[ebp]
	rol	eax, 1
	mov	DWORD PTR _W$54$[ebp], eax
	mov	eax, ebx
	xor	eax, edx
	mov	esi, DWORD PTR _E$65$[ebp]
	xor	eax, esi
	rol	ecx, 5
	add	eax, -899497514				; ca62c1d6H
	ror	esi, 2
	add	eax, DWORD PTR _W$54$[ebp]
	add	ecx, edi
	add	ecx, eax
	mov	edi, DWORD PTR _E$66$[ebp]
	mov	eax, DWORD PTR _W$52$[ebp]
	xor	eax, DWORD PTR _W$47$[ebp]
	xor	eax, DWORD PTR _W$41$[ebp]
	xor	eax, DWORD PTR _W$39$[ebp]
	rol	eax, 1
	mov	DWORD PTR _W$55$[ebp], eax
	mov	eax, edx
	xor	eax, esi
	mov	DWORD PTR _E$67$[ebp], ecx
	xor	eax, edi
	rol	ecx, 5
	add	eax, -899497514				; ca62c1d6H
	ror	edi, 2
	add	eax, DWORD PTR _W$55$[ebp]
	add	ecx, ebx
	add	ecx, eax
	mov	ebx, DWORD PTR _E$67$[ebp]
	mov	eax, DWORD PTR _W$53$[ebp]
	xor	eax, DWORD PTR _W$48$[ebp]
	xor	eax, DWORD PTR _W$42$[ebp]
	xor	eax, DWORD PTR _W$40$[ebp]
	rol	eax, 1
	mov	DWORD PTR _W$56$[ebp], eax
	mov	eax, esi
	xor	eax, edi
	mov	DWORD PTR _E$68$[ebp], ecx
	xor	eax, ebx
	rol	ecx, 5
	add	eax, -899497514				; ca62c1d6H
	ror	ebx, 2
	add	eax, DWORD PTR _W$56$[ebp]
	add	ecx, edx
	add	ecx, eax
	mov	edx, DWORD PTR _E$68$[ebp]
	mov	eax, DWORD PTR _W$54$[ebp]
	xor	eax, DWORD PTR _W$49$[ebp]
	xor	eax, DWORD PTR _W$43$[ebp]
	xor	eax, DWORD PTR _W$41$[ebp]
	rol	eax, 1
	mov	DWORD PTR _W$57$[ebp], eax
	mov	eax, edi
	xor	eax, ebx
	mov	DWORD PTR _E$69$[ebp], ecx
	xor	eax, edx
	rol	ecx, 5
	add	eax, -899497514				; ca62c1d6H
	ror	edx, 2
	add	eax, DWORD PTR _W$57$[ebp]
	add	ecx, esi

; 168  :     ROUND_60_TO_79(70); ROUND_60_TO_79(71); ROUND_60_TO_79(72); ROUND_60_TO_79(73); ROUND_60_TO_79(74);

	mov	esi, DWORD PTR _E$69$[ebp]
	add	ecx, eax
	mov	eax, DWORD PTR _W$55$[ebp]
	xor	eax, DWORD PTR _W$50$[ebp]
	xor	eax, DWORD PTR _W$44$[ebp]
	xor	eax, DWORD PTR _W$42$[ebp]
	rol	eax, 1
	mov	DWORD PTR _W$58$[ebp], eax
	mov	eax, ebx
	xor	eax, edx
	mov	DWORD PTR _E$70$[ebp], ecx
	xor	eax, esi
	rol	ecx, 5
	add	eax, -899497514				; ca62c1d6H
	add	ecx, edi
	add	eax, DWORD PTR _W$58$[ebp]
	add	ecx, eax
	mov	eax, DWORD PTR _W$56$[ebp]
	xor	eax, DWORD PTR _W$51$[ebp]
	xor	eax, DWORD PTR _W$45$[ebp]
	xor	eax, DWORD PTR _W$43$[ebp]
	rol	eax, 1
	mov	edi, DWORD PTR _E$70$[ebp]
	mov	DWORD PTR _W$59$[ebp], eax
	mov	eax, edx
	mov	DWORD PTR _E$71$[ebp], ecx
	rol	ecx, 5
	add	ecx, ebx
	ror	esi, 2
	xor	eax, esi
	mov	ebx, DWORD PTR _E$71$[ebp]
	xor	eax, edi
	ror	edi, 2
	add	eax, -899497514				; ca62c1d6H
	add	eax, DWORD PTR _W$59$[ebp]
	add	ecx, eax
	mov	eax, DWORD PTR _W$57$[ebp]
	xor	eax, DWORD PTR _W$52$[ebp]
	xor	eax, DWORD PTR _W$46$[ebp]
	xor	eax, DWORD PTR _W$44$[ebp]
	rol	eax, 1
	mov	DWORD PTR _W$66$[ebp], eax
	mov	eax, esi
	xor	eax, edi
	mov	DWORD PTR _E$72$[ebp], ecx
	xor	eax, ebx
	rol	ecx, 5
	add	ecx, edx
	ror	ebx, 2
	add	eax, -899497514				; ca62c1d6H
	mov	edx, DWORD PTR _E$72$[ebp]
	add	eax, DWORD PTR _W$66$[ebp]
	add	eax, ecx
	mov	ecx, DWORD PTR _W$58$[ebp]
	xor	ecx, DWORD PTR _W$53$[ebp]
	xor	ecx, DWORD PTR _W$47$[ebp]
	xor	ecx, DWORD PTR _W$45$[ebp]
	rol	ecx, 1
	mov	DWORD PTR _E$73$[ebp], eax
	mov	DWORD PTR _W$67$[ebp], ecx
	mov	ecx, eax
	rol	ecx, 5
	mov	eax, edi
	xor	eax, ebx
	add	ecx, esi
	mov	esi, DWORD PTR _W$59$[ebp]
	xor	eax, edx
	xor	esi, DWORD PTR _W$54$[ebp]
	add	eax, -899497514				; ca62c1d6H
	add	eax, DWORD PTR _W$67$[ebp]
	xor	esi, DWORD PTR _W$48$[ebp]
	add	eax, ecx
	xor	esi, DWORD PTR _W$46$[ebp]
	mov	ecx, eax
	mov	DWORD PTR _E$74$[ebp], eax
	mov	eax, ebx
	ror	edx, 2
	xor	eax, edx
	rol	ecx, 5
	xor	eax, DWORD PTR _E$73$[ebp]
	add	ecx, edi
	mov	edi, DWORD PTR _E$73$[ebp]
	add	eax, -899497514				; ca62c1d6H
	rol	esi, 1
	add	eax, esi
	ror	edi, 2
	add	eax, ecx
	mov	DWORD PTR _E$73$[ebp], edi

; 169  :     ROUND_60_TO_79(75); ROUND_60_TO_79(76); ROUND_60_TO_79(77); ROUND_60_TO_79(78); ROUND_60_TO_79(79);

	mov	ecx, DWORD PTR _W$66$[ebp]
	xor	ecx, DWORD PTR _W$55$[ebp]
	xor	ecx, DWORD PTR _W$49$[ebp]
	xor	ecx, DWORD PTR _W$47$[ebp]
	rol	ecx, 1
	mov	DWORD PTR _W$66$[ebp], ecx
	mov	ecx, eax
	mov	DWORD PTR _E$75$[ebp], eax
	mov	eax, edx
	rol	ecx, 5
	xor	eax, edi
	xor	esi, DWORD PTR _W$57$[ebp]
	xor	eax, DWORD PTR _E$74$[ebp]
	lea	edi, DWORD PTR [ebx+ecx]
	add	eax, -899497514				; ca62c1d6H
	ror	DWORD PTR _E$74$[ebp], 2
	add	eax, DWORD PTR _W$66$[ebp]
	add	edi, eax
	xor	esi, DWORD PTR _W$51$[ebp]
	mov	eax, DWORD PTR _W$67$[ebp]
	mov	ecx, edi
	xor	eax, DWORD PTR _W$56$[ebp]
	xor	eax, DWORD PTR _W$50$[ebp]
	xor	eax, DWORD PTR _W$48$[ebp]
	xor	esi, DWORD PTR _W$49$[ebp]
	rol	eax, 1
	mov	DWORD PTR _W$67$[ebp], eax
	mov	eax, DWORD PTR _E$73$[ebp]
	xor	eax, DWORD PTR _E$74$[ebp]
	xor	eax, DWORD PTR _E$75$[ebp]
	ror	DWORD PTR _E$75$[ebp], 2
	add	eax, -899497514				; ca62c1d6H
	add	eax, DWORD PTR _W$67$[ebp]
	mov	ebx, DWORD PTR _E$75$[ebp]
	rol	ecx, 5
	add	edx, ecx
	rol	esi, 1
	add	edx, eax
	add	esi, -899497514				; ca62c1d6H
	mov	eax, DWORD PTR _E$74$[ebp]
	mov	ecx, edx
	xor	eax, DWORD PTR _E$75$[ebp]
	xor	eax, edi
	rol	ecx, 5
	add	ecx, DWORD PTR _E$73$[ebp]
	add	eax, esi
	mov	esi, DWORD PTR _W$66$[ebp]
	add	ecx, eax
	xor	esi, DWORD PTR _W$58$[ebp]
	mov	eax, ebx
	xor	esi, DWORD PTR _W$52$[ebp]
	xor	esi, DWORD PTR _W$50$[ebp]
	mov	DWORD PTR _C$78$[ebp], ecx
	rol	ecx, 5
	ror	edi, 2
	add	ecx, -899497514				; ca62c1d6H
	add	ecx, DWORD PTR _E$74$[ebp]
	xor	eax, edi
	xor	eax, edx
	rol	esi, 1
	add	eax, esi
	ror	edx, 2
	mov	esi, DWORD PTR _C$78$[ebp]
	add	eax, ecx
	mov	ecx, DWORD PTR _W$67$[ebp]
	xor	edi, edx
	xor	ecx, DWORD PTR _W$59$[ebp]
	xor	edi, esi
	xor	ecx, DWORD PTR _W$53$[ebp]
	xor	ecx, DWORD PTR _W$51$[ebp]
	mov	DWORD PTR _B$79$[ebp], eax
	rol	eax, 5
	rol	ecx, 1
	add	ecx, 833086679				; 31a7e4d7H
	ror	esi, 2

; 170  :     
; 171  : 	A += H0;

	add	edi, ecx

; 172  : 	B += H1;
; 173  : 	C += H2;

	sub	esi, 1732584194				; 67452302H
	lea	edx, DWORD PTR [ebx+eax]

; 174  : 
; 175  : 	BOOL result =    (tripcode[ 0] == base64CharTable[ A >> 26                  ])
; 176  : 	              && (tripcode[ 1] == base64CharTable[(A >> 20          ) & 0x3f])
; 177  : 	              && (tripcode[ 2] == base64CharTable[(A >> 14          ) & 0x3f])
; 178  : 	              && (tripcode[ 3] == base64CharTable[(A >>  8          ) & 0x3f])
; 179  : 	              && (tripcode[ 4] == base64CharTable[(A >>  2          ) & 0x3f])
; 180  : 	              && (tripcode[ 5] == base64CharTable[(B >> 28 | A <<  4) & 0x3f])
; 181  : 	              && (tripcode[ 6] == base64CharTable[(B >> 22          ) & 0x3f])
; 182  : 	              && (tripcode[ 7] == base64CharTable[(B >> 16          ) & 0x3f])
; 183  : 	              && (tripcode[ 8] == base64CharTable[(B >> 10          ) & 0x3f])
; 184  : 	              && (tripcode[ 9] == base64CharTable[(B >>  4          ) & 0x3f])
; 185  : 	              && (tripcode[10] == base64CharTable[(B <<  2 | C >> 30) & 0x3f])
; 186  : 	              && (tripcode[11] == base64CharTable[(C >> 24          ) & 0x3f]);

	mov	ebx, DWORD PTR _tripcode$1$[ebp]
	add	edx, edi
	mov	edi, DWORD PTR _B$79$[ebp]
	mov	eax, edx
	sub	edi, 271733879				; 10325477H
	shr	eax, 26					; 0000001aH
	movsx	ecx, BYTE PTR ?base64CharTable@@3PADA[eax]
	movzx	eax, BYTE PTR [ebx]
	cmp	eax, ecx
	jne	$LN6@VerifySHA1
	mov	eax, edx
	shr	eax, 20					; 00000014H
	and	eax, 63					; 0000003fH
	movsx	ecx, BYTE PTR ?base64CharTable@@3PADA[eax]
	movzx	eax, BYTE PTR [ebx+1]
	cmp	eax, ecx
	jne	$LN6@VerifySHA1
	mov	eax, edx
	shr	eax, 14					; 0000000eH
	and	eax, 63					; 0000003fH
	movsx	ecx, BYTE PTR ?base64CharTable@@3PADA[eax]
	movzx	eax, BYTE PTR [ebx+2]
	cmp	eax, ecx
	jne	$LN6@VerifySHA1
	mov	eax, edx
	shr	eax, 8
	and	eax, 63					; 0000003fH
	movsx	ecx, BYTE PTR ?base64CharTable@@3PADA[eax]
	movzx	eax, BYTE PTR [ebx+3]
	cmp	eax, ecx
	jne	$LN6@VerifySHA1
	mov	eax, edx
	shr	eax, 2
	and	eax, 63					; 0000003fH
	movsx	ecx, BYTE PTR ?base64CharTable@@3PADA[eax]
	movzx	eax, BYTE PTR [ebx+4]
	cmp	eax, ecx
	jne	$LN6@VerifySHA1
	mov	eax, edi
	shl	edx, 4
	shr	eax, 28					; 0000001cH
	or	eax, edx
	and	eax, 63					; 0000003fH
	movsx	ecx, BYTE PTR ?base64CharTable@@3PADA[eax]
	movzx	eax, BYTE PTR [ebx+5]
	cmp	eax, ecx
	jne	$LN6@VerifySHA1
	mov	eax, edi
	shr	eax, 22					; 00000016H
	and	eax, 63					; 0000003fH
	movsx	ecx, BYTE PTR ?base64CharTable@@3PADA[eax]
	movzx	eax, BYTE PTR [ebx+6]
	cmp	eax, ecx
	jne	$LN6@VerifySHA1
	mov	eax, edi
	shr	eax, 16					; 00000010H
	and	eax, 63					; 0000003fH
	movsx	ecx, BYTE PTR ?base64CharTable@@3PADA[eax]
	movzx	eax, BYTE PTR [ebx+7]
	cmp	eax, ecx
	jne	SHORT $LN6@VerifySHA1
	mov	eax, edi
	shr	eax, 10					; 0000000aH
	and	eax, 63					; 0000003fH
	movsx	ecx, BYTE PTR ?base64CharTable@@3PADA[eax]
	movzx	eax, BYTE PTR [ebx+8]
	cmp	eax, ecx
	jne	SHORT $LN6@VerifySHA1
	mov	eax, edi
	shr	eax, 4
	and	eax, 63					; 0000003fH
	movsx	ecx, BYTE PTR ?base64CharTable@@3PADA[eax]
	movzx	eax, BYTE PTR [ebx+9]
	cmp	eax, ecx
	jne	SHORT $LN6@VerifySHA1
	mov	ecx, esi
	lea	eax, DWORD PTR [edi*4]
	shr	ecx, 30					; 0000001eH
	or	ecx, eax
	movzx	eax, BYTE PTR [ebx+10]
	and	ecx, 63					; 0000003fH
	movsx	ecx, BYTE PTR ?base64CharTable@@3PADA[ecx]
	cmp	eax, ecx
	jne	SHORT $LN6@VerifySHA1
	movzx	eax, BYTE PTR [ebx+11]
	shr	esi, 24					; 00000018H
	and	esi, 63					; 0000003fH
	movsx	ecx, BYTE PTR ?base64CharTable@@3PADA[esi]
	cmp	eax, ecx
	jne	SHORT $LN6@VerifySHA1
	mov	esi, 1
	jmp	SHORT $LN1@VerifySHA1
$LN6@VerifySHA1:

; 187  : 
; 188  : #if TRUE
; 189  : 	if (!result) {
; 190  : 		printf("key:      `%s'\n", key);

	push	DWORD PTR _key$1$[ebp]
	xor	esi, esi
	push	OFFSET $SG4294905149
	call	_printf

; 191  : 		printf("tripcode: `%s'\n", tripcode);

	push	ebx
	push	OFFSET $SG4294905148
	call	_printf
	add	esp, 16					; 00000010H
$LN1@VerifySHA1:

; 192  : 	}
; 193  : 	fflush(stdout);

	call	___iob_func
	add	eax, 32					; 00000020H
	push	eax
	call	_fflush
	add	esp, 4

; 194  : #endif
; 195  : 
; 196  : 	return result;

	mov	eax, esi
	pop	edi
	pop	ebx
	pop	esi

; 197  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@VerifySHA1:

; 140  : 		return FALSE;

	xor	eax, eax
	pop	esi

; 197  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?VerifySHA1Tripcode@@YAHPAE0@Z ENDP			; VerifySHA1Tripcode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\boost\system\error_code.hpp
;	COMDAT ??__Eposix_category@system@boost@@YAXXZ
text$di	SEGMENT
??__Eposix_category@system@boost@@YAXXZ PROC		; boost::system::`dynamic initializer for 'posix_category'', COMDAT

; 221  :     static const error_category &  posix_category = generic_category();

	call	?generic_category@system@boost@@YAABVerror_category@12@XZ ; boost::system::generic_category
	mov	DWORD PTR _posix_category, eax
	ret	0
??__Eposix_category@system@boost@@YAXXZ ENDP		; boost::system::`dynamic initializer for 'posix_category''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\boost\system\error_code.hpp
;	COMDAT ??__Eerrno_ecat@system@boost@@YAXXZ
text$di	SEGMENT
??__Eerrno_ecat@system@boost@@YAXXZ PROC		; boost::system::`dynamic initializer for 'errno_ecat'', COMDAT

; 222  :     static const error_category &  errno_ecat     = generic_category();

	call	?generic_category@system@boost@@YAABVerror_category@12@XZ ; boost::system::generic_category
	mov	DWORD PTR _errno_ecat, eax
	ret	0
??__Eerrno_ecat@system@boost@@YAXXZ ENDP		; boost::system::`dynamic initializer for 'errno_ecat''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\boost\system\error_code.hpp
;	COMDAT ??__Enative_ecat@system@boost@@YAXXZ
text$di	SEGMENT
??__Enative_ecat@system@boost@@YAXXZ PROC		; boost::system::`dynamic initializer for 'native_ecat'', COMDAT

; 223  :     static const error_category &  native_ecat    = system_category();

	call	?system_category@system@boost@@YAABVerror_category@12@XZ ; boost::system::system_category
	mov	DWORD PTR _native_ecat, eax
	ret	0
??__Enative_ecat@system@boost@@YAXXZ ENDP		; boost::system::`dynamic initializer for 'native_ecat''
text$di	ENDS
END
